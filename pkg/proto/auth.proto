syntax = "proto3";

package pb;

option go_package = "github.com/Kisanlink/aaa-service/pkg/proto;pb";

// V2 User model with enhanced fields
message User {
    string id = 1;
    string username = 2;
    string phone_number = 3;
    string country_code = 4;
    string email = 5;
    string full_name = 6;
    bool is_validated = 7;
    string status = 8;
    string created_at = 9;
    string updated_at = 10;
    repeated UserRole user_roles = 11;
    repeated string permissions = 12;
}

// V2 UserRole model
message UserRole {
    string id = 1;
    string user_id = 2;
    string role_id = 3;
    string role_name = 4;
    string role_description = 5;
    string created_at = 6;
    string updated_at = 7;
}

// V2 Login Request
message LoginRequest {
    string username = 1;
    string password = 2;
    string mfa_code = 3; // Optional MFA code
}

// V2 Login Response
message LoginResponse {
    int32 status_code = 1;
    string message = 2;
    string access_token = 3;
    string refresh_token = 4;
    string token_type = 5;
    int32 expires_in = 6;
    User user = 7;
    repeated string permissions = 8;
}

// V2 Register Request
message RegisterRequest {
    string username = 1;
    string email = 2;
    string full_name = 3;
    string password = 4;
    repeated string role_ids = 5;
}

// V2 Register Response
message RegisterResponse {
    int32 status_code = 1;
    string message = 2;
    User user = 3;
    string access_token = 4;
    string refresh_token = 5;
}

// V2 Get User Request
message GetUserRequest {
    string id = 1;
    bool include_roles = 2;
    bool include_permissions = 3;
}

// V2 Get User Response
message GetUserResponse {
    int32 status_code = 1;
    string message = 2;
    User user = 3;
}

// V2 Get All Users Request
message GetAllUsersRequest {
    int32 page = 1;
    int32 per_page = 2;
    string search = 3;
    string status = 4;
    repeated string role_ids = 5;
}

// V2 Get All Users Response
message GetAllUsersResponse {
    int32 status_code = 1;
    string message = 2;
    repeated User users = 3;
    int32 total_count = 4;
    int32 page = 5;
    int32 per_page = 6;
}

// V2 Update User Request
message UpdateUserRequest {
    string id = 1;
    string username = 2;
    string email = 3;
    string full_name = 4;
    bool is_validated = 5;
    string status = 6;
    repeated string role_ids = 7;
}

// V2 Update User Response
message UpdateUserResponse {
    int32 status_code = 1;
    string message = 2;
    User user = 3;
}

// V2 Delete User Request
message DeleteUserRequest {
    string id = 1;
}

// V2 Delete User Response
message DeleteUserResponse {
    int32 status_code = 1;
    string message = 2;
}

// V2 Refresh Token Request
message RefreshTokenRequest {
    string refresh_token = 1;
}

// V2 Refresh Token Response
message RefreshTokenResponse {
    int32 status_code = 1;
    string message = 2;
    string access_token = 3;
    string refresh_token = 4;
    int32 expires_in = 5;
}

// V2 Logout Request
message LogoutRequest {
    string access_token = 1;
}

// V2 Logout Response
message LogoutResponse {
    int32 status_code = 1;
    string message = 2;
}

// V2 Get User By Phone Request
message GetUserByPhoneRequest {
    string phone_number = 1;
    string country_code = 2;
    bool include_roles = 3;
    bool include_permissions = 4;
}

// V2 Verify Password Request
message VerifyPasswordRequest {
    string username = 1;
    string password = 2;
}

// V2 Verify Password Response
message VerifyPasswordResponse {
    int32 status_code = 1;
    string message = 2;
    bool valid = 3;
    User user = 4;
}

// V2 User Service
service UserService {
    rpc Login(LoginRequest) returns (LoginResponse);
    rpc Register(RegisterRequest) returns (RegisterResponse);
    rpc GetUser(GetUserRequest) returns (GetUserResponse);
    rpc GetAllUsers(GetAllUsersRequest) returns (GetAllUsersResponse);
    rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
    rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);
    rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse);
    rpc Logout(LogoutRequest) returns (LogoutResponse);
    rpc GetUserByPhone(GetUserByPhoneRequest) returns (GetUserResponse);
    rpc VerifyUserPassword(VerifyPasswordRequest) returns (VerifyPasswordResponse);
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: aaa_client.proto

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AAAClientService_GetConnectionStatus_FullMethodName = "/pb.AAAClientService/GetConnectionStatus"
	AAAClientService_RefreshSession_FullMethodName      = "/pb.AAAClientService/RefreshSession"
	AAAClientService_GetClientMetrics_FullMethodName    = "/pb.AAAClientService/GetClientMetrics"
)

// AAAClientServiceClient is the client API for AAAClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AAA Client Management Service
// This service is implemented by the client library itself for client-side operations
type AAAClientServiceClient interface {
	// Get current connection status
	GetConnectionStatus(ctx context.Context, in *ClientHealthCheckRequest, opts ...grpc.CallOption) (*ClientHealthCheckResponse, error)
	// Refresh the client session
	RefreshSession(ctx context.Context, in *RefreshClientSessionRequest, opts ...grpc.CallOption) (*RefreshClientSessionResponse, error)
	// Get client-side metrics
	GetClientMetrics(ctx context.Context, in *GetClientMetricsRequest, opts ...grpc.CallOption) (*GetClientMetricsResponse, error)
}

type aAAClientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAAAClientServiceClient(cc grpc.ClientConnInterface) AAAClientServiceClient {
	return &aAAClientServiceClient{cc}
}

func (c *aAAClientServiceClient) GetConnectionStatus(ctx context.Context, in *ClientHealthCheckRequest, opts ...grpc.CallOption) (*ClientHealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientHealthCheckResponse)
	err := c.cc.Invoke(ctx, AAAClientService_GetConnectionStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aAAClientServiceClient) RefreshSession(ctx context.Context, in *RefreshClientSessionRequest, opts ...grpc.CallOption) (*RefreshClientSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshClientSessionResponse)
	err := c.cc.Invoke(ctx, AAAClientService_RefreshSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aAAClientServiceClient) GetClientMetrics(ctx context.Context, in *GetClientMetricsRequest, opts ...grpc.CallOption) (*GetClientMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClientMetricsResponse)
	err := c.cc.Invoke(ctx, AAAClientService_GetClientMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AAAClientServiceServer is the server API for AAAClientService service.
// All implementations must embed UnimplementedAAAClientServiceServer
// for forward compatibility.
//
// AAA Client Management Service
// This service is implemented by the client library itself for client-side operations
type AAAClientServiceServer interface {
	// Get current connection status
	GetConnectionStatus(context.Context, *ClientHealthCheckRequest) (*ClientHealthCheckResponse, error)
	// Refresh the client session
	RefreshSession(context.Context, *RefreshClientSessionRequest) (*RefreshClientSessionResponse, error)
	// Get client-side metrics
	GetClientMetrics(context.Context, *GetClientMetricsRequest) (*GetClientMetricsResponse, error)
	mustEmbedUnimplementedAAAClientServiceServer()
}

// UnimplementedAAAClientServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAAAClientServiceServer struct{}

func (UnimplementedAAAClientServiceServer) GetConnectionStatus(context.Context, *ClientHealthCheckRequest) (*ClientHealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectionStatus not implemented")
}
func (UnimplementedAAAClientServiceServer) RefreshSession(context.Context, *RefreshClientSessionRequest) (*RefreshClientSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshSession not implemented")
}
func (UnimplementedAAAClientServiceServer) GetClientMetrics(context.Context, *GetClientMetricsRequest) (*GetClientMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientMetrics not implemented")
}
func (UnimplementedAAAClientServiceServer) mustEmbedUnimplementedAAAClientServiceServer() {}
func (UnimplementedAAAClientServiceServer) testEmbeddedByValue()                          {}

// UnsafeAAAClientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AAAClientServiceServer will
// result in compilation errors.
type UnsafeAAAClientServiceServer interface {
	mustEmbedUnimplementedAAAClientServiceServer()
}

func RegisterAAAClientServiceServer(s grpc.ServiceRegistrar, srv AAAClientServiceServer) {
	// If the following call pancis, it indicates UnimplementedAAAClientServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AAAClientService_ServiceDesc, srv)
}

func _AAAClientService_GetConnectionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientHealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AAAClientServiceServer).GetConnectionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AAAClientService_GetConnectionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AAAClientServiceServer).GetConnectionStatus(ctx, req.(*ClientHealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AAAClientService_RefreshSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshClientSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AAAClientServiceServer).RefreshSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AAAClientService_RefreshSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AAAClientServiceServer).RefreshSession(ctx, req.(*RefreshClientSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AAAClientService_GetClientMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AAAClientServiceServer).GetClientMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AAAClientService_GetClientMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AAAClientServiceServer).GetClientMetrics(ctx, req.(*GetClientMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AAAClientService_ServiceDesc is the grpc.ServiceDesc for AAAClientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AAAClientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AAAClientService",
	HandlerType: (*AAAClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConnectionStatus",
			Handler:    _AAAClientService_GetConnectionStatus_Handler,
		},
		{
			MethodName: "RefreshSession",
			Handler:    _AAAClientService_RefreshSession_Handler,
		},
		{
			MethodName: "GetClientMetrics",
			Handler:    _AAAClientService_GetClientMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aaa_client.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: binding.proto

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BindingService_CreateBinding_FullMethodName     = "/pb.BindingService/CreateBinding"
	BindingService_GetBinding_FullMethodName        = "/pb.BindingService/GetBinding"
	BindingService_ListBindings_FullMethodName      = "/pb.BindingService/ListBindings"
	BindingService_UpdateBinding_FullMethodName     = "/pb.BindingService/UpdateBinding"
	BindingService_DeleteBinding_FullMethodName     = "/pb.BindingService/DeleteBinding"
	BindingService_RollbackBinding_FullMethodName   = "/pb.BindingService/RollbackBinding"
	BindingService_GetBindingHistory_FullMethodName = "/pb.BindingService/GetBindingHistory"
)

// BindingServiceClient is the client API for BindingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Binding Service - manages authorization bindings
type BindingServiceClient interface {
	CreateBinding(ctx context.Context, in *CreateBindingRequest, opts ...grpc.CallOption) (*CreateBindingResponse, error)
	GetBinding(ctx context.Context, in *GetBindingRequest, opts ...grpc.CallOption) (*GetBindingResponse, error)
	ListBindings(ctx context.Context, in *ListBindingsRequest, opts ...grpc.CallOption) (*ListBindingsResponse, error)
	UpdateBinding(ctx context.Context, in *UpdateBindingRequest, opts ...grpc.CallOption) (*UpdateBindingResponse, error)
	DeleteBinding(ctx context.Context, in *DeleteBindingRequest, opts ...grpc.CallOption) (*DeleteBindingResponse, error)
	RollbackBinding(ctx context.Context, in *RollbackBindingRequest, opts ...grpc.CallOption) (*RollbackBindingResponse, error)
	GetBindingHistory(ctx context.Context, in *GetBindingHistoryRequest, opts ...grpc.CallOption) (*GetBindingHistoryResponse, error)
}

type bindingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBindingServiceClient(cc grpc.ClientConnInterface) BindingServiceClient {
	return &bindingServiceClient{cc}
}

func (c *bindingServiceClient) CreateBinding(ctx context.Context, in *CreateBindingRequest, opts ...grpc.CallOption) (*CreateBindingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBindingResponse)
	err := c.cc.Invoke(ctx, BindingService_CreateBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bindingServiceClient) GetBinding(ctx context.Context, in *GetBindingRequest, opts ...grpc.CallOption) (*GetBindingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBindingResponse)
	err := c.cc.Invoke(ctx, BindingService_GetBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bindingServiceClient) ListBindings(ctx context.Context, in *ListBindingsRequest, opts ...grpc.CallOption) (*ListBindingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBindingsResponse)
	err := c.cc.Invoke(ctx, BindingService_ListBindings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bindingServiceClient) UpdateBinding(ctx context.Context, in *UpdateBindingRequest, opts ...grpc.CallOption) (*UpdateBindingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBindingResponse)
	err := c.cc.Invoke(ctx, BindingService_UpdateBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bindingServiceClient) DeleteBinding(ctx context.Context, in *DeleteBindingRequest, opts ...grpc.CallOption) (*DeleteBindingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBindingResponse)
	err := c.cc.Invoke(ctx, BindingService_DeleteBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bindingServiceClient) RollbackBinding(ctx context.Context, in *RollbackBindingRequest, opts ...grpc.CallOption) (*RollbackBindingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RollbackBindingResponse)
	err := c.cc.Invoke(ctx, BindingService_RollbackBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bindingServiceClient) GetBindingHistory(ctx context.Context, in *GetBindingHistoryRequest, opts ...grpc.CallOption) (*GetBindingHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBindingHistoryResponse)
	err := c.cc.Invoke(ctx, BindingService_GetBindingHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BindingServiceServer is the server API for BindingService service.
// All implementations must embed UnimplementedBindingServiceServer
// for forward compatibility.
//
// Binding Service - manages authorization bindings
type BindingServiceServer interface {
	CreateBinding(context.Context, *CreateBindingRequest) (*CreateBindingResponse, error)
	GetBinding(context.Context, *GetBindingRequest) (*GetBindingResponse, error)
	ListBindings(context.Context, *ListBindingsRequest) (*ListBindingsResponse, error)
	UpdateBinding(context.Context, *UpdateBindingRequest) (*UpdateBindingResponse, error)
	DeleteBinding(context.Context, *DeleteBindingRequest) (*DeleteBindingResponse, error)
	RollbackBinding(context.Context, *RollbackBindingRequest) (*RollbackBindingResponse, error)
	GetBindingHistory(context.Context, *GetBindingHistoryRequest) (*GetBindingHistoryResponse, error)
	mustEmbedUnimplementedBindingServiceServer()
}

// UnimplementedBindingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBindingServiceServer struct{}

func (UnimplementedBindingServiceServer) CreateBinding(context.Context, *CreateBindingRequest) (*CreateBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBinding not implemented")
}
func (UnimplementedBindingServiceServer) GetBinding(context.Context, *GetBindingRequest) (*GetBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBinding not implemented")
}
func (UnimplementedBindingServiceServer) ListBindings(context.Context, *ListBindingsRequest) (*ListBindingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBindings not implemented")
}
func (UnimplementedBindingServiceServer) UpdateBinding(context.Context, *UpdateBindingRequest) (*UpdateBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBinding not implemented")
}
func (UnimplementedBindingServiceServer) DeleteBinding(context.Context, *DeleteBindingRequest) (*DeleteBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBinding not implemented")
}
func (UnimplementedBindingServiceServer) RollbackBinding(context.Context, *RollbackBindingRequest) (*RollbackBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackBinding not implemented")
}
func (UnimplementedBindingServiceServer) GetBindingHistory(context.Context, *GetBindingHistoryRequest) (*GetBindingHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBindingHistory not implemented")
}
func (UnimplementedBindingServiceServer) mustEmbedUnimplementedBindingServiceServer() {}
func (UnimplementedBindingServiceServer) testEmbeddedByValue()                        {}

// UnsafeBindingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BindingServiceServer will
// result in compilation errors.
type UnsafeBindingServiceServer interface {
	mustEmbedUnimplementedBindingServiceServer()
}

func RegisterBindingServiceServer(s grpc.ServiceRegistrar, srv BindingServiceServer) {
	// If the following call pancis, it indicates UnimplementedBindingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BindingService_ServiceDesc, srv)
}

func _BindingService_CreateBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BindingServiceServer).CreateBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BindingService_CreateBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BindingServiceServer).CreateBinding(ctx, req.(*CreateBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BindingService_GetBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BindingServiceServer).GetBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BindingService_GetBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BindingServiceServer).GetBinding(ctx, req.(*GetBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BindingService_ListBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BindingServiceServer).ListBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BindingService_ListBindings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BindingServiceServer).ListBindings(ctx, req.(*ListBindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BindingService_UpdateBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BindingServiceServer).UpdateBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BindingService_UpdateBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BindingServiceServer).UpdateBinding(ctx, req.(*UpdateBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BindingService_DeleteBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BindingServiceServer).DeleteBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BindingService_DeleteBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BindingServiceServer).DeleteBinding(ctx, req.(*DeleteBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BindingService_RollbackBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BindingServiceServer).RollbackBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BindingService_RollbackBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BindingServiceServer).RollbackBinding(ctx, req.(*RollbackBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BindingService_GetBindingHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBindingHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BindingServiceServer).GetBindingHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BindingService_GetBindingHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BindingServiceServer).GetBindingHistory(ctx, req.(*GetBindingHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BindingService_ServiceDesc is the grpc.ServiceDesc for BindingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BindingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.BindingService",
	HandlerType: (*BindingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBinding",
			Handler:    _BindingService_CreateBinding_Handler,
		},
		{
			MethodName: "GetBinding",
			Handler:    _BindingService_GetBinding_Handler,
		},
		{
			MethodName: "ListBindings",
			Handler:    _BindingService_ListBindings_Handler,
		},
		{
			MethodName: "UpdateBinding",
			Handler:    _BindingService_UpdateBinding_Handler,
		},
		{
			MethodName: "DeleteBinding",
			Handler:    _BindingService_DeleteBinding_Handler,
		},
		{
			MethodName: "RollbackBinding",
			Handler:    _BindingService_RollbackBinding_Handler,
		},
		{
			MethodName: "GetBindingHistory",
			Handler:    _BindingService_GetBindingHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "binding.proto",
}

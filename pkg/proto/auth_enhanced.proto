syntax = "proto3";

package pb;

option go_package = "github.com/Kisanlink/aaa-service/pkg/proto;pb";

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "organization.proto";

// Enhanced User model with comprehensive fields for e-commerce
message User {
    string id = 1;
    string username = 2;
    string phone_number = 3;
    string country_code = 4;
    string email = 5;
    string full_name = 6;
    bool is_validated = 7;
    string status = 8;
    string created_at = 9;
    string updated_at = 10;
    repeated UserRole user_roles = 11;
    repeated string permissions = 12;
    string organization_id = 13;
    string organization_name = 14;
    google.protobuf.Struct metadata = 15;
    repeated string groups = 16;
    string preferred_language = 17;
    string timezone = 18;
    string profile_picture_url = 19;
    string last_login_at = 20;
    int32 failed_login_attempts = 21;
    string locked_until = 22;
    bool mfa_enabled = 23;
    repeated string device_tokens = 24;
}

// Enhanced UserRole model
message UserRole {
    string id = 1;
    string user_id = 2;
    string role_id = 3;
    string role_name = 4;
    string role_description = 5;
    string created_at = 6;
    string updated_at = 7;
    string organization_id = 8;
    repeated string permissions = 9;
    bool is_active = 10;
    string expires_at = 11;
    google.protobuf.Struct context = 12;
}

// Enhanced Login Request
message LoginRequest {
    string username = 1;
    string password = 2;
    string mfa_code = 3;
    string organization_id = 4;
    string device_id = 5;
    string user_agent = 6;
    string ip_address = 7;
    bool remember_device = 8;
    repeated string requested_permissions = 9;
}

// Enhanced Login Response
message LoginResponse {
    int32 status_code = 1;
    string message = 2;
    string access_token = 3;
    string refresh_token = 4;
    string token_type = 5;
    int32 expires_in = 6;
    User user = 7;
    repeated string permissions = 8;
    string session_id = 9;
    bool requires_mfa = 10;
    repeated string available_mfa_methods = 11;
    string device_token = 12;
    google.protobuf.Struct additional_claims = 13;
}

// Enhanced Register Request
message RegisterRequest {
    string username = 1;
    string email = 2;
    string full_name = 3;
    string password = 4;
    repeated string role_ids = 5;
    string phone_number = 6;
    string country_code = 7;
    string organization_id = 8;
    string invited_by = 9;
    string invitation_token = 10;
    google.protobuf.Struct profile_data = 11;
    string preferred_language = 12;
    string timezone = 13;
    bool accept_terms = 14;
    bool subscribe_newsletter = 15;
}

// Enhanced Register Response
message RegisterResponse {
    int32 status_code = 1;
    string message = 2;
    User user = 3;
    string access_token = 4;
    string refresh_token = 5;
    bool requires_email_verification = 6;
    bool requires_phone_verification = 7;
    string verification_token = 8;
    repeated string next_steps = 9;
}

// Enhanced Get User Request
message GetUserRequest {
    string id = 1;
    bool include_roles = 2;
    bool include_permissions = 3;
    bool include_organization = 4;
    bool include_groups = 5;
    bool include_devices = 6;
    repeated string fields = 7;
}

// Enhanced Get User Response
message GetUserResponse {
    int32 status_code = 1;
    string message = 2;
    User user = 3;
    Organization organization = 4;
    repeated Group groups = 5;
    repeated Device devices = 6;
}

// Enhanced Get All Users Request
message GetAllUsersRequest {
    int32 page = 1;
    int32 per_page = 2;
    string search = 3;
    string status = 4;
    repeated string role_ids = 5;
    string organization_id = 6;
    repeated string user_ids = 7;
    string created_after = 8;
    string created_before = 9;
    string sort_by = 10;
    string sort_order = 11;
    repeated string include_fields = 12;
    google.protobuf.Struct filters = 13;
}

// Enhanced Get All Users Response
message GetAllUsersResponse {
    int32 status_code = 1;
    string message = 2;
    repeated User users = 3;
    int32 total_count = 4;
    int32 page = 5;
    int32 per_page = 6;
    int32 total_pages = 7;
    bool has_next_page = 8;
    bool has_prev_page = 9;
    string next_cursor = 10;
    string prev_cursor = 11;
}

// Enhanced Update User Request
message UpdateUserRequest {
    string id = 1;
    string username = 2;
    string email = 3;
    string full_name = 4;
    bool is_validated = 5;
    string status = 6;
    repeated string role_ids = 7;
    string phone_number = 8;
    string country_code = 9;
    google.protobuf.Struct metadata = 10;
    string preferred_language = 11;
    string timezone = 12;
    string profile_picture_url = 13;
    bool mfa_enabled = 14;
    repeated string fields_to_update = 15;
}

// Enhanced Update User Response
message UpdateUserResponse {
    int32 status_code = 1;
    string message = 2;
    User user = 3;
    repeated string updated_fields = 4;
    repeated string warnings = 5;
}

// Enhanced Delete User Request
message DeleteUserRequest {
    string id = 1;
    bool hard_delete = 2;
    string reason = 3;
    bool transfer_ownership = 4;
    string transfer_to_user_id = 5;
}

// Enhanced Delete User Response
message DeleteUserResponse {
    int32 status_code = 1;
    string message = 2;
    bool success = 3;
    repeated string transferred_resources = 4;
    string backup_reference = 5;
}

// Enhanced Refresh Token Request
message RefreshTokenRequest {
    string refresh_token = 1;
    string device_id = 2;
    repeated string requested_permissions = 3;
    string organization_id = 4;
}

// Enhanced Refresh Token Response
message RefreshTokenResponse {
    int32 status_code = 1;
    string message = 2;
    string access_token = 3;
    string refresh_token = 4;
    int32 expires_in = 5;
    User user = 6;
    repeated string permissions = 7;
    google.protobuf.Struct additional_claims = 8;
}

// Enhanced Logout Request
message LogoutRequest {
    string access_token = 1;
    string refresh_token = 2;
    string device_id = 3;
    bool logout_all_devices = 4;
}

// Enhanced Logout Response
message LogoutResponse {
    int32 status_code = 1;
    string message = 2;
    bool success = 3;
    int32 devices_logged_out = 4;
}

// Get User By Phone Request
message GetUserByPhoneRequest {
    string phone_number = 1;
    string country_code = 2;
    bool include_roles = 3;
    bool include_permissions = 4;
    bool include_organization = 5;
}

// Verify Password Request
message VerifyPasswordRequest {
    string username = 1;
    string password = 2;
    string organization_id = 3;
}

// Verify Password Response
message VerifyPasswordResponse {
    int32 status_code = 1;
    string message = 2;
    bool valid = 3;
    User user = 4;
    bool requires_mfa = 5;
    repeated string available_mfa_methods = 6;
}

// Supporting models
// Organization is defined in organization.proto

message Group {
    string id = 1;
    string name = 2;
    string description = 3;
    string organization_id = 4;
    repeated string user_ids = 5;
    repeated string permissions = 6;
    string created_at = 7;
    string updated_at = 8;
    google.protobuf.Struct metadata = 9;
}

message Device {
    string id = 1;
    string user_id = 2;
    string device_type = 3;
    string device_name = 4;
    string user_agent = 5;
    string ip_address = 6;
    string last_used_at = 7;
    bool is_trusted = 8;
    string device_fingerprint = 9;
    string push_token = 10;
}

// Enhanced User Service
service UserService {
    rpc Login(LoginRequest) returns (LoginResponse);
    rpc Register(RegisterRequest) returns (RegisterResponse);
    rpc GetUser(GetUserRequest) returns (GetUserResponse);
    rpc GetAllUsers(GetAllUsersRequest) returns (GetAllUsersResponse);
    rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
    rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);
    rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse);
    rpc Logout(LogoutRequest) returns (LogoutResponse);
    rpc GetUserByPhone(GetUserByPhoneRequest) returns (GetUserResponse);
    rpc VerifyUserPassword(VerifyPasswordRequest) returns (VerifyPasswordResponse);
}

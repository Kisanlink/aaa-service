// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v6.32.1
// source: permission.proto

package pb

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Assign permission to group
type AssignPermissionToGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroupId       string                 `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Resource      string                 `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Action        string                 `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignPermissionToGroupRequest) Reset() {
	*x = AssignPermissionToGroupRequest{}
	mi := &file_permission_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignPermissionToGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignPermissionToGroupRequest) ProtoMessage() {}

func (x *AssignPermissionToGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_permission_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignPermissionToGroupRequest.ProtoReflect.Descriptor instead.
func (*AssignPermissionToGroupRequest) Descriptor() ([]byte, []int) {
	return file_permission_proto_rawDescGZIP(), []int{0}
}

func (x *AssignPermissionToGroupRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *AssignPermissionToGroupRequest) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *AssignPermissionToGroupRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type AssignPermissionToGroupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StatusCode    int32                  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignPermissionToGroupResponse) Reset() {
	*x = AssignPermissionToGroupResponse{}
	mi := &file_permission_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignPermissionToGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignPermissionToGroupResponse) ProtoMessage() {}

func (x *AssignPermissionToGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_permission_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignPermissionToGroupResponse.ProtoReflect.Descriptor instead.
func (*AssignPermissionToGroupResponse) Descriptor() ([]byte, []int) {
	return file_permission_proto_rawDescGZIP(), []int{1}
}

func (x *AssignPermissionToGroupResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *AssignPermissionToGroupResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Check if group has permission
type CheckGroupPermissionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroupId       string                 `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Resource      string                 `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Action        string                 `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckGroupPermissionRequest) Reset() {
	*x = CheckGroupPermissionRequest{}
	mi := &file_permission_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckGroupPermissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckGroupPermissionRequest) ProtoMessage() {}

func (x *CheckGroupPermissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_permission_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckGroupPermissionRequest.ProtoReflect.Descriptor instead.
func (*CheckGroupPermissionRequest) Descriptor() ([]byte, []int) {
	return file_permission_proto_rawDescGZIP(), []int{2}
}

func (x *CheckGroupPermissionRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *CheckGroupPermissionRequest) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *CheckGroupPermissionRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type CheckGroupPermissionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HasPermission bool                   `protobuf:"varint,1,opt,name=has_permission,json=hasPermission,proto3" json:"has_permission,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckGroupPermissionResponse) Reset() {
	*x = CheckGroupPermissionResponse{}
	mi := &file_permission_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckGroupPermissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckGroupPermissionResponse) ProtoMessage() {}

func (x *CheckGroupPermissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_permission_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckGroupPermissionResponse.ProtoReflect.Descriptor instead.
func (*CheckGroupPermissionResponse) Descriptor() ([]byte, []int) {
	return file_permission_proto_rawDescGZIP(), []int{3}
}

func (x *CheckGroupPermissionResponse) GetHasPermission() bool {
	if x != nil {
		return x.HasPermission
	}
	return false
}

// List all permissions for a group
type ListGroupPermissionsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroupId       string                 `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListGroupPermissionsRequest) Reset() {
	*x = ListGroupPermissionsRequest{}
	mi := &file_permission_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListGroupPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupPermissionsRequest) ProtoMessage() {}

func (x *ListGroupPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_permission_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupPermissionsRequest.ProtoReflect.Descriptor instead.
func (*ListGroupPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_permission_proto_rawDescGZIP(), []int{4}
}

func (x *ListGroupPermissionsRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

type PermissionItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Resource      string                 `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Action        string                 `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	Description   string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PermissionItem) Reset() {
	*x = PermissionItem{}
	mi := &file_permission_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PermissionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionItem) ProtoMessage() {}

func (x *PermissionItem) ProtoReflect() protoreflect.Message {
	mi := &file_permission_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionItem.ProtoReflect.Descriptor instead.
func (*PermissionItem) Descriptor() ([]byte, []int) {
	return file_permission_proto_rawDescGZIP(), []int{5}
}

func (x *PermissionItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PermissionItem) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *PermissionItem) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *PermissionItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type ListGroupPermissionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StatusCode    int32                  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Permissions   []*PermissionItem      `protobuf:"bytes,3,rep,name=permissions,proto3" json:"permissions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListGroupPermissionsResponse) Reset() {
	*x = ListGroupPermissionsResponse{}
	mi := &file_permission_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListGroupPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupPermissionsResponse) ProtoMessage() {}

func (x *ListGroupPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_permission_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupPermissionsResponse.ProtoReflect.Descriptor instead.
func (*ListGroupPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_permission_proto_rawDescGZIP(), []int{6}
}

func (x *ListGroupPermissionsResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *ListGroupPermissionsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListGroupPermissionsResponse) GetPermissions() []*PermissionItem {
	if x != nil {
		return x.Permissions
	}
	return nil
}

// Remove permission from group
type RemovePermissionFromGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroupId       string                 `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Resource      string                 `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Action        string                 `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemovePermissionFromGroupRequest) Reset() {
	*x = RemovePermissionFromGroupRequest{}
	mi := &file_permission_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemovePermissionFromGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePermissionFromGroupRequest) ProtoMessage() {}

func (x *RemovePermissionFromGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_permission_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePermissionFromGroupRequest.ProtoReflect.Descriptor instead.
func (*RemovePermissionFromGroupRequest) Descriptor() ([]byte, []int) {
	return file_permission_proto_rawDescGZIP(), []int{7}
}

func (x *RemovePermissionFromGroupRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *RemovePermissionFromGroupRequest) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *RemovePermissionFromGroupRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type RemovePermissionFromGroupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StatusCode    int32                  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemovePermissionFromGroupResponse) Reset() {
	*x = RemovePermissionFromGroupResponse{}
	mi := &file_permission_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemovePermissionFromGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePermissionFromGroupResponse) ProtoMessage() {}

func (x *RemovePermissionFromGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_permission_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePermissionFromGroupResponse.ProtoReflect.Descriptor instead.
func (*RemovePermissionFromGroupResponse) Descriptor() ([]byte, []int) {
	return file_permission_proto_rawDescGZIP(), []int{8}
}

func (x *RemovePermissionFromGroupResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *RemovePermissionFromGroupResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Get user's effective permissions (from all groups and roles)
type GetUserEffectivePermissionsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OrgId         string                 `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"` // optional - filter by organization
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserEffectivePermissionsRequest) Reset() {
	*x = GetUserEffectivePermissionsRequest{}
	mi := &file_permission_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserEffectivePermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserEffectivePermissionsRequest) ProtoMessage() {}

func (x *GetUserEffectivePermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_permission_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserEffectivePermissionsRequest.ProtoReflect.Descriptor instead.
func (*GetUserEffectivePermissionsRequest) Descriptor() ([]byte, []int) {
	return file_permission_proto_rawDescGZIP(), []int{9}
}

func (x *GetUserEffectivePermissionsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserEffectivePermissionsRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

type GetUserEffectivePermissionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StatusCode    int32                  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Permissions   []*PermissionItem      `protobuf:"bytes,3,rep,name=permissions,proto3" json:"permissions,omitempty"`
	Roles         []string               `protobuf:"bytes,4,rep,name=roles,proto3" json:"roles,omitempty"`   // Roles that contributed to permissions
	Groups        []string               `protobuf:"bytes,5,rep,name=groups,proto3" json:"groups,omitempty"` // Groups that contributed to permissions
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserEffectivePermissionsResponse) Reset() {
	*x = GetUserEffectivePermissionsResponse{}
	mi := &file_permission_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserEffectivePermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserEffectivePermissionsResponse) ProtoMessage() {}

func (x *GetUserEffectivePermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_permission_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserEffectivePermissionsResponse.ProtoReflect.Descriptor instead.
func (*GetUserEffectivePermissionsResponse) Descriptor() ([]byte, []int) {
	return file_permission_proto_rawDescGZIP(), []int{10}
}

func (x *GetUserEffectivePermissionsResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *GetUserEffectivePermissionsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetUserEffectivePermissionsResponse) GetPermissions() []*PermissionItem {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *GetUserEffectivePermissionsResponse) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *GetUserEffectivePermissionsResponse) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

var File_permission_proto protoreflect.FileDescriptor

const file_permission_proto_rawDesc = "" +
	"\n" +
	"\x10permission.proto\x12\x02pb\"o\n" +
	"\x1eAssignPermissionToGroupRequest\x12\x19\n" +
	"\bgroup_id\x18\x01 \x01(\tR\agroupId\x12\x1a\n" +
	"\bresource\x18\x02 \x01(\tR\bresource\x12\x16\n" +
	"\x06action\x18\x03 \x01(\tR\x06action\"\\\n" +
	"\x1fAssignPermissionToGroupResponse\x12\x1f\n" +
	"\vstatus_code\x18\x01 \x01(\x05R\n" +
	"statusCode\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"l\n" +
	"\x1bCheckGroupPermissionRequest\x12\x19\n" +
	"\bgroup_id\x18\x01 \x01(\tR\agroupId\x12\x1a\n" +
	"\bresource\x18\x02 \x01(\tR\bresource\x12\x16\n" +
	"\x06action\x18\x03 \x01(\tR\x06action\"E\n" +
	"\x1cCheckGroupPermissionResponse\x12%\n" +
	"\x0ehas_permission\x18\x01 \x01(\bR\rhasPermission\"8\n" +
	"\x1bListGroupPermissionsRequest\x12\x19\n" +
	"\bgroup_id\x18\x01 \x01(\tR\agroupId\"v\n" +
	"\x0ePermissionItem\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\bresource\x18\x02 \x01(\tR\bresource\x12\x16\n" +
	"\x06action\x18\x03 \x01(\tR\x06action\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\"\x8f\x01\n" +
	"\x1cListGroupPermissionsResponse\x12\x1f\n" +
	"\vstatus_code\x18\x01 \x01(\x05R\n" +
	"statusCode\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x124\n" +
	"\vpermissions\x18\x03 \x03(\v2\x12.pb.PermissionItemR\vpermissions\"q\n" +
	" RemovePermissionFromGroupRequest\x12\x19\n" +
	"\bgroup_id\x18\x01 \x01(\tR\agroupId\x12\x1a\n" +
	"\bresource\x18\x02 \x01(\tR\bresource\x12\x16\n" +
	"\x06action\x18\x03 \x01(\tR\x06action\"^\n" +
	"!RemovePermissionFromGroupResponse\x12\x1f\n" +
	"\vstatus_code\x18\x01 \x01(\x05R\n" +
	"statusCode\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"T\n" +
	"\"GetUserEffectivePermissionsRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x15\n" +
	"\x06org_id\x18\x02 \x01(\tR\x05orgId\"\xc4\x01\n" +
	"#GetUserEffectivePermissionsResponse\x12\x1f\n" +
	"\vstatus_code\x18\x01 \x01(\x05R\n" +
	"statusCode\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x124\n" +
	"\vpermissions\x18\x03 \x03(\v2\x12.pb.PermissionItemR\vpermissions\x12\x14\n" +
	"\x05roles\x18\x04 \x03(\tR\x05roles\x12\x16\n" +
	"\x06groups\x18\x05 \x03(\tR\x06groups2\x87\x04\n" +
	"\x11PermissionService\x12b\n" +
	"\x17AssignPermissionToGroup\x12\".pb.AssignPermissionToGroupRequest\x1a#.pb.AssignPermissionToGroupResponse\x12Y\n" +
	"\x14CheckGroupPermission\x12\x1f.pb.CheckGroupPermissionRequest\x1a .pb.CheckGroupPermissionResponse\x12Y\n" +
	"\x14ListGroupPermissions\x12\x1f.pb.ListGroupPermissionsRequest\x1a .pb.ListGroupPermissionsResponse\x12h\n" +
	"\x19RemovePermissionFromGroup\x12$.pb.RemovePermissionFromGroupRequest\x1a%.pb.RemovePermissionFromGroupResponse\x12n\n" +
	"\x1bGetUserEffectivePermissions\x12&.pb.GetUserEffectivePermissionsRequest\x1a'.pb.GetUserEffectivePermissionsResponseB2Z0github.com/Kisanlink/aaa-service/v2/pkg/proto;pbb\x06proto3"

var (
	file_permission_proto_rawDescOnce sync.Once
	file_permission_proto_rawDescData []byte
)

func file_permission_proto_rawDescGZIP() []byte {
	file_permission_proto_rawDescOnce.Do(func() {
		file_permission_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_permission_proto_rawDesc), len(file_permission_proto_rawDesc)))
	})
	return file_permission_proto_rawDescData
}

var file_permission_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_permission_proto_goTypes = []any{
	(*AssignPermissionToGroupRequest)(nil),      // 0: pb.AssignPermissionToGroupRequest
	(*AssignPermissionToGroupResponse)(nil),     // 1: pb.AssignPermissionToGroupResponse
	(*CheckGroupPermissionRequest)(nil),         // 2: pb.CheckGroupPermissionRequest
	(*CheckGroupPermissionResponse)(nil),        // 3: pb.CheckGroupPermissionResponse
	(*ListGroupPermissionsRequest)(nil),         // 4: pb.ListGroupPermissionsRequest
	(*PermissionItem)(nil),                      // 5: pb.PermissionItem
	(*ListGroupPermissionsResponse)(nil),        // 6: pb.ListGroupPermissionsResponse
	(*RemovePermissionFromGroupRequest)(nil),    // 7: pb.RemovePermissionFromGroupRequest
	(*RemovePermissionFromGroupResponse)(nil),   // 8: pb.RemovePermissionFromGroupResponse
	(*GetUserEffectivePermissionsRequest)(nil),  // 9: pb.GetUserEffectivePermissionsRequest
	(*GetUserEffectivePermissionsResponse)(nil), // 10: pb.GetUserEffectivePermissionsResponse
}
var file_permission_proto_depIdxs = []int32{
	5,  // 0: pb.ListGroupPermissionsResponse.permissions:type_name -> pb.PermissionItem
	5,  // 1: pb.GetUserEffectivePermissionsResponse.permissions:type_name -> pb.PermissionItem
	0,  // 2: pb.PermissionService.AssignPermissionToGroup:input_type -> pb.AssignPermissionToGroupRequest
	2,  // 3: pb.PermissionService.CheckGroupPermission:input_type -> pb.CheckGroupPermissionRequest
	4,  // 4: pb.PermissionService.ListGroupPermissions:input_type -> pb.ListGroupPermissionsRequest
	7,  // 5: pb.PermissionService.RemovePermissionFromGroup:input_type -> pb.RemovePermissionFromGroupRequest
	9,  // 6: pb.PermissionService.GetUserEffectivePermissions:input_type -> pb.GetUserEffectivePermissionsRequest
	1,  // 7: pb.PermissionService.AssignPermissionToGroup:output_type -> pb.AssignPermissionToGroupResponse
	3,  // 8: pb.PermissionService.CheckGroupPermission:output_type -> pb.CheckGroupPermissionResponse
	6,  // 9: pb.PermissionService.ListGroupPermissions:output_type -> pb.ListGroupPermissionsResponse
	8,  // 10: pb.PermissionService.RemovePermissionFromGroup:output_type -> pb.RemovePermissionFromGroupResponse
	10, // 11: pb.PermissionService.GetUserEffectivePermissions:output_type -> pb.GetUserEffectivePermissionsResponse
	7,  // [7:12] is the sub-list for method output_type
	2,  // [2:7] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_permission_proto_init() }
func file_permission_proto_init() {
	if File_permission_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_permission_proto_rawDesc), len(file_permission_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_permission_proto_goTypes,
		DependencyIndexes: file_permission_proto_depIdxs,
		MessageInfos:      file_permission_proto_msgTypes,
	}.Build()
	File_permission_proto = out.File
	file_permission_proto_goTypes = nil
	file_permission_proto_depIdxs = nil
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: contract.proto

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ContractService_ApplyContract_FullMethodName       = "/pb.ContractService/ApplyContract"
	ContractService_GetContract_FullMethodName         = "/pb.ContractService/GetContract"
	ContractService_ListContracts_FullMethodName       = "/pb.ContractService/ListContracts"
	ContractService_ValidateContract_FullMethodName    = "/pb.ContractService/ValidateContract"
	ContractService_RevertContract_FullMethodName      = "/pb.ContractService/RevertContract"
	ContractService_GetContractTemplate_FullMethodName = "/pb.ContractService/GetContractTemplate"
)

// ContractServiceClient is the client API for ContractService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Contract Service - manages service contracts
type ContractServiceClient interface {
	ApplyContract(ctx context.Context, in *ApplyContractRequest, opts ...grpc.CallOption) (*ApplyContractResponse, error)
	GetContract(ctx context.Context, in *GetContractRequest, opts ...grpc.CallOption) (*GetContractResponse, error)
	ListContracts(ctx context.Context, in *ListContractsRequest, opts ...grpc.CallOption) (*ListContractsResponse, error)
	ValidateContract(ctx context.Context, in *ValidateContractRequest, opts ...grpc.CallOption) (*ValidateContractResponse, error)
	RevertContract(ctx context.Context, in *RevertContractRequest, opts ...grpc.CallOption) (*RevertContractResponse, error)
	GetContractTemplate(ctx context.Context, in *GetContractTemplateRequest, opts ...grpc.CallOption) (*GetContractTemplateResponse, error)
}

type contractServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContractServiceClient(cc grpc.ClientConnInterface) ContractServiceClient {
	return &contractServiceClient{cc}
}

func (c *contractServiceClient) ApplyContract(ctx context.Context, in *ApplyContractRequest, opts ...grpc.CallOption) (*ApplyContractResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyContractResponse)
	err := c.cc.Invoke(ctx, ContractService_ApplyContract_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractServiceClient) GetContract(ctx context.Context, in *GetContractRequest, opts ...grpc.CallOption) (*GetContractResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContractResponse)
	err := c.cc.Invoke(ctx, ContractService_GetContract_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractServiceClient) ListContracts(ctx context.Context, in *ListContractsRequest, opts ...grpc.CallOption) (*ListContractsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListContractsResponse)
	err := c.cc.Invoke(ctx, ContractService_ListContracts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractServiceClient) ValidateContract(ctx context.Context, in *ValidateContractRequest, opts ...grpc.CallOption) (*ValidateContractResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateContractResponse)
	err := c.cc.Invoke(ctx, ContractService_ValidateContract_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractServiceClient) RevertContract(ctx context.Context, in *RevertContractRequest, opts ...grpc.CallOption) (*RevertContractResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevertContractResponse)
	err := c.cc.Invoke(ctx, ContractService_RevertContract_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractServiceClient) GetContractTemplate(ctx context.Context, in *GetContractTemplateRequest, opts ...grpc.CallOption) (*GetContractTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContractTemplateResponse)
	err := c.cc.Invoke(ctx, ContractService_GetContractTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContractServiceServer is the server API for ContractService service.
// All implementations must embed UnimplementedContractServiceServer
// for forward compatibility.
//
// Contract Service - manages service contracts
type ContractServiceServer interface {
	ApplyContract(context.Context, *ApplyContractRequest) (*ApplyContractResponse, error)
	GetContract(context.Context, *GetContractRequest) (*GetContractResponse, error)
	ListContracts(context.Context, *ListContractsRequest) (*ListContractsResponse, error)
	ValidateContract(context.Context, *ValidateContractRequest) (*ValidateContractResponse, error)
	RevertContract(context.Context, *RevertContractRequest) (*RevertContractResponse, error)
	GetContractTemplate(context.Context, *GetContractTemplateRequest) (*GetContractTemplateResponse, error)
	mustEmbedUnimplementedContractServiceServer()
}

// UnimplementedContractServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedContractServiceServer struct{}

func (UnimplementedContractServiceServer) ApplyContract(context.Context, *ApplyContractRequest) (*ApplyContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyContract not implemented")
}
func (UnimplementedContractServiceServer) GetContract(context.Context, *GetContractRequest) (*GetContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContract not implemented")
}
func (UnimplementedContractServiceServer) ListContracts(context.Context, *ListContractsRequest) (*ListContractsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContracts not implemented")
}
func (UnimplementedContractServiceServer) ValidateContract(context.Context, *ValidateContractRequest) (*ValidateContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateContract not implemented")
}
func (UnimplementedContractServiceServer) RevertContract(context.Context, *RevertContractRequest) (*RevertContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevertContract not implemented")
}
func (UnimplementedContractServiceServer) GetContractTemplate(context.Context, *GetContractTemplateRequest) (*GetContractTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractTemplate not implemented")
}
func (UnimplementedContractServiceServer) mustEmbedUnimplementedContractServiceServer() {}
func (UnimplementedContractServiceServer) testEmbeddedByValue()                         {}

// UnsafeContractServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContractServiceServer will
// result in compilation errors.
type UnsafeContractServiceServer interface {
	mustEmbedUnimplementedContractServiceServer()
}

func RegisterContractServiceServer(s grpc.ServiceRegistrar, srv ContractServiceServer) {
	// If the following call pancis, it indicates UnimplementedContractServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ContractService_ServiceDesc, srv)
}

func _ContractService_ApplyContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServiceServer).ApplyContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContractService_ApplyContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServiceServer).ApplyContract(ctx, req.(*ApplyContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContractService_GetContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServiceServer).GetContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContractService_GetContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServiceServer).GetContract(ctx, req.(*GetContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContractService_ListContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContractsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServiceServer).ListContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContractService_ListContracts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServiceServer).ListContracts(ctx, req.(*ListContractsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContractService_ValidateContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServiceServer).ValidateContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContractService_ValidateContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServiceServer).ValidateContract(ctx, req.(*ValidateContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContractService_RevertContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevertContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServiceServer).RevertContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContractService_RevertContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServiceServer).RevertContract(ctx, req.(*RevertContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContractService_GetContractTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServiceServer).GetContractTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContractService_GetContractTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServiceServer).GetContractTemplate(ctx, req.(*GetContractTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContractService_ServiceDesc is the grpc.ServiceDesc for ContractService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContractService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ContractService",
	HandlerType: (*ContractServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplyContract",
			Handler:    _ContractService_ApplyContract_Handler,
		},
		{
			MethodName: "GetContract",
			Handler:    _ContractService_GetContract_Handler,
		},
		{
			MethodName: "ListContracts",
			Handler:    _ContractService_ListContracts_Handler,
		},
		{
			MethodName: "ValidateContract",
			Handler:    _ContractService_ValidateContract_Handler,
		},
		{
			MethodName: "RevertContract",
			Handler:    _ContractService_RevertContract_Handler,
		},
		{
			MethodName: "GetContractTemplate",
			Handler:    _ContractService_GetContractTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contract.proto",
}

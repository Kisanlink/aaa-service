// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: pkg/proto/auth_v2.proto

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserServiceV2_Login_FullMethodName              = "/pb.UserServiceV2/Login"
	UserServiceV2_Register_FullMethodName           = "/pb.UserServiceV2/Register"
	UserServiceV2_GetUser_FullMethodName            = "/pb.UserServiceV2/GetUser"
	UserServiceV2_GetAllUsers_FullMethodName        = "/pb.UserServiceV2/GetAllUsers"
	UserServiceV2_UpdateUser_FullMethodName         = "/pb.UserServiceV2/UpdateUser"
	UserServiceV2_DeleteUser_FullMethodName         = "/pb.UserServiceV2/DeleteUser"
	UserServiceV2_RefreshToken_FullMethodName       = "/pb.UserServiceV2/RefreshToken"
	UserServiceV2_Logout_FullMethodName             = "/pb.UserServiceV2/Logout"
	UserServiceV2_GetUserByPhone_FullMethodName     = "/pb.UserServiceV2/GetUserByPhone"
	UserServiceV2_VerifyUserPassword_FullMethodName = "/pb.UserServiceV2/VerifyUserPassword"
)

// UserServiceV2Client is the client API for UserServiceV2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// V2 User Service
type UserServiceV2Client interface {
	Login(ctx context.Context, in *LoginRequestV2, opts ...grpc.CallOption) (*LoginResponseV2, error)
	Register(ctx context.Context, in *RegisterRequestV2, opts ...grpc.CallOption) (*RegisterResponseV2, error)
	GetUser(ctx context.Context, in *GetUserRequestV2, opts ...grpc.CallOption) (*GetUserResponseV2, error)
	GetAllUsers(ctx context.Context, in *GetAllUsersRequestV2, opts ...grpc.CallOption) (*GetAllUsersResponseV2, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequestV2, opts ...grpc.CallOption) (*UpdateUserResponseV2, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequestV2, opts ...grpc.CallOption) (*DeleteUserResponseV2, error)
	RefreshToken(ctx context.Context, in *RefreshTokenRequestV2, opts ...grpc.CallOption) (*RefreshTokenResponseV2, error)
	Logout(ctx context.Context, in *LogoutRequestV2, opts ...grpc.CallOption) (*LogoutResponseV2, error)
	GetUserByPhone(ctx context.Context, in *GetUserByPhoneRequestV2, opts ...grpc.CallOption) (*GetUserResponseV2, error)
	VerifyUserPassword(ctx context.Context, in *VerifyPasswordRequestV2, opts ...grpc.CallOption) (*VerifyPasswordResponseV2, error)
}

type userServiceV2Client struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceV2Client(cc grpc.ClientConnInterface) UserServiceV2Client {
	return &userServiceV2Client{cc}
}

func (c *userServiceV2Client) Login(ctx context.Context, in *LoginRequestV2, opts ...grpc.CallOption) (*LoginResponseV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponseV2)
	err := c.cc.Invoke(ctx, UserServiceV2_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceV2Client) Register(ctx context.Context, in *RegisterRequestV2, opts ...grpc.CallOption) (*RegisterResponseV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponseV2)
	err := c.cc.Invoke(ctx, UserServiceV2_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceV2Client) GetUser(ctx context.Context, in *GetUserRequestV2, opts ...grpc.CallOption) (*GetUserResponseV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponseV2)
	err := c.cc.Invoke(ctx, UserServiceV2_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceV2Client) GetAllUsers(ctx context.Context, in *GetAllUsersRequestV2, opts ...grpc.CallOption) (*GetAllUsersResponseV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllUsersResponseV2)
	err := c.cc.Invoke(ctx, UserServiceV2_GetAllUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceV2Client) UpdateUser(ctx context.Context, in *UpdateUserRequestV2, opts ...grpc.CallOption) (*UpdateUserResponseV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserResponseV2)
	err := c.cc.Invoke(ctx, UserServiceV2_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceV2Client) DeleteUser(ctx context.Context, in *DeleteUserRequestV2, opts ...grpc.CallOption) (*DeleteUserResponseV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserResponseV2)
	err := c.cc.Invoke(ctx, UserServiceV2_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceV2Client) RefreshToken(ctx context.Context, in *RefreshTokenRequestV2, opts ...grpc.CallOption) (*RefreshTokenResponseV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshTokenResponseV2)
	err := c.cc.Invoke(ctx, UserServiceV2_RefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceV2Client) Logout(ctx context.Context, in *LogoutRequestV2, opts ...grpc.CallOption) (*LogoutResponseV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogoutResponseV2)
	err := c.cc.Invoke(ctx, UserServiceV2_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceV2Client) GetUserByPhone(ctx context.Context, in *GetUserByPhoneRequestV2, opts ...grpc.CallOption) (*GetUserResponseV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponseV2)
	err := c.cc.Invoke(ctx, UserServiceV2_GetUserByPhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceV2Client) VerifyUserPassword(ctx context.Context, in *VerifyPasswordRequestV2, opts ...grpc.CallOption) (*VerifyPasswordResponseV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyPasswordResponseV2)
	err := c.cc.Invoke(ctx, UserServiceV2_VerifyUserPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceV2Server is the server API for UserServiceV2 service.
// All implementations must embed UnimplementedUserServiceV2Server
// for forward compatibility.
//
// V2 User Service
type UserServiceV2Server interface {
	Login(context.Context, *LoginRequestV2) (*LoginResponseV2, error)
	Register(context.Context, *RegisterRequestV2) (*RegisterResponseV2, error)
	GetUser(context.Context, *GetUserRequestV2) (*GetUserResponseV2, error)
	GetAllUsers(context.Context, *GetAllUsersRequestV2) (*GetAllUsersResponseV2, error)
	UpdateUser(context.Context, *UpdateUserRequestV2) (*UpdateUserResponseV2, error)
	DeleteUser(context.Context, *DeleteUserRequestV2) (*DeleteUserResponseV2, error)
	RefreshToken(context.Context, *RefreshTokenRequestV2) (*RefreshTokenResponseV2, error)
	Logout(context.Context, *LogoutRequestV2) (*LogoutResponseV2, error)
	GetUserByPhone(context.Context, *GetUserByPhoneRequestV2) (*GetUserResponseV2, error)
	VerifyUserPassword(context.Context, *VerifyPasswordRequestV2) (*VerifyPasswordResponseV2, error)
	mustEmbedUnimplementedUserServiceV2Server()
}

// UnimplementedUserServiceV2Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceV2Server struct{}

func (UnimplementedUserServiceV2Server) Login(context.Context, *LoginRequestV2) (*LoginResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServiceV2Server) Register(context.Context, *RegisterRequestV2) (*RegisterResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserServiceV2Server) GetUser(context.Context, *GetUserRequestV2) (*GetUserResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServiceV2Server) GetAllUsers(context.Context, *GetAllUsersRequestV2) (*GetAllUsersResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUsers not implemented")
}
func (UnimplementedUserServiceV2Server) UpdateUser(context.Context, *UpdateUserRequestV2) (*UpdateUserResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserServiceV2Server) DeleteUser(context.Context, *DeleteUserRequestV2) (*DeleteUserResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServiceV2Server) RefreshToken(context.Context, *RefreshTokenRequestV2) (*RefreshTokenResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedUserServiceV2Server) Logout(context.Context, *LogoutRequestV2) (*LogoutResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedUserServiceV2Server) GetUserByPhone(context.Context, *GetUserByPhoneRequestV2) (*GetUserResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByPhone not implemented")
}
func (UnimplementedUserServiceV2Server) VerifyUserPassword(context.Context, *VerifyPasswordRequestV2) (*VerifyPasswordResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyUserPassword not implemented")
}
func (UnimplementedUserServiceV2Server) mustEmbedUnimplementedUserServiceV2Server() {}
func (UnimplementedUserServiceV2Server) testEmbeddedByValue()                       {}

// UnsafeUserServiceV2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceV2Server will
// result in compilation errors.
type UnsafeUserServiceV2Server interface {
	mustEmbedUnimplementedUserServiceV2Server()
}

func RegisterUserServiceV2Server(s grpc.ServiceRegistrar, srv UserServiceV2Server) {
	// If the following call pancis, it indicates UnimplementedUserServiceV2Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserServiceV2_ServiceDesc, srv)
}

func _UserServiceV2_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceV2Server).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServiceV2_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceV2Server).Login(ctx, req.(*LoginRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServiceV2_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceV2Server).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServiceV2_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceV2Server).Register(ctx, req.(*RegisterRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServiceV2_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceV2Server).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServiceV2_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceV2Server).GetUser(ctx, req.(*GetUserRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServiceV2_GetAllUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUsersRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceV2Server).GetAllUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServiceV2_GetAllUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceV2Server).GetAllUsers(ctx, req.(*GetAllUsersRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServiceV2_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceV2Server).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServiceV2_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceV2Server).UpdateUser(ctx, req.(*UpdateUserRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServiceV2_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceV2Server).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServiceV2_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceV2Server).DeleteUser(ctx, req.(*DeleteUserRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServiceV2_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceV2Server).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServiceV2_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceV2Server).RefreshToken(ctx, req.(*RefreshTokenRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServiceV2_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceV2Server).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServiceV2_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceV2Server).Logout(ctx, req.(*LogoutRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServiceV2_GetUserByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByPhoneRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceV2Server).GetUserByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServiceV2_GetUserByPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceV2Server).GetUserByPhone(ctx, req.(*GetUserByPhoneRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServiceV2_VerifyUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPasswordRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceV2Server).VerifyUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServiceV2_VerifyUserPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceV2Server).VerifyUserPassword(ctx, req.(*VerifyPasswordRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

// UserServiceV2_ServiceDesc is the grpc.ServiceDesc for UserServiceV2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserServiceV2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UserServiceV2",
	HandlerType: (*UserServiceV2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _UserServiceV2_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _UserServiceV2_Register_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserServiceV2_GetUser_Handler,
		},
		{
			MethodName: "GetAllUsers",
			Handler:    _UserServiceV2_GetAllUsers_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserServiceV2_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserServiceV2_DeleteUser_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _UserServiceV2_RefreshToken_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _UserServiceV2_Logout_Handler,
		},
		{
			MethodName: "GetUserByPhone",
			Handler:    _UserServiceV2_GetUserByPhone_Handler,
		},
		{
			MethodName: "VerifyUserPassword",
			Handler:    _UserServiceV2_VerifyUserPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/auth_v2.proto",
}

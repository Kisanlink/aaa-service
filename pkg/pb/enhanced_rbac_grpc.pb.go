// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: pkg/proto/enhanced_rbac.proto

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EnhancedRBACService_CreateAction_FullMethodName           = "/enhanced_rbac.EnhancedRBACService/CreateAction"
	EnhancedRBACService_GetAction_FullMethodName              = "/enhanced_rbac.EnhancedRBACService/GetAction"
	EnhancedRBACService_GetAllActions_FullMethodName          = "/enhanced_rbac.EnhancedRBACService/GetAllActions"
	EnhancedRBACService_UpdateAction_FullMethodName           = "/enhanced_rbac.EnhancedRBACService/UpdateAction"
	EnhancedRBACService_DeleteAction_FullMethodName           = "/enhanced_rbac.EnhancedRBACService/DeleteAction"
	EnhancedRBACService_CreateResource_FullMethodName         = "/enhanced_rbac.EnhancedRBACService/CreateResource"
	EnhancedRBACService_GetResource_FullMethodName            = "/enhanced_rbac.EnhancedRBACService/GetResource"
	EnhancedRBACService_GetAllResources_FullMethodName        = "/enhanced_rbac.EnhancedRBACService/GetAllResources"
	EnhancedRBACService_UpdateResource_FullMethodName         = "/enhanced_rbac.EnhancedRBACService/UpdateResource"
	EnhancedRBACService_DeleteResource_FullMethodName         = "/enhanced_rbac.EnhancedRBACService/DeleteResource"
	EnhancedRBACService_CreatePermission_FullMethodName       = "/enhanced_rbac.EnhancedRBACService/CreatePermission"
	EnhancedRBACService_GetPermission_FullMethodName          = "/enhanced_rbac.EnhancedRBACService/GetPermission"
	EnhancedRBACService_GetAllPermissions_FullMethodName      = "/enhanced_rbac.EnhancedRBACService/GetAllPermissions"
	EnhancedRBACService_UpdatePermission_FullMethodName       = "/enhanced_rbac.EnhancedRBACService/UpdatePermission"
	EnhancedRBACService_DeletePermission_FullMethodName       = "/enhanced_rbac.EnhancedRBACService/DeletePermission"
	EnhancedRBACService_CreateRole_FullMethodName             = "/enhanced_rbac.EnhancedRBACService/CreateRole"
	EnhancedRBACService_GetRole_FullMethodName                = "/enhanced_rbac.EnhancedRBACService/GetRole"
	EnhancedRBACService_GetAllRoles_FullMethodName            = "/enhanced_rbac.EnhancedRBACService/GetAllRoles"
	EnhancedRBACService_UpdateRole_FullMethodName             = "/enhanced_rbac.EnhancedRBACService/UpdateRole"
	EnhancedRBACService_DeleteRole_FullMethodName             = "/enhanced_rbac.EnhancedRBACService/DeleteRole"
	EnhancedRBACService_AssignRoleToUser_FullMethodName       = "/enhanced_rbac.EnhancedRBACService/AssignRoleToUser"
	EnhancedRBACService_RemoveRoleFromUser_FullMethodName     = "/enhanced_rbac.EnhancedRBACService/RemoveRoleFromUser"
	EnhancedRBACService_GetUserRoles_FullMethodName           = "/enhanced_rbac.EnhancedRBACService/GetUserRoles"
	EnhancedRBACService_GetRoleUsers_FullMethodName           = "/enhanced_rbac.EnhancedRBACService/GetRoleUsers"
	EnhancedRBACService_EvaluatePermission_FullMethodName     = "/enhanced_rbac.EnhancedRBACService/EvaluatePermission"
	EnhancedRBACService_BulkEvaluatePermission_FullMethodName = "/enhanced_rbac.EnhancedRBACService/BulkEvaluatePermission"
	EnhancedRBACService_GetUserPermissions_FullMethodName     = "/enhanced_rbac.EnhancedRBACService/GetUserPermissions"
	EnhancedRBACService_GetRolePermissions_FullMethodName     = "/enhanced_rbac.EnhancedRBACService/GetRolePermissions"
	EnhancedRBACService_ValidatePermission_FullMethodName     = "/enhanced_rbac.EnhancedRBACService/ValidatePermission"
)

// EnhancedRBACServiceClient is the client API for EnhancedRBACService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Enhanced RBAC Service using existing models
type EnhancedRBACServiceClient interface {
	// Action Management
	CreateAction(ctx context.Context, in *CreateActionRequest, opts ...grpc.CallOption) (*CreateActionResponse, error)
	GetAction(ctx context.Context, in *GetActionRequest, opts ...grpc.CallOption) (*Action, error)
	GetAllActions(ctx context.Context, in *GetAllActionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Action], error)
	UpdateAction(ctx context.Context, in *UpdateActionRequest, opts ...grpc.CallOption) (*Action, error)
	DeleteAction(ctx context.Context, in *DeleteActionRequest, opts ...grpc.CallOption) (*DeleteActionResponse, error)
	// Resource Management
	CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*CreateResourceResponse, error)
	GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*Resource, error)
	GetAllResources(ctx context.Context, in *GetAllResourcesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Resource], error)
	UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*Resource, error)
	DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*DeleteResourceResponse, error)
	// Permission Management
	CreatePermission(ctx context.Context, in *CreatePermissionRequest, opts ...grpc.CallOption) (*CreatePermissionResponse, error)
	GetPermission(ctx context.Context, in *GetPermissionRequest, opts ...grpc.CallOption) (*Permission, error)
	GetAllPermissions(ctx context.Context, in *GetAllPermissionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Permission], error)
	UpdatePermission(ctx context.Context, in *UpdatePermissionRequest, opts ...grpc.CallOption) (*Permission, error)
	DeletePermission(ctx context.Context, in *DeletePermissionRequest, opts ...grpc.CallOption) (*DeletePermissionResponse, error)
	// Role Management
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error)
	GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*Role, error)
	GetAllRoles(ctx context.Context, in *GetAllRolesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Role], error)
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*Role, error)
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error)
	// User-Role Management
	AssignRoleToUser(ctx context.Context, in *AssignRoleToUserRequest, opts ...grpc.CallOption) (*AssignRoleToUserResponse, error)
	RemoveRoleFromUser(ctx context.Context, in *RemoveRoleFromUserRequest, opts ...grpc.CallOption) (*RemoveRoleFromUserResponse, error)
	GetUserRoles(ctx context.Context, in *GetUserRolesRequest, opts ...grpc.CallOption) (*GetUserRolesResponse, error)
	GetRoleUsers(ctx context.Context, in *GetRoleUsersRequest, opts ...grpc.CallOption) (*GetRoleUsersResponse, error)
	// Permission Evaluation
	EvaluatePermission(ctx context.Context, in *EvaluatePermissionRequest, opts ...grpc.CallOption) (*EvaluatePermissionResponse, error)
	BulkEvaluatePermission(ctx context.Context, in *BulkEvaluatePermissionRequest, opts ...grpc.CallOption) (*BulkEvaluatePermissionResponse, error)
	// Utility Methods
	GetUserPermissions(ctx context.Context, in *GetUserPermissionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Permission], error)
	GetRolePermissions(ctx context.Context, in *GetRolePermissionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Permission], error)
	ValidatePermission(ctx context.Context, in *ValidatePermissionRequest, opts ...grpc.CallOption) (*ValidatePermissionResponse, error)
}

type enhancedRBACServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnhancedRBACServiceClient(cc grpc.ClientConnInterface) EnhancedRBACServiceClient {
	return &enhancedRBACServiceClient{cc}
}

func (c *enhancedRBACServiceClient) CreateAction(ctx context.Context, in *CreateActionRequest, opts ...grpc.CallOption) (*CreateActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateActionResponse)
	err := c.cc.Invoke(ctx, EnhancedRBACService_CreateAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enhancedRBACServiceClient) GetAction(ctx context.Context, in *GetActionRequest, opts ...grpc.CallOption) (*Action, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Action)
	err := c.cc.Invoke(ctx, EnhancedRBACService_GetAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enhancedRBACServiceClient) GetAllActions(ctx context.Context, in *GetAllActionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Action], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EnhancedRBACService_ServiceDesc.Streams[0], EnhancedRBACService_GetAllActions_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetAllActionsRequest, Action]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EnhancedRBACService_GetAllActionsClient = grpc.ServerStreamingClient[Action]

func (c *enhancedRBACServiceClient) UpdateAction(ctx context.Context, in *UpdateActionRequest, opts ...grpc.CallOption) (*Action, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Action)
	err := c.cc.Invoke(ctx, EnhancedRBACService_UpdateAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enhancedRBACServiceClient) DeleteAction(ctx context.Context, in *DeleteActionRequest, opts ...grpc.CallOption) (*DeleteActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteActionResponse)
	err := c.cc.Invoke(ctx, EnhancedRBACService_DeleteAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enhancedRBACServiceClient) CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*CreateResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResourceResponse)
	err := c.cc.Invoke(ctx, EnhancedRBACService_CreateResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enhancedRBACServiceClient) GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*Resource, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Resource)
	err := c.cc.Invoke(ctx, EnhancedRBACService_GetResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enhancedRBACServiceClient) GetAllResources(ctx context.Context, in *GetAllResourcesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Resource], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EnhancedRBACService_ServiceDesc.Streams[1], EnhancedRBACService_GetAllResources_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetAllResourcesRequest, Resource]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EnhancedRBACService_GetAllResourcesClient = grpc.ServerStreamingClient[Resource]

func (c *enhancedRBACServiceClient) UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*Resource, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Resource)
	err := c.cc.Invoke(ctx, EnhancedRBACService_UpdateResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enhancedRBACServiceClient) DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*DeleteResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResourceResponse)
	err := c.cc.Invoke(ctx, EnhancedRBACService_DeleteResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enhancedRBACServiceClient) CreatePermission(ctx context.Context, in *CreatePermissionRequest, opts ...grpc.CallOption) (*CreatePermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePermissionResponse)
	err := c.cc.Invoke(ctx, EnhancedRBACService_CreatePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enhancedRBACServiceClient) GetPermission(ctx context.Context, in *GetPermissionRequest, opts ...grpc.CallOption) (*Permission, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Permission)
	err := c.cc.Invoke(ctx, EnhancedRBACService_GetPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enhancedRBACServiceClient) GetAllPermissions(ctx context.Context, in *GetAllPermissionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Permission], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EnhancedRBACService_ServiceDesc.Streams[2], EnhancedRBACService_GetAllPermissions_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetAllPermissionsRequest, Permission]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EnhancedRBACService_GetAllPermissionsClient = grpc.ServerStreamingClient[Permission]

func (c *enhancedRBACServiceClient) UpdatePermission(ctx context.Context, in *UpdatePermissionRequest, opts ...grpc.CallOption) (*Permission, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Permission)
	err := c.cc.Invoke(ctx, EnhancedRBACService_UpdatePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enhancedRBACServiceClient) DeletePermission(ctx context.Context, in *DeletePermissionRequest, opts ...grpc.CallOption) (*DeletePermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePermissionResponse)
	err := c.cc.Invoke(ctx, EnhancedRBACService_DeletePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enhancedRBACServiceClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRoleResponse)
	err := c.cc.Invoke(ctx, EnhancedRBACService_CreateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enhancedRBACServiceClient) GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*Role, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Role)
	err := c.cc.Invoke(ctx, EnhancedRBACService_GetRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enhancedRBACServiceClient) GetAllRoles(ctx context.Context, in *GetAllRolesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Role], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EnhancedRBACService_ServiceDesc.Streams[3], EnhancedRBACService_GetAllRoles_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetAllRolesRequest, Role]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EnhancedRBACService_GetAllRolesClient = grpc.ServerStreamingClient[Role]

func (c *enhancedRBACServiceClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*Role, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Role)
	err := c.cc.Invoke(ctx, EnhancedRBACService_UpdateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enhancedRBACServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRoleResponse)
	err := c.cc.Invoke(ctx, EnhancedRBACService_DeleteRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enhancedRBACServiceClient) AssignRoleToUser(ctx context.Context, in *AssignRoleToUserRequest, opts ...grpc.CallOption) (*AssignRoleToUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignRoleToUserResponse)
	err := c.cc.Invoke(ctx, EnhancedRBACService_AssignRoleToUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enhancedRBACServiceClient) RemoveRoleFromUser(ctx context.Context, in *RemoveRoleFromUserRequest, opts ...grpc.CallOption) (*RemoveRoleFromUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveRoleFromUserResponse)
	err := c.cc.Invoke(ctx, EnhancedRBACService_RemoveRoleFromUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enhancedRBACServiceClient) GetUserRoles(ctx context.Context, in *GetUserRolesRequest, opts ...grpc.CallOption) (*GetUserRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserRolesResponse)
	err := c.cc.Invoke(ctx, EnhancedRBACService_GetUserRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enhancedRBACServiceClient) GetRoleUsers(ctx context.Context, in *GetRoleUsersRequest, opts ...grpc.CallOption) (*GetRoleUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRoleUsersResponse)
	err := c.cc.Invoke(ctx, EnhancedRBACService_GetRoleUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enhancedRBACServiceClient) EvaluatePermission(ctx context.Context, in *EvaluatePermissionRequest, opts ...grpc.CallOption) (*EvaluatePermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EvaluatePermissionResponse)
	err := c.cc.Invoke(ctx, EnhancedRBACService_EvaluatePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enhancedRBACServiceClient) BulkEvaluatePermission(ctx context.Context, in *BulkEvaluatePermissionRequest, opts ...grpc.CallOption) (*BulkEvaluatePermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkEvaluatePermissionResponse)
	err := c.cc.Invoke(ctx, EnhancedRBACService_BulkEvaluatePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enhancedRBACServiceClient) GetUserPermissions(ctx context.Context, in *GetUserPermissionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Permission], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EnhancedRBACService_ServiceDesc.Streams[4], EnhancedRBACService_GetUserPermissions_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetUserPermissionsRequest, Permission]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EnhancedRBACService_GetUserPermissionsClient = grpc.ServerStreamingClient[Permission]

func (c *enhancedRBACServiceClient) GetRolePermissions(ctx context.Context, in *GetRolePermissionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Permission], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EnhancedRBACService_ServiceDesc.Streams[5], EnhancedRBACService_GetRolePermissions_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetRolePermissionsRequest, Permission]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EnhancedRBACService_GetRolePermissionsClient = grpc.ServerStreamingClient[Permission]

func (c *enhancedRBACServiceClient) ValidatePermission(ctx context.Context, in *ValidatePermissionRequest, opts ...grpc.CallOption) (*ValidatePermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidatePermissionResponse)
	err := c.cc.Invoke(ctx, EnhancedRBACService_ValidatePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnhancedRBACServiceServer is the server API for EnhancedRBACService service.
// All implementations must embed UnimplementedEnhancedRBACServiceServer
// for forward compatibility.
//
// Enhanced RBAC Service using existing models
type EnhancedRBACServiceServer interface {
	// Action Management
	CreateAction(context.Context, *CreateActionRequest) (*CreateActionResponse, error)
	GetAction(context.Context, *GetActionRequest) (*Action, error)
	GetAllActions(*GetAllActionsRequest, grpc.ServerStreamingServer[Action]) error
	UpdateAction(context.Context, *UpdateActionRequest) (*Action, error)
	DeleteAction(context.Context, *DeleteActionRequest) (*DeleteActionResponse, error)
	// Resource Management
	CreateResource(context.Context, *CreateResourceRequest) (*CreateResourceResponse, error)
	GetResource(context.Context, *GetResourceRequest) (*Resource, error)
	GetAllResources(*GetAllResourcesRequest, grpc.ServerStreamingServer[Resource]) error
	UpdateResource(context.Context, *UpdateResourceRequest) (*Resource, error)
	DeleteResource(context.Context, *DeleteResourceRequest) (*DeleteResourceResponse, error)
	// Permission Management
	CreatePermission(context.Context, *CreatePermissionRequest) (*CreatePermissionResponse, error)
	GetPermission(context.Context, *GetPermissionRequest) (*Permission, error)
	GetAllPermissions(*GetAllPermissionsRequest, grpc.ServerStreamingServer[Permission]) error
	UpdatePermission(context.Context, *UpdatePermissionRequest) (*Permission, error)
	DeletePermission(context.Context, *DeletePermissionRequest) (*DeletePermissionResponse, error)
	// Role Management
	CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error)
	GetRole(context.Context, *GetRoleRequest) (*Role, error)
	GetAllRoles(*GetAllRolesRequest, grpc.ServerStreamingServer[Role]) error
	UpdateRole(context.Context, *UpdateRoleRequest) (*Role, error)
	DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error)
	// User-Role Management
	AssignRoleToUser(context.Context, *AssignRoleToUserRequest) (*AssignRoleToUserResponse, error)
	RemoveRoleFromUser(context.Context, *RemoveRoleFromUserRequest) (*RemoveRoleFromUserResponse, error)
	GetUserRoles(context.Context, *GetUserRolesRequest) (*GetUserRolesResponse, error)
	GetRoleUsers(context.Context, *GetRoleUsersRequest) (*GetRoleUsersResponse, error)
	// Permission Evaluation
	EvaluatePermission(context.Context, *EvaluatePermissionRequest) (*EvaluatePermissionResponse, error)
	BulkEvaluatePermission(context.Context, *BulkEvaluatePermissionRequest) (*BulkEvaluatePermissionResponse, error)
	// Utility Methods
	GetUserPermissions(*GetUserPermissionsRequest, grpc.ServerStreamingServer[Permission]) error
	GetRolePermissions(*GetRolePermissionsRequest, grpc.ServerStreamingServer[Permission]) error
	ValidatePermission(context.Context, *ValidatePermissionRequest) (*ValidatePermissionResponse, error)
	mustEmbedUnimplementedEnhancedRBACServiceServer()
}

// UnimplementedEnhancedRBACServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEnhancedRBACServiceServer struct{}

func (UnimplementedEnhancedRBACServiceServer) CreateAction(context.Context, *CreateActionRequest) (*CreateActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAction not implemented")
}
func (UnimplementedEnhancedRBACServiceServer) GetAction(context.Context, *GetActionRequest) (*Action, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAction not implemented")
}
func (UnimplementedEnhancedRBACServiceServer) GetAllActions(*GetAllActionsRequest, grpc.ServerStreamingServer[Action]) error {
	return status.Errorf(codes.Unimplemented, "method GetAllActions not implemented")
}
func (UnimplementedEnhancedRBACServiceServer) UpdateAction(context.Context, *UpdateActionRequest) (*Action, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAction not implemented")
}
func (UnimplementedEnhancedRBACServiceServer) DeleteAction(context.Context, *DeleteActionRequest) (*DeleteActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAction not implemented")
}
func (UnimplementedEnhancedRBACServiceServer) CreateResource(context.Context, *CreateResourceRequest) (*CreateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResource not implemented")
}
func (UnimplementedEnhancedRBACServiceServer) GetResource(context.Context, *GetResourceRequest) (*Resource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResource not implemented")
}
func (UnimplementedEnhancedRBACServiceServer) GetAllResources(*GetAllResourcesRequest, grpc.ServerStreamingServer[Resource]) error {
	return status.Errorf(codes.Unimplemented, "method GetAllResources not implemented")
}
func (UnimplementedEnhancedRBACServiceServer) UpdateResource(context.Context, *UpdateResourceRequest) (*Resource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResource not implemented")
}
func (UnimplementedEnhancedRBACServiceServer) DeleteResource(context.Context, *DeleteResourceRequest) (*DeleteResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResource not implemented")
}
func (UnimplementedEnhancedRBACServiceServer) CreatePermission(context.Context, *CreatePermissionRequest) (*CreatePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePermission not implemented")
}
func (UnimplementedEnhancedRBACServiceServer) GetPermission(context.Context, *GetPermissionRequest) (*Permission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermission not implemented")
}
func (UnimplementedEnhancedRBACServiceServer) GetAllPermissions(*GetAllPermissionsRequest, grpc.ServerStreamingServer[Permission]) error {
	return status.Errorf(codes.Unimplemented, "method GetAllPermissions not implemented")
}
func (UnimplementedEnhancedRBACServiceServer) UpdatePermission(context.Context, *UpdatePermissionRequest) (*Permission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePermission not implemented")
}
func (UnimplementedEnhancedRBACServiceServer) DeletePermission(context.Context, *DeletePermissionRequest) (*DeletePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermission not implemented")
}
func (UnimplementedEnhancedRBACServiceServer) CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedEnhancedRBACServiceServer) GetRole(context.Context, *GetRoleRequest) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedEnhancedRBACServiceServer) GetAllRoles(*GetAllRolesRequest, grpc.ServerStreamingServer[Role]) error {
	return status.Errorf(codes.Unimplemented, "method GetAllRoles not implemented")
}
func (UnimplementedEnhancedRBACServiceServer) UpdateRole(context.Context, *UpdateRoleRequest) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedEnhancedRBACServiceServer) DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedEnhancedRBACServiceServer) AssignRoleToUser(context.Context, *AssignRoleToUserRequest) (*AssignRoleToUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignRoleToUser not implemented")
}
func (UnimplementedEnhancedRBACServiceServer) RemoveRoleFromUser(context.Context, *RemoveRoleFromUserRequest) (*RemoveRoleFromUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRoleFromUser not implemented")
}
func (UnimplementedEnhancedRBACServiceServer) GetUserRoles(context.Context, *GetUserRolesRequest) (*GetUserRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRoles not implemented")
}
func (UnimplementedEnhancedRBACServiceServer) GetRoleUsers(context.Context, *GetRoleUsersRequest) (*GetRoleUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleUsers not implemented")
}
func (UnimplementedEnhancedRBACServiceServer) EvaluatePermission(context.Context, *EvaluatePermissionRequest) (*EvaluatePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvaluatePermission not implemented")
}
func (UnimplementedEnhancedRBACServiceServer) BulkEvaluatePermission(context.Context, *BulkEvaluatePermissionRequest) (*BulkEvaluatePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkEvaluatePermission not implemented")
}
func (UnimplementedEnhancedRBACServiceServer) GetUserPermissions(*GetUserPermissionsRequest, grpc.ServerStreamingServer[Permission]) error {
	return status.Errorf(codes.Unimplemented, "method GetUserPermissions not implemented")
}
func (UnimplementedEnhancedRBACServiceServer) GetRolePermissions(*GetRolePermissionsRequest, grpc.ServerStreamingServer[Permission]) error {
	return status.Errorf(codes.Unimplemented, "method GetRolePermissions not implemented")
}
func (UnimplementedEnhancedRBACServiceServer) ValidatePermission(context.Context, *ValidatePermissionRequest) (*ValidatePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatePermission not implemented")
}
func (UnimplementedEnhancedRBACServiceServer) mustEmbedUnimplementedEnhancedRBACServiceServer() {}
func (UnimplementedEnhancedRBACServiceServer) testEmbeddedByValue()                             {}

// UnsafeEnhancedRBACServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnhancedRBACServiceServer will
// result in compilation errors.
type UnsafeEnhancedRBACServiceServer interface {
	mustEmbedUnimplementedEnhancedRBACServiceServer()
}

func RegisterEnhancedRBACServiceServer(s grpc.ServiceRegistrar, srv EnhancedRBACServiceServer) {
	// If the following call pancis, it indicates UnimplementedEnhancedRBACServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EnhancedRBACService_ServiceDesc, srv)
}

func _EnhancedRBACService_CreateAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnhancedRBACServiceServer).CreateAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnhancedRBACService_CreateAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnhancedRBACServiceServer).CreateAction(ctx, req.(*CreateActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnhancedRBACService_GetAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnhancedRBACServiceServer).GetAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnhancedRBACService_GetAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnhancedRBACServiceServer).GetAction(ctx, req.(*GetActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnhancedRBACService_GetAllActions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllActionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnhancedRBACServiceServer).GetAllActions(m, &grpc.GenericServerStream[GetAllActionsRequest, Action]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EnhancedRBACService_GetAllActionsServer = grpc.ServerStreamingServer[Action]

func _EnhancedRBACService_UpdateAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnhancedRBACServiceServer).UpdateAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnhancedRBACService_UpdateAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnhancedRBACServiceServer).UpdateAction(ctx, req.(*UpdateActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnhancedRBACService_DeleteAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnhancedRBACServiceServer).DeleteAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnhancedRBACService_DeleteAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnhancedRBACServiceServer).DeleteAction(ctx, req.(*DeleteActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnhancedRBACService_CreateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnhancedRBACServiceServer).CreateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnhancedRBACService_CreateResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnhancedRBACServiceServer).CreateResource(ctx, req.(*CreateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnhancedRBACService_GetResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnhancedRBACServiceServer).GetResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnhancedRBACService_GetResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnhancedRBACServiceServer).GetResource(ctx, req.(*GetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnhancedRBACService_GetAllResources_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllResourcesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnhancedRBACServiceServer).GetAllResources(m, &grpc.GenericServerStream[GetAllResourcesRequest, Resource]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EnhancedRBACService_GetAllResourcesServer = grpc.ServerStreamingServer[Resource]

func _EnhancedRBACService_UpdateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnhancedRBACServiceServer).UpdateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnhancedRBACService_UpdateResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnhancedRBACServiceServer).UpdateResource(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnhancedRBACService_DeleteResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnhancedRBACServiceServer).DeleteResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnhancedRBACService_DeleteResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnhancedRBACServiceServer).DeleteResource(ctx, req.(*DeleteResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnhancedRBACService_CreatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnhancedRBACServiceServer).CreatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnhancedRBACService_CreatePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnhancedRBACServiceServer).CreatePermission(ctx, req.(*CreatePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnhancedRBACService_GetPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnhancedRBACServiceServer).GetPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnhancedRBACService_GetPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnhancedRBACServiceServer).GetPermission(ctx, req.(*GetPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnhancedRBACService_GetAllPermissions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllPermissionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnhancedRBACServiceServer).GetAllPermissions(m, &grpc.GenericServerStream[GetAllPermissionsRequest, Permission]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EnhancedRBACService_GetAllPermissionsServer = grpc.ServerStreamingServer[Permission]

func _EnhancedRBACService_UpdatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnhancedRBACServiceServer).UpdatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnhancedRBACService_UpdatePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnhancedRBACServiceServer).UpdatePermission(ctx, req.(*UpdatePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnhancedRBACService_DeletePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnhancedRBACServiceServer).DeletePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnhancedRBACService_DeletePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnhancedRBACServiceServer).DeletePermission(ctx, req.(*DeletePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnhancedRBACService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnhancedRBACServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnhancedRBACService_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnhancedRBACServiceServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnhancedRBACService_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnhancedRBACServiceServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnhancedRBACService_GetRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnhancedRBACServiceServer).GetRole(ctx, req.(*GetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnhancedRBACService_GetAllRoles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllRolesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnhancedRBACServiceServer).GetAllRoles(m, &grpc.GenericServerStream[GetAllRolesRequest, Role]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EnhancedRBACService_GetAllRolesServer = grpc.ServerStreamingServer[Role]

func _EnhancedRBACService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnhancedRBACServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnhancedRBACService_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnhancedRBACServiceServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnhancedRBACService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnhancedRBACServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnhancedRBACService_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnhancedRBACServiceServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnhancedRBACService_AssignRoleToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignRoleToUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnhancedRBACServiceServer).AssignRoleToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnhancedRBACService_AssignRoleToUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnhancedRBACServiceServer).AssignRoleToUser(ctx, req.(*AssignRoleToUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnhancedRBACService_RemoveRoleFromUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoleFromUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnhancedRBACServiceServer).RemoveRoleFromUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnhancedRBACService_RemoveRoleFromUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnhancedRBACServiceServer).RemoveRoleFromUser(ctx, req.(*RemoveRoleFromUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnhancedRBACService_GetUserRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnhancedRBACServiceServer).GetUserRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnhancedRBACService_GetUserRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnhancedRBACServiceServer).GetUserRoles(ctx, req.(*GetUserRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnhancedRBACService_GetRoleUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnhancedRBACServiceServer).GetRoleUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnhancedRBACService_GetRoleUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnhancedRBACServiceServer).GetRoleUsers(ctx, req.(*GetRoleUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnhancedRBACService_EvaluatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluatePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnhancedRBACServiceServer).EvaluatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnhancedRBACService_EvaluatePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnhancedRBACServiceServer).EvaluatePermission(ctx, req.(*EvaluatePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnhancedRBACService_BulkEvaluatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkEvaluatePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnhancedRBACServiceServer).BulkEvaluatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnhancedRBACService_BulkEvaluatePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnhancedRBACServiceServer).BulkEvaluatePermission(ctx, req.(*BulkEvaluatePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnhancedRBACService_GetUserPermissions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetUserPermissionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnhancedRBACServiceServer).GetUserPermissions(m, &grpc.GenericServerStream[GetUserPermissionsRequest, Permission]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EnhancedRBACService_GetUserPermissionsServer = grpc.ServerStreamingServer[Permission]

func _EnhancedRBACService_GetRolePermissions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRolePermissionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnhancedRBACServiceServer).GetRolePermissions(m, &grpc.GenericServerStream[GetRolePermissionsRequest, Permission]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EnhancedRBACService_GetRolePermissionsServer = grpc.ServerStreamingServer[Permission]

func _EnhancedRBACService_ValidatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidatePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnhancedRBACServiceServer).ValidatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnhancedRBACService_ValidatePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnhancedRBACServiceServer).ValidatePermission(ctx, req.(*ValidatePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnhancedRBACService_ServiceDesc is the grpc.ServiceDesc for EnhancedRBACService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnhancedRBACService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "enhanced_rbac.EnhancedRBACService",
	HandlerType: (*EnhancedRBACServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAction",
			Handler:    _EnhancedRBACService_CreateAction_Handler,
		},
		{
			MethodName: "GetAction",
			Handler:    _EnhancedRBACService_GetAction_Handler,
		},
		{
			MethodName: "UpdateAction",
			Handler:    _EnhancedRBACService_UpdateAction_Handler,
		},
		{
			MethodName: "DeleteAction",
			Handler:    _EnhancedRBACService_DeleteAction_Handler,
		},
		{
			MethodName: "CreateResource",
			Handler:    _EnhancedRBACService_CreateResource_Handler,
		},
		{
			MethodName: "GetResource",
			Handler:    _EnhancedRBACService_GetResource_Handler,
		},
		{
			MethodName: "UpdateResource",
			Handler:    _EnhancedRBACService_UpdateResource_Handler,
		},
		{
			MethodName: "DeleteResource",
			Handler:    _EnhancedRBACService_DeleteResource_Handler,
		},
		{
			MethodName: "CreatePermission",
			Handler:    _EnhancedRBACService_CreatePermission_Handler,
		},
		{
			MethodName: "GetPermission",
			Handler:    _EnhancedRBACService_GetPermission_Handler,
		},
		{
			MethodName: "UpdatePermission",
			Handler:    _EnhancedRBACService_UpdatePermission_Handler,
		},
		{
			MethodName: "DeletePermission",
			Handler:    _EnhancedRBACService_DeletePermission_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _EnhancedRBACService_CreateRole_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _EnhancedRBACService_GetRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _EnhancedRBACService_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _EnhancedRBACService_DeleteRole_Handler,
		},
		{
			MethodName: "AssignRoleToUser",
			Handler:    _EnhancedRBACService_AssignRoleToUser_Handler,
		},
		{
			MethodName: "RemoveRoleFromUser",
			Handler:    _EnhancedRBACService_RemoveRoleFromUser_Handler,
		},
		{
			MethodName: "GetUserRoles",
			Handler:    _EnhancedRBACService_GetUserRoles_Handler,
		},
		{
			MethodName: "GetRoleUsers",
			Handler:    _EnhancedRBACService_GetRoleUsers_Handler,
		},
		{
			MethodName: "EvaluatePermission",
			Handler:    _EnhancedRBACService_EvaluatePermission_Handler,
		},
		{
			MethodName: "BulkEvaluatePermission",
			Handler:    _EnhancedRBACService_BulkEvaluatePermission_Handler,
		},
		{
			MethodName: "ValidatePermission",
			Handler:    _EnhancedRBACService_ValidatePermission_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllActions",
			Handler:       _EnhancedRBACService_GetAllActions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllResources",
			Handler:       _EnhancedRBACService_GetAllResources_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllPermissions",
			Handler:       _EnhancedRBACService_GetAllPermissions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllRoles",
			Handler:       _EnhancedRBACService_GetAllRoles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUserPermissions",
			Handler:       _EnhancedRBACService_GetUserPermissions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetRolePermissions",
			Handler:       _EnhancedRBACService_GetRolePermissions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/proto/enhanced_rbac.proto",
}

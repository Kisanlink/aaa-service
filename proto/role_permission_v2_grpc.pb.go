// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/role_permission_v2.proto

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RoleServiceV2_CreateRole_FullMethodName               = "/role_permission_v2.RoleServiceV2/CreateRole"
	RoleServiceV2_GetRole_FullMethodName                  = "/role_permission_v2.RoleServiceV2/GetRole"
	RoleServiceV2_GetAllRoles_FullMethodName              = "/role_permission_v2.RoleServiceV2/GetAllRoles"
	RoleServiceV2_UpdateRole_FullMethodName               = "/role_permission_v2.RoleServiceV2/UpdateRole"
	RoleServiceV2_DeleteRole_FullMethodName               = "/role_permission_v2.RoleServiceV2/DeleteRole"
	RoleServiceV2_AssignPermissionToRole_FullMethodName   = "/role_permission_v2.RoleServiceV2/AssignPermissionToRole"
	RoleServiceV2_RemovePermissionFromRole_FullMethodName = "/role_permission_v2.RoleServiceV2/RemovePermissionFromRole"
	RoleServiceV2_GetRolePermissions_FullMethodName       = "/role_permission_v2.RoleServiceV2/GetRolePermissions"
)

// RoleServiceV2Client is the client API for RoleServiceV2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// V2 Role Service
type RoleServiceV2Client interface {
	CreateRole(ctx context.Context, in *CreateRoleRequestV2, opts ...grpc.CallOption) (*CreateRoleResponseV2, error)
	GetRole(ctx context.Context, in *GetRoleRequestV2, opts ...grpc.CallOption) (*GetRoleResponseV2, error)
	GetAllRoles(ctx context.Context, in *GetAllRolesRequestV2, opts ...grpc.CallOption) (*GetAllRolesResponseV2, error)
	UpdateRole(ctx context.Context, in *UpdateRoleRequestV2, opts ...grpc.CallOption) (*UpdateRoleResponseV2, error)
	DeleteRole(ctx context.Context, in *DeleteRoleRequestV2, opts ...grpc.CallOption) (*DeleteRoleResponseV2, error)
	AssignPermissionToRole(ctx context.Context, in *AssignPermissionToRoleRequestV2, opts ...grpc.CallOption) (*AssignPermissionToRoleResponseV2, error)
	RemovePermissionFromRole(ctx context.Context, in *RemovePermissionFromRoleRequestV2, opts ...grpc.CallOption) (*RemovePermissionFromRoleResponseV2, error)
	GetRolePermissions(ctx context.Context, in *GetRolePermissionsRequestV2, opts ...grpc.CallOption) (*GetRolePermissionsResponseV2, error)
}

type roleServiceV2Client struct {
	cc grpc.ClientConnInterface
}

func NewRoleServiceV2Client(cc grpc.ClientConnInterface) RoleServiceV2Client {
	return &roleServiceV2Client{cc}
}

func (c *roleServiceV2Client) CreateRole(ctx context.Context, in *CreateRoleRequestV2, opts ...grpc.CallOption) (*CreateRoleResponseV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRoleResponseV2)
	err := c.cc.Invoke(ctx, RoleServiceV2_CreateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceV2Client) GetRole(ctx context.Context, in *GetRoleRequestV2, opts ...grpc.CallOption) (*GetRoleResponseV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRoleResponseV2)
	err := c.cc.Invoke(ctx, RoleServiceV2_GetRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceV2Client) GetAllRoles(ctx context.Context, in *GetAllRolesRequestV2, opts ...grpc.CallOption) (*GetAllRolesResponseV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllRolesResponseV2)
	err := c.cc.Invoke(ctx, RoleServiceV2_GetAllRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceV2Client) UpdateRole(ctx context.Context, in *UpdateRoleRequestV2, opts ...grpc.CallOption) (*UpdateRoleResponseV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRoleResponseV2)
	err := c.cc.Invoke(ctx, RoleServiceV2_UpdateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceV2Client) DeleteRole(ctx context.Context, in *DeleteRoleRequestV2, opts ...grpc.CallOption) (*DeleteRoleResponseV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRoleResponseV2)
	err := c.cc.Invoke(ctx, RoleServiceV2_DeleteRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceV2Client) AssignPermissionToRole(ctx context.Context, in *AssignPermissionToRoleRequestV2, opts ...grpc.CallOption) (*AssignPermissionToRoleResponseV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignPermissionToRoleResponseV2)
	err := c.cc.Invoke(ctx, RoleServiceV2_AssignPermissionToRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceV2Client) RemovePermissionFromRole(ctx context.Context, in *RemovePermissionFromRoleRequestV2, opts ...grpc.CallOption) (*RemovePermissionFromRoleResponseV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemovePermissionFromRoleResponseV2)
	err := c.cc.Invoke(ctx, RoleServiceV2_RemovePermissionFromRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceV2Client) GetRolePermissions(ctx context.Context, in *GetRolePermissionsRequestV2, opts ...grpc.CallOption) (*GetRolePermissionsResponseV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRolePermissionsResponseV2)
	err := c.cc.Invoke(ctx, RoleServiceV2_GetRolePermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleServiceV2Server is the server API for RoleServiceV2 service.
// All implementations must embed UnimplementedRoleServiceV2Server
// for forward compatibility.
//
// V2 Role Service
type RoleServiceV2Server interface {
	CreateRole(context.Context, *CreateRoleRequestV2) (*CreateRoleResponseV2, error)
	GetRole(context.Context, *GetRoleRequestV2) (*GetRoleResponseV2, error)
	GetAllRoles(context.Context, *GetAllRolesRequestV2) (*GetAllRolesResponseV2, error)
	UpdateRole(context.Context, *UpdateRoleRequestV2) (*UpdateRoleResponseV2, error)
	DeleteRole(context.Context, *DeleteRoleRequestV2) (*DeleteRoleResponseV2, error)
	AssignPermissionToRole(context.Context, *AssignPermissionToRoleRequestV2) (*AssignPermissionToRoleResponseV2, error)
	RemovePermissionFromRole(context.Context, *RemovePermissionFromRoleRequestV2) (*RemovePermissionFromRoleResponseV2, error)
	GetRolePermissions(context.Context, *GetRolePermissionsRequestV2) (*GetRolePermissionsResponseV2, error)
	mustEmbedUnimplementedRoleServiceV2Server()
}

// UnimplementedRoleServiceV2Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRoleServiceV2Server struct{}

func (UnimplementedRoleServiceV2Server) CreateRole(context.Context, *CreateRoleRequestV2) (*CreateRoleResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedRoleServiceV2Server) GetRole(context.Context, *GetRoleRequestV2) (*GetRoleResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedRoleServiceV2Server) GetAllRoles(context.Context, *GetAllRolesRequestV2) (*GetAllRolesResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRoles not implemented")
}
func (UnimplementedRoleServiceV2Server) UpdateRole(context.Context, *UpdateRoleRequestV2) (*UpdateRoleResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedRoleServiceV2Server) DeleteRole(context.Context, *DeleteRoleRequestV2) (*DeleteRoleResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedRoleServiceV2Server) AssignPermissionToRole(context.Context, *AssignPermissionToRoleRequestV2) (*AssignPermissionToRoleResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignPermissionToRole not implemented")
}
func (UnimplementedRoleServiceV2Server) RemovePermissionFromRole(context.Context, *RemovePermissionFromRoleRequestV2) (*RemovePermissionFromRoleResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePermissionFromRole not implemented")
}
func (UnimplementedRoleServiceV2Server) GetRolePermissions(context.Context, *GetRolePermissionsRequestV2) (*GetRolePermissionsResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolePermissions not implemented")
}
func (UnimplementedRoleServiceV2Server) mustEmbedUnimplementedRoleServiceV2Server() {}
func (UnimplementedRoleServiceV2Server) testEmbeddedByValue()                       {}

// UnsafeRoleServiceV2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleServiceV2Server will
// result in compilation errors.
type UnsafeRoleServiceV2Server interface {
	mustEmbedUnimplementedRoleServiceV2Server()
}

func RegisterRoleServiceV2Server(s grpc.ServiceRegistrar, srv RoleServiceV2Server) {
	// If the following call pancis, it indicates UnimplementedRoleServiceV2Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RoleServiceV2_ServiceDesc, srv)
}

func _RoleServiceV2_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceV2Server).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleServiceV2_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceV2Server).CreateRole(ctx, req.(*CreateRoleRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServiceV2_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceV2Server).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleServiceV2_GetRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceV2Server).GetRole(ctx, req.(*GetRoleRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServiceV2_GetAllRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRolesRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceV2Server).GetAllRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleServiceV2_GetAllRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceV2Server).GetAllRoles(ctx, req.(*GetAllRolesRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServiceV2_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceV2Server).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleServiceV2_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceV2Server).UpdateRole(ctx, req.(*UpdateRoleRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServiceV2_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceV2Server).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleServiceV2_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceV2Server).DeleteRole(ctx, req.(*DeleteRoleRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServiceV2_AssignPermissionToRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignPermissionToRoleRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceV2Server).AssignPermissionToRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleServiceV2_AssignPermissionToRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceV2Server).AssignPermissionToRole(ctx, req.(*AssignPermissionToRoleRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServiceV2_RemovePermissionFromRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePermissionFromRoleRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceV2Server).RemovePermissionFromRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleServiceV2_RemovePermissionFromRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceV2Server).RemovePermissionFromRole(ctx, req.(*RemovePermissionFromRoleRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServiceV2_GetRolePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolePermissionsRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceV2Server).GetRolePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleServiceV2_GetRolePermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceV2Server).GetRolePermissions(ctx, req.(*GetRolePermissionsRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleServiceV2_ServiceDesc is the grpc.ServiceDesc for RoleServiceV2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleServiceV2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "role_permission_v2.RoleServiceV2",
	HandlerType: (*RoleServiceV2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRole",
			Handler:    _RoleServiceV2_CreateRole_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _RoleServiceV2_GetRole_Handler,
		},
		{
			MethodName: "GetAllRoles",
			Handler:    _RoleServiceV2_GetAllRoles_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _RoleServiceV2_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _RoleServiceV2_DeleteRole_Handler,
		},
		{
			MethodName: "AssignPermissionToRole",
			Handler:    _RoleServiceV2_AssignPermissionToRole_Handler,
		},
		{
			MethodName: "RemovePermissionFromRole",
			Handler:    _RoleServiceV2_RemovePermissionFromRole_Handler,
		},
		{
			MethodName: "GetRolePermissions",
			Handler:    _RoleServiceV2_GetRolePermissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/role_permission_v2.proto",
}

const (
	PermissionServiceV2_CreatePermission_FullMethodName   = "/role_permission_v2.PermissionServiceV2/CreatePermission"
	PermissionServiceV2_GetPermission_FullMethodName      = "/role_permission_v2.PermissionServiceV2/GetPermission"
	PermissionServiceV2_GetAllPermissions_FullMethodName  = "/role_permission_v2.PermissionServiceV2/GetAllPermissions"
	PermissionServiceV2_UpdatePermission_FullMethodName   = "/role_permission_v2.PermissionServiceV2/UpdatePermission"
	PermissionServiceV2_DeletePermission_FullMethodName   = "/role_permission_v2.PermissionServiceV2/DeletePermission"
	PermissionServiceV2_EvaluatePermission_FullMethodName = "/role_permission_v2.PermissionServiceV2/EvaluatePermission"
)

// PermissionServiceV2Client is the client API for PermissionServiceV2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// V2 Permission Service
type PermissionServiceV2Client interface {
	CreatePermission(ctx context.Context, in *CreatePermissionRequestV2, opts ...grpc.CallOption) (*CreatePermissionResponseV2, error)
	GetPermission(ctx context.Context, in *GetPermissionRequestV2, opts ...grpc.CallOption) (*GetPermissionResponseV2, error)
	GetAllPermissions(ctx context.Context, in *GetAllPermissionsRequestV2, opts ...grpc.CallOption) (*GetAllPermissionsResponseV2, error)
	UpdatePermission(ctx context.Context, in *UpdatePermissionRequestV2, opts ...grpc.CallOption) (*UpdatePermissionResponseV2, error)
	DeletePermission(ctx context.Context, in *DeletePermissionRequestV2, opts ...grpc.CallOption) (*DeletePermissionResponseV2, error)
	EvaluatePermission(ctx context.Context, in *EvaluatePermissionRequestV2, opts ...grpc.CallOption) (*EvaluatePermissionResponseV2, error)
}

type permissionServiceV2Client struct {
	cc grpc.ClientConnInterface
}

func NewPermissionServiceV2Client(cc grpc.ClientConnInterface) PermissionServiceV2Client {
	return &permissionServiceV2Client{cc}
}

func (c *permissionServiceV2Client) CreatePermission(ctx context.Context, in *CreatePermissionRequestV2, opts ...grpc.CallOption) (*CreatePermissionResponseV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePermissionResponseV2)
	err := c.cc.Invoke(ctx, PermissionServiceV2_CreatePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceV2Client) GetPermission(ctx context.Context, in *GetPermissionRequestV2, opts ...grpc.CallOption) (*GetPermissionResponseV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPermissionResponseV2)
	err := c.cc.Invoke(ctx, PermissionServiceV2_GetPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceV2Client) GetAllPermissions(ctx context.Context, in *GetAllPermissionsRequestV2, opts ...grpc.CallOption) (*GetAllPermissionsResponseV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllPermissionsResponseV2)
	err := c.cc.Invoke(ctx, PermissionServiceV2_GetAllPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceV2Client) UpdatePermission(ctx context.Context, in *UpdatePermissionRequestV2, opts ...grpc.CallOption) (*UpdatePermissionResponseV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePermissionResponseV2)
	err := c.cc.Invoke(ctx, PermissionServiceV2_UpdatePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceV2Client) DeletePermission(ctx context.Context, in *DeletePermissionRequestV2, opts ...grpc.CallOption) (*DeletePermissionResponseV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePermissionResponseV2)
	err := c.cc.Invoke(ctx, PermissionServiceV2_DeletePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceV2Client) EvaluatePermission(ctx context.Context, in *EvaluatePermissionRequestV2, opts ...grpc.CallOption) (*EvaluatePermissionResponseV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EvaluatePermissionResponseV2)
	err := c.cc.Invoke(ctx, PermissionServiceV2_EvaluatePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermissionServiceV2Server is the server API for PermissionServiceV2 service.
// All implementations must embed UnimplementedPermissionServiceV2Server
// for forward compatibility.
//
// V2 Permission Service
type PermissionServiceV2Server interface {
	CreatePermission(context.Context, *CreatePermissionRequestV2) (*CreatePermissionResponseV2, error)
	GetPermission(context.Context, *GetPermissionRequestV2) (*GetPermissionResponseV2, error)
	GetAllPermissions(context.Context, *GetAllPermissionsRequestV2) (*GetAllPermissionsResponseV2, error)
	UpdatePermission(context.Context, *UpdatePermissionRequestV2) (*UpdatePermissionResponseV2, error)
	DeletePermission(context.Context, *DeletePermissionRequestV2) (*DeletePermissionResponseV2, error)
	EvaluatePermission(context.Context, *EvaluatePermissionRequestV2) (*EvaluatePermissionResponseV2, error)
	mustEmbedUnimplementedPermissionServiceV2Server()
}

// UnimplementedPermissionServiceV2Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPermissionServiceV2Server struct{}

func (UnimplementedPermissionServiceV2Server) CreatePermission(context.Context, *CreatePermissionRequestV2) (*CreatePermissionResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePermission not implemented")
}
func (UnimplementedPermissionServiceV2Server) GetPermission(context.Context, *GetPermissionRequestV2) (*GetPermissionResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermission not implemented")
}
func (UnimplementedPermissionServiceV2Server) GetAllPermissions(context.Context, *GetAllPermissionsRequestV2) (*GetAllPermissionsResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPermissions not implemented")
}
func (UnimplementedPermissionServiceV2Server) UpdatePermission(context.Context, *UpdatePermissionRequestV2) (*UpdatePermissionResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePermission not implemented")
}
func (UnimplementedPermissionServiceV2Server) DeletePermission(context.Context, *DeletePermissionRequestV2) (*DeletePermissionResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermission not implemented")
}
func (UnimplementedPermissionServiceV2Server) EvaluatePermission(context.Context, *EvaluatePermissionRequestV2) (*EvaluatePermissionResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvaluatePermission not implemented")
}
func (UnimplementedPermissionServiceV2Server) mustEmbedUnimplementedPermissionServiceV2Server() {}
func (UnimplementedPermissionServiceV2Server) testEmbeddedByValue()                             {}

// UnsafePermissionServiceV2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermissionServiceV2Server will
// result in compilation errors.
type UnsafePermissionServiceV2Server interface {
	mustEmbedUnimplementedPermissionServiceV2Server()
}

func RegisterPermissionServiceV2Server(s grpc.ServiceRegistrar, srv PermissionServiceV2Server) {
	// If the following call pancis, it indicates UnimplementedPermissionServiceV2Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PermissionServiceV2_ServiceDesc, srv)
}

func _PermissionServiceV2_CreatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePermissionRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceV2Server).CreatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionServiceV2_CreatePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceV2Server).CreatePermission(ctx, req.(*CreatePermissionRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionServiceV2_GetPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceV2Server).GetPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionServiceV2_GetPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceV2Server).GetPermission(ctx, req.(*GetPermissionRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionServiceV2_GetAllPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPermissionsRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceV2Server).GetAllPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionServiceV2_GetAllPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceV2Server).GetAllPermissions(ctx, req.(*GetAllPermissionsRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionServiceV2_UpdatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePermissionRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceV2Server).UpdatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionServiceV2_UpdatePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceV2Server).UpdatePermission(ctx, req.(*UpdatePermissionRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionServiceV2_DeletePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePermissionRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceV2Server).DeletePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionServiceV2_DeletePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceV2Server).DeletePermission(ctx, req.(*DeletePermissionRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionServiceV2_EvaluatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluatePermissionRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceV2Server).EvaluatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionServiceV2_EvaluatePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceV2Server).EvaluatePermission(ctx, req.(*EvaluatePermissionRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

// PermissionServiceV2_ServiceDesc is the grpc.ServiceDesc for PermissionServiceV2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PermissionServiceV2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "role_permission_v2.PermissionServiceV2",
	HandlerType: (*PermissionServiceV2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePermission",
			Handler:    _PermissionServiceV2_CreatePermission_Handler,
		},
		{
			MethodName: "GetPermission",
			Handler:    _PermissionServiceV2_GetPermission_Handler,
		},
		{
			MethodName: "GetAllPermissions",
			Handler:    _PermissionServiceV2_GetAllPermissions_Handler,
		},
		{
			MethodName: "UpdatePermission",
			Handler:    _PermissionServiceV2_UpdatePermission_Handler,
		},
		{
			MethodName: "DeletePermission",
			Handler:    _PermissionServiceV2_DeletePermission_Handler,
		},
		{
			MethodName: "EvaluatePermission",
			Handler:    _PermissionServiceV2_EvaluatePermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/role_permission_v2.proto",
}

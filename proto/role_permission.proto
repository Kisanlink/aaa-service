syntax = "proto3";

package role_permission;

option go_package = "github.com/Kisanlink/aaa-service/pb";

// Base message definition (optional, if you want to reuse fields like ID, createdAt, updatedAt)
message Base {
    string id = 1;          // UUID as string
    string created_at = 2;  // ISO 8601 timestamp
    string updated_at = 3;  // ISO 8601 timestamp
}

// Role message definition
message Role {
    string id = 1;          // Primary key (UUID as string)
    string name = 2;        // Unique name
    string description = 3; // Optional description
}

// Permission message definition
message Permission {
    string id = 1;          // Primary key (UUID as string)
    string name = 2;        // Unique name
    string description = 3; // Optional description
}

// Request messages for Role CRUD operations
message CreateRoleRequest {
    string name = 1;        // Unique name
    string description = 2; // Optional description
}

message CreateRoleResponse {
    int32 status_code = 1;  // HTTP status code equivalent
    string message = 2;     // Response message
    Role role = 3;          // Created role
}

message GetAllRolesRequest {}

message GetAllRolesResponse {
    int32 status_code = 1;  // HTTP status code equivalent
    string message = 2;     // Response message
    repeated Role roles = 3; // List of roles
}

message GetRoleByIdRequest {
    string id = 1;          // Role ID (UUID as string)
}

message GetRoleByIdResponse {
    int32 status_code = 1;  // HTTP status code equivalent
    string message = 2;     // Response message
    Role role = 3;          // Retrieved role
}

message UpdateRoleRequest {
    Role role = 1;          // Role object with updated fields
}

message UpdateRoleResponse {
    int32 status_code = 1;  // HTTP status code equivalent
    string message = 2;     // Response message
    Role role = 3;          // Updated role
}

message DeleteRoleRequest {
    string id = 1;          // Role ID (UUID as string)
}

message DeleteRoleResponse {
    int32 status_code = 1;  // HTTP status code equivalent
    string message = 2;     // Response message
}

// Request messages for Permission CRUD operations
message CreatePermissionRequest {
    string name = 1;        // Unique name
    string description = 2; // Optional description
}

message CreatePermissionResponse {
    int32 status_code = 1;  // HTTP status code equivalent
    string message = 2;     // Response message
    Permission permission = 3; // Created permission
}

message GetAllPermissionsRequest {}

message GetAllPermissionsResponse {
    int32 status_code = 1;  // HTTP status code equivalent
    string message = 2;     // Response message
    repeated Permission permissions = 3; // List of permissions
}

message GetPermissionByIdRequest {
    string id = 1;          // Permission ID (UUID as string)
}

message GetPermissionByIdResponse {
    int32 status_code = 1;  // HTTP status code equivalent
    string message = 2;     // Response message
    Permission permission = 3; // Retrieved permission
}

message UpdatePermissionRequest {
    Permission permission = 1; // Permission object with updated fields
}

message UpdatePermissionResponse {
    int32 status_code = 1;  // HTTP status code equivalent
    string message = 2;     // Response message
    Permission permission = 3; // Updated permission
}

message DeletePermissionRequest {
    string id = 1;          // Permission ID (UUID as string)
}

message DeletePermissionResponse {
    int32 status_code = 1;  // HTTP status code equivalent
    string message = 2;     // Response message
}

// Service definitions
service RoleService {
    rpc CreateRole(CreateRoleRequest) returns (CreateRoleResponse);
    rpc GetAllRoles(GetAllRolesRequest) returns (GetAllRolesResponse);
    rpc GetRoleById(GetRoleByIdRequest) returns (GetRoleByIdResponse);
    rpc UpdateRole(UpdateRoleRequest) returns (UpdateRoleResponse);
    rpc DeleteRole(DeleteRoleRequest) returns (DeleteRoleResponse);
}

service PermissionService {
    rpc CreatePermission(CreatePermissionRequest) returns (CreatePermissionResponse);
    rpc GetAllPermissions(GetAllPermissionsRequest) returns (GetAllPermissionsResponse);
    rpc GetPermissionById(GetPermissionByIdRequest) returns (GetPermissionByIdResponse);
    rpc UpdatePermission(UpdatePermissionRequest) returns (UpdatePermissionResponse);
    rpc DeletePermission(DeletePermissionRequest) returns (DeletePermissionResponse);
}


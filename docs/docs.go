// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/actions": {
            "get": {
                "description": "Retrieves actions with optional filtering by ID or name and pagination support",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Actions"
                ],
                "summary": "Get actions with pagination",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by action ID",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by action name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (starts from 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of actions retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Action"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve actions",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new action with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Actions"
                ],
                "summary": "Create a new action",
                "parameters": [
                    {
                        "description": "Action creation data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateActionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Action created successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Action"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request or missing required fields",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Action already exists",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to create action",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/actions/{id}": {
            "put": {
                "description": "Updates an existing action with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Actions"
                ],
                "summary": "Update an action",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Action ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Action update data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateActionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Action updated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Action"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Action not found",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update action",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes an existing action by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Actions"
                ],
                "summary": "Delete an action",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Action ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Action deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid action ID",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Action not found",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete action",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/assign-permissions": {
            "get": {
                "description": "Retrieves roles with their associated permissions, with optional filtering and pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RolePermissions"
                ],
                "summary": "Get roles with permissions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by role ID",
                        "name": "role_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by role name (case-insensitive partial match)",
                        "name": "role_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by permission ID",
                        "name": "permission_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (starts from 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of roles with permissions retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.GetRolePermissionResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve roles with permissions",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates an association between a role and permission",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RolePermissions"
                ],
                "summary": "Assign permission to role",
                "parameters": [
                    {
                        "description": "Assignment data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.RolePermissionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Permission assigned successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.RolePermission"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request or missing required fields",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Role or permission not found",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Association already exists",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to assign permission",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/assign-permissions/{id}": {
            "get": {
                "description": "Retrieves a single role-permission relationship by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RolePermissions"
                ],
                "summary": "Get role-permission by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role-Permission ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role-permission retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.GetRolePermissionResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Role-permission not found",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve role-permission",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a role-permission relationship by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RolePermissions"
                ],
                "summary": "Delete role-permission",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role-Permission ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role-permission deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "404": {
                        "description": "Role-permission not found",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete role-permission",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/assign-role": {
            "post": {
                "description": "Assigns a specified role to a user and returns the updated user details with roles and permissions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Assign a role to a user",
                "parameters": [
                    {
                        "description": "Assign Role Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.AssignRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role assigned successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.AssignRolePermission"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User or Role not found",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Role already assigned to user",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "API to delete a specific role assigned to a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "delete a role to a user",
                "parameters": [
                    {
                        "description": "Assign Role Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.AssignRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "delete assigned Role successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User or Role not found",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/check-permission": {
            "post": {
                "description": "Checks if a user has permission to perform a specific action on a resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SpiceDB"
                ],
                "summary": "Check user permission",
                "parameters": [
                    {
                        "description": "Permission Check Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CheckPermissionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Permission check result",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to check permission",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/forgot-password": {
            "post": {
                "description": "Handles the complete password reset flow in three steps: 1) Request OTP, 2) Verify OTP, 3) Reset password. Each step requires different request parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Password reset flow",
                "parameters": [
                    {
                        "description": "Password reset request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.PasswordResetFlowRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success responses vary by step: 1) 'OTP sent successfully', 2) 'OTP verified. Proceed to reset password.', 3) 'Password reset successfully'",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or parameters",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid or expired OTP",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Authenticates a user with username and password, returns JWT tokens in response headers and optional user details in body. If 'source: admin/panel' header is provided, only users with ADMIN, SUPER_ADMIN, or CUSTOMER_SUPPORT roles can login.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.LoginRequest"
                        }
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Include full user details",
                        "name": "user_details",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Access source (e.g., 'admin/panel' for admin panel access)",
                        "name": "source",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.UserResponse"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "Authorization": {
                                "type": "string",
                                "description": "Bearer access token"
                            },
                            "Refresh-Token": {
                                "type": "string",
                                "description": "Refresh token"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body or missing credentials",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access Denied: Insufficient permission (when source=admin/panel but user lacks required role)",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/permissions": {
            "get": {
                "description": "Retrieves all permissions with optional filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Permissions"
                ],
                "summary": "Get all permissions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by role ID",
                        "name": "roleId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by resource",
                        "name": "resource",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by action",
                        "name": "action",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Permissions retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Permission"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid filter parameters",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve permissions",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new permission with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Permissions"
                ],
                "summary": "Create a new permission",
                "parameters": [
                    {
                        "description": "Permission creation data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreatePermissionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Permission created successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Permission"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request or missing required fields",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Permission already exists for this role+resource",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to create permission",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/permissions/{id}": {
            "get": {
                "description": "Retrieves a permission by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Permissions"
                ],
                "summary": "Get permission by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Permission ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Permission retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Permission"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid permission ID",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Permission not found",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve permission",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates an existing permission with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Permissions"
                ],
                "summary": "Update a permission",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Permission ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Permission update data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreatePermissionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Permission updated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Permission"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request or missing required fields",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Permission not found",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Permission already exists for this role+resource",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update permission",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes an existing permission by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Permissions"
                ],
                "summary": "Delete a permission",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Permission ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Permission deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid permission ID",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Permission not found",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete permission",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/read/schema": {
            "get": {
                "description": "Read schema from SpiceDB",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SpiceDB"
                ],
                "summary": "Read spice db schema",
                "responses": {
                    "200": {
                        "description": "Schema Read successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Failed to Read SpiceDB schema",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Creates a new user account with the provided details. Optionally sends OTP for Aadhaar verification if Aadhaar number is provided.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.MinimalUser"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation failed",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Username, mobile number or Aadhaar already exists",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/resources": {
            "get": {
                "description": "Get resources with optional filtering by ID or name and pagination",
                "tags": [
                    "Resources"
                ],
                "summary": "Get resources",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by resource ID",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by resource name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (starts from 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Resource"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new resource with the provided details (Format: db_name_table_name - e.g. db_aaa_users or db_farmer_crop_cycle)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Resources"
                ],
                "summary": "Create resource",
                "parameters": [
                    {
                        "description": "Resource creation data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateResourceRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Resource created successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Resource"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body or resource name format (must be db/name/table_name)",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Resource already exists",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to create resource",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/resources/{id}": {
            "put": {
                "description": "Updates an existing resource with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Resources"
                ],
                "summary": "Update a resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Resource ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Resource update data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateResourceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Resource updated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Resource"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update resource",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes an existing resource by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Resources"
                ],
                "summary": "Delete a resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Resource ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Resource deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid resource ID",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete resource",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/roles": {
            "get": {
                "description": "Retrieves roles with optional filtering by ID or name and pagination support",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Get roles with pagination",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by role ID",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by role name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (starts from 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Roles retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Role"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve roles",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Create a new role",
                "parameters": [
                    {
                        "description": "Role and permissions data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Role created successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Role"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Role already exists",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to create role",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/roles/{id}": {
            "put": {
                "description": "Updates an existing role with identified by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Update a role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Role and permissions data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role updated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Role"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Role not found",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update role",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a role and all its associated permissions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Delete a role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid role ID",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete role",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/token-transaction": {
            "post": {
                "description": "Handles token transactions (credit/debit) or fetches token balance when no transaction type is specified",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Manage user tokens",
                "parameters": [
                    {
                        "description": "Token transaction request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreditUsageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns remaining tokens in all cases\" example({\"remaining_tokens\": 100})",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Invalid request, insufficient tokens, or invalid transaction type",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/update/relations": {
            "get": {
                "description": "Updates all user-role relationships in SpiceDB by syncing with the current database state",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SpiceDB"
                ],
                "summary": "Update SpiceDB relationships",
                "responses": {
                    "200": {
                        "description": "Relationships updated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.User"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Failed to update relationships",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/update/schema": {
            "get": {
                "description": "update schema by Retrieves all roles",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SpiceDB"
                ],
                "summary": "update spice db schema",
                "responses": {
                    "200": {
                        "description": "Roles retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Role"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve roles",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Retrieves a list of users including their roles, permissions, and address information with optional pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get users with pagination",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (starts from 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Users fetched successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.UserRes"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error when fetching users or their details",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Retrieves a single user's details including roles, permissions, and address information by their unique ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User fetched successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.UserRes"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "ID is required",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error when fetching user or related data",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates user information by ID. Only provided fields will be updated (partial update supported).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update user",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User update data (partial updates allowed)",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.UserRes"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid ID or request body",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update user or fetch related data",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "helper.ErrorResponse": {
            "description": "Standard API error response structure with multiple error messages",
            "type": "object",
            "properties": {
                "data": {
                    "description": "The actual data payload (nil for error responses)\n@example null"
                },
                "errors": {
                    "description": "List of error messages describing what went wrong\n@example [\"Invalid email format\", \"Password must be at least 8 characters\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "message": {
                    "description": "Human-readable summary message about the error\n@example \"Validation failed\"",
                    "type": "string"
                },
                "status_code": {
                    "description": "HTTP status code\n@example 400",
                    "type": "integer"
                },
                "success": {
                    "description": "Indicates if the request was successfully processed (always false for error responses)\n@example false",
                    "type": "boolean"
                },
                "timestamp": {
                    "description": "Timestamp of when the response was generated\n@example \"2023-05-15T10:00:00Z\"",
                    "type": "string"
                }
            }
        },
        "helper.Response": {
            "description": "Standard API response structure",
            "type": "object",
            "properties": {
                "data": {
                    "description": "The actual data payload (can be any type)\n@example {\"id\": 1, \"name\": \"John Doe\"}"
                },
                "error": {
                    "description": "List of error messages (if any)\n@example null",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "message": {
                    "description": "Human-readable message about the response\n@example \"Request processed successfully\"",
                    "type": "string"
                },
                "status_code": {
                    "description": "HTTP status code\n@example 200",
                    "type": "integer"
                },
                "success": {
                    "description": "Indicates if the request was successfully processed\n@example true",
                    "type": "boolean"
                },
                "timestamp": {
                    "description": "Timestamp of when the response was generated\n@example \"2023-05-15T10:00:00Z\"",
                    "type": "string"
                }
            }
        },
        "model.AadhaarOTPResponse": {
            "type": "object",
            "properties": {
                "entity": {
                    "type": "string",
                    "example": "aadhaar"
                },
                "otp_message": {
                    "type": "string",
                    "example": "OTP sent successfully"
                },
                "reference_id": {
                    "type": "string",
                    "example": "REF987654321"
                },
                "status_code": {
                    "type": "integer",
                    "example": 200
                },
                "timestamp": {
                    "type": "integer",
                    "example": 1672531200
                },
                "transaction_id": {
                    "type": "string",
                    "example": "TXN123456789"
                }
            }
        },
        "model.Action": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "description": "Use string for ID",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.Address": {
            "type": "object",
            "properties": {
                "country": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "district": {
                    "type": "string"
                },
                "full_address": {
                    "type": "string"
                },
                "house": {
                    "type": "string"
                },
                "id": {
                    "description": "Use string for ID",
                    "type": "string"
                },
                "landmark": {
                    "type": "string"
                },
                "pincode": {
                    "type": "string"
                },
                "post_office": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "street": {
                    "type": "string"
                },
                "subdistrict": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "vtc": {
                    "type": "string"
                }
            }
        },
        "model.AddressRes": {
            "type": "object",
            "properties": {
                "country": {
                    "type": "string",
                    "example": "USA"
                },
                "created_at": {
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "district": {
                    "type": "string",
                    "example": "Central District"
                },
                "full_address": {
                    "type": "string",
                    "example": "123 Main Street, Near Central Park, Metro City, California, USA - 123456"
                },
                "house": {
                    "type": "string",
                    "example": "123"
                },
                "id": {
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "landmark": {
                    "type": "string",
                    "example": "Near Central Park"
                },
                "pincode": {
                    "type": "string",
                    "example": "123456"
                },
                "post_office": {
                    "type": "string",
                    "example": "Main Post Office"
                },
                "state": {
                    "type": "string",
                    "example": "California"
                },
                "street": {
                    "type": "string",
                    "example": "Main Street"
                },
                "subdistrict": {
                    "type": "string",
                    "example": "Downtown"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2023-01-02T10:30:00Z"
                },
                "vtc": {
                    "type": "string",
                    "example": "Metro City"
                }
            }
        },
        "model.AssignRolePermission": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "id": {
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "is_validated": {
                    "type": "boolean",
                    "example": true
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.RoleDetail"
                    }
                },
                "updated_at": {
                    "type": "string",
                    "example": "2023-01-02T10:30:00Z"
                },
                "username": {
                    "type": "string",
                    "example": "johndoe"
                }
            }
        },
        "model.AssignRoleRequest": {
            "type": "object",
            "required": [
                "role",
                "user_id"
            ],
            "properties": {
                "role": {
                    "type": "string",
                    "example": "admin"
                },
                "user_id": {
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                }
            }
        },
        "model.CheckPermissionRequest": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "\"edit\"",
                    "type": "string"
                },
                "resourceID": {
                    "description": "\"123\" (userid)",
                    "type": "string"
                },
                "resourceType": {
                    "description": "\"db/farmers\"",
                    "type": "string"
                },
                "username": {
                    "description": "\"alice\"",
                    "type": "string"
                }
            }
        },
        "model.CreateActionRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "example": "read"
                }
            }
        },
        "model.CreatePermissionRequest": {
            "type": "object",
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "effect": {
                    "type": "string"
                },
                "resource": {
                    "type": "string"
                }
            }
        },
        "model.CreateResourceRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "example": "document"
                }
            }
        },
        "model.CreateRoleRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Administrator role with full access"
                },
                "name": {
                    "type": "string",
                    "example": "admin"
                }
            }
        },
        "model.CreateUserRequest": {
            "type": "object",
            "required": [
                "mobile_number"
            ],
            "properties": {
                "aadhaar_number": {
                    "type": "string",
                    "example": "123456789012"
                },
                "country_code": {
                    "type": "string",
                    "example": "+91"
                },
                "mobile_number": {
                    "type": "integer",
                    "example": 9876543210
                },
                "password": {
                    "type": "string",
                    "example": "securePassword123"
                },
                "username": {
                    "type": "string",
                    "example": "johndoe"
                }
            }
        },
        "model.CreditUsageRequest": {
            "type": "object",
            "required": [
                "user_id"
            ],
            "properties": {
                "tokens": {
                    "type": "integer",
                    "example": 100
                },
                "transaction_type": {
                    "type": "string",
                    "example": "debit"
                },
                "user_id": {
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                }
            }
        },
        "model.GetRolePermissionResponse": {
            "type": "object",
            "properties": {
                "Permission": {
                    "$ref": "#/definitions/model.Permission"
                },
                "Role": {
                    "$ref": "#/definitions/model.Role"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.LoginRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "example": "securePassword123"
                },
                "username": {
                    "type": "string",
                    "example": "johndoe"
                }
            }
        },
        "model.MinimalUser": {
            "type": "object",
            "properties": {
                "country_code": {
                    "type": "string",
                    "example": "+91"
                },
                "created_at": {
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "id": {
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "is_validated": {
                    "type": "boolean",
                    "example": true
                },
                "mobile_number": {
                    "type": "integer",
                    "example": 9876543210
                },
                "otp_response": {
                    "$ref": "#/definitions/model.AadhaarOTPResponse"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2023-01-02T10:30:00Z"
                },
                "username": {
                    "type": "string",
                    "example": "johndoe"
                }
            }
        },
        "model.PasswordResetFlowRequest": {
            "type": "object",
            "required": [
                "username"
            ],
            "properties": {
                "new_password": {
                    "type": "string",
                    "example": "newSecurePassword123"
                },
                "otp": {
                    "type": "string",
                    "example": "123456"
                },
                "username": {
                    "type": "string",
                    "example": "johndoe"
                }
            }
        },
        "model.Permission": {
            "type": "object",
            "properties": {
                "actions": {
                    "description": "Actions  pq.StringArray ` + "`" + `json:\"actions\" gorm:\"type:text[]\"` + "`" + `",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "effect": {
                    "type": "string"
                },
                "id": {
                    "description": "Use string for ID",
                    "type": "string"
                },
                "resource": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.Resource": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "description": "Use string for ID",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.Role": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "description": "Use string for ID",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Permission"
                    }
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.RoleDetail": {
            "type": "object",
            "properties": {
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.RolePermissionRes"
                    }
                },
                "role_name": {
                    "type": "string",
                    "example": "admin"
                }
            }
        },
        "model.RolePermission": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "description": "Use string for ID",
                    "type": "string"
                },
                "permissionID": {
                    "type": "string"
                },
                "roleID": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.RolePermissionRequest": {
            "type": "object",
            "required": [
                "permissionId",
                "roleId"
            ],
            "properties": {
                "permissionId": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "roleId": {
                    "type": "string"
                }
            }
        },
        "model.RolePermissionRes": {
            "type": "object",
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "read",
                        "write",
                        "delete"
                    ]
                },
                "resource": {
                    "type": "string",
                    "example": "document"
                }
            }
        },
        "model.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "aadhaar_number": {
                    "type": "string",
                    "example": "123456789012"
                },
                "email_hash": {
                    "type": "string",
                    "example": "example@gmail.com"
                },
                "mobile_number": {
                    "type": "integer",
                    "example": 9876543210
                },
                "username": {
                    "type": "string",
                    "example": "johndoe"
                }
            }
        },
        "model.User": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "aadhaar_number": {
                    "type": "string"
                },
                "address": {
                    "$ref": "#/definitions/model.Address"
                },
                "address_id": {
                    "type": "string"
                },
                "care_of": {
                    "type": "string"
                },
                "country_code": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "date_of_birth": {
                    "type": "string"
                },
                "email_hash": {
                    "type": "string"
                },
                "id": {
                    "description": "Use string for ID",
                    "type": "string"
                },
                "isValidate": {
                    "type": "boolean"
                },
                "message": {
                    "type": "string"
                },
                "mobile_number": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 8
                },
                "photo": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.UserRole"
                    }
                },
                "share_code": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tokens": {
                    "description": "for credits",
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "year_of_birth": {
                    "type": "string"
                }
            }
        },
        "model.UserRes": {
            "type": "object",
            "properties": {
                "aadhaar_number": {
                    "type": "string",
                    "example": "123456789012"
                },
                "address": {
                    "$ref": "#/definitions/model.AddressRes"
                },
                "care_of": {
                    "type": "string",
                    "example": "Father"
                },
                "country_code": {
                    "type": "string",
                    "example": "+91"
                },
                "created_at": {
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "date_of_birth": {
                    "type": "string",
                    "example": "1990-01-01"
                },
                "email_hash": {
                    "type": "string",
                    "example": "a1b2c3d4e5f6"
                },
                "id": {
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "is_validated": {
                    "type": "boolean",
                    "example": true
                },
                "message": {
                    "type": "string",
                    "example": "Welcome"
                },
                "mobile_number": {
                    "type": "integer",
                    "example": 9876543210
                },
                "name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "password": {
                    "type": "string",
                    "example": "hashedpassword"
                },
                "photo": {
                    "type": "string",
                    "example": "base64encodedimage"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.RoleDetail"
                    }
                },
                "share_code": {
                    "type": "string",
                    "example": "SHARE123"
                },
                "status": {
                    "type": "string",
                    "example": "active"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2023-01-02T10:30:00Z"
                },
                "username": {
                    "type": "string",
                    "example": "johndoe"
                },
                "year_of_birth": {
                    "type": "string",
                    "example": "1990"
                }
            }
        },
        "model.UserResponse": {
            "type": "object",
            "properties": {
                "aadhaar_number": {
                    "type": "string",
                    "example": "123456789012"
                },
                "address": {
                    "$ref": "#/definitions/model.AddressRes"
                },
                "care_of": {
                    "type": "string",
                    "example": "Father"
                },
                "country_code": {
                    "type": "string",
                    "example": "+91"
                },
                "created_at": {
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "date_of_birth": {
                    "type": "string",
                    "example": "1990-01-01"
                },
                "email_hash": {
                    "type": "string",
                    "example": "a1b2c3d4e5f6"
                },
                "id": {
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "is_validated": {
                    "type": "boolean",
                    "example": true
                },
                "message": {
                    "type": "string",
                    "example": "Welcome"
                },
                "mobile_number": {
                    "type": "integer",
                    "example": 9876543210
                },
                "name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "photo": {
                    "type": "string",
                    "example": "base64encodedimage"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.RoleDetail"
                    }
                },
                "share_code": {
                    "type": "string",
                    "example": "SHARE123"
                },
                "status": {
                    "type": "string",
                    "example": "active"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2023-01-02T10:30:00Z"
                },
                "username": {
                    "type": "string",
                    "example": "johndoe"
                },
                "year_of_birth": {
                    "type": "string",
                    "example": "1990"
                }
            }
        },
        "model.UserRole": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "description": "Use string for ID",
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "roleID": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/model.User"
                },
                "userID": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "AAA-Service API",
	Description:      "Authentication, Authorization, and Accounting (AAA) service providing RBAC-based access control. Supports both gRPC and REST API interfaces for seamless integration with client applications. Offers comprehensive user management, role-based permission control, and session accounting capabilities for secure system access.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}

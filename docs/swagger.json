{
  "openapi": "3.0.0",
  "info": {
    "title": "AAA Service API",
    "description": "Authentication, Authorization, and Accounting Service with PostgreSQL RBAC",
    "version": "2.0.0",
    "contact": {
      "name": "AAA Service Team",
      "email": "support@example.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "basePath": "/",
  "definitions": {
    "addresses.CreateAddressRequest": {
      "properties": {
        "body": {},
        "context": {
          "additionalProperties": {},
          "type": "object"
        },
        "country": {
          "maxLength": 255,
          "type": "string"
        },
        "district": {
          "maxLength": 255,
          "type": "string"
        },
        "full_address": {
          "maxLength": 1000,
          "type": "string"
        },
        "headers": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object"
        },
        "house": {
          "maxLength": 255,
          "type": "string"
        },
        "landmark": {
          "maxLength": 255,
          "type": "string"
        },
        "operation": {
          "type": "string"
        },
        "pincode": {
          "type": "string"
        },
        "post_office": {
          "maxLength": 255,
          "type": "string"
        },
        "protocol": {
          "type": "string"
        },
        "request_id": {
          "type": "string"
        },
        "state": {
          "maxLength": 255,
          "type": "string"
        },
        "street": {
          "maxLength": 255,
          "type": "string"
        },
        "subdistrict": {
          "maxLength": 255,
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "user_id": {
          "minLength": 1,
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "vtc": {
          "maxLength": 255,
          "type": "string"
        }
      },
      "required": [
        "user_id"
      ],
      "type": "object"
    },
    "addresses.UpdateAddressRequest": {
      "properties": {
        "body": {},
        "context": {
          "additionalProperties": {},
          "type": "object"
        },
        "country": {
          "maxLength": 255,
          "type": "string"
        },
        "district": {
          "maxLength": 255,
          "type": "string"
        },
        "full_address": {
          "maxLength": 1000,
          "type": "string"
        },
        "headers": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object"
        },
        "house": {
          "maxLength": 255,
          "type": "string"
        },
        "id": {
          "minLength": 1,
          "type": "string"
        },
        "landmark": {
          "maxLength": 255,
          "type": "string"
        },
        "operation": {
          "type": "string"
        },
        "pincode": {
          "type": "string"
        },
        "post_office": {
          "maxLength": 255,
          "type": "string"
        },
        "protocol": {
          "type": "string"
        },
        "request_id": {
          "type": "string"
        },
        "state": {
          "maxLength": 255,
          "type": "string"
        },
        "street": {
          "maxLength": 255,
          "type": "string"
        },
        "subdistrict": {
          "maxLength": 255,
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "vtc": {
          "maxLength": 255,
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "contacts.CreateContactRequest": {
      "description": "Request structure for creating a new contact",
      "properties": {
        "user_id": {
          "description": "ID of the user this contact belongs to",
          "example": "USER123456789",
          "minLength": 1,
          "type": "string"
        },
        "type": {
          "description": "Type of contact (e.g., email, phone, address)",
          "example": "email",
          "maxLength": 50,
          "minLength": 1,
          "type": "string"
        },
        "value": {
          "description": "The actual contact value (e.g., email address, phone number)",
          "example": "john.doe@example.com",
          "maxLength": 255,
          "minLength": 1,
          "type": "string"
        },
        "description": {
          "description": "Optional description of the contact",
          "example": "Primary email address",
          "maxLength": 1000,
          "type": "string"
        },
        "is_primary": {
          "description": "Whether this is the primary contact for the user",
          "example": true,
          "type": "boolean"
        },
        "is_active": {
          "description": "Whether this contact is currently active",
          "example": true,
          "type": "boolean"
        },
        "country_code": {
          "description": "Country code for phone numbers",
          "example": "+1",
          "maxLength": 10,
          "type": "string"
        }
      },
      "required": [
        "user_id",
        "type",
        "value"
      ],
      "type": "object"
    },
    "contacts.UpdateContactRequest": {
      "description": "Request structure for updating an existing contact",
      "properties": {
        "type": {
          "description": "Type of contact",
          "example": "email",
          "maxLength": 50,
          "type": "string"
        },
        "value": {
          "description": "The actual contact value",
          "example": "john.doe@example.com",
          "maxLength": 255,
          "type": "string"
        },
        "description": {
          "description": "Optional description of the contact",
          "example": "Primary email address",
          "maxLength": 1000,
          "type": "string"
        },
        "is_primary": {
          "description": "Whether this is the primary contact",
          "example": true,
          "type": "boolean"
        },
        "is_active": {
          "description": "Whether this contact is currently active",
          "example": true,
          "type": "boolean"
        },
        "country_code": {
          "description": "Country code for phone numbers",
          "example": "+1",
          "maxLength": 10,
          "type": "string"
        }
      },
      "type": "object"
    },
    "contacts.ContactResponse": {
      "description": "Contact information in API responses",
      "properties": {
        "id": {
          "description": "Unique identifier for the contact",
          "example": "CONTACT123456789",
          "type": "string"
        },
        "user_id": {
          "description": "ID of the user this contact belongs to",
          "example": "USER123456789",
          "type": "string"
        },
        "type": {
          "description": "Type of contact",
          "example": "email",
          "type": "string"
        },
        "value": {
          "description": "The actual contact value",
          "example": "john.doe@example.com",
          "type": "string"
        },
        "description": {
          "description": "Optional description of the contact",
          "example": "Primary email address",
          "type": "string"
        },
        "is_primary": {
          "description": "Whether this is the primary contact",
          "example": true,
          "type": "boolean"
        },
        "is_active": {
          "description": "Whether this contact is currently active",
          "example": true,
          "type": "boolean"
        },
        "is_verified": {
          "description": "Whether this contact has been verified",
          "example": true,
          "type": "boolean"
        },
        "verified_at": {
          "description": "Timestamp when the contact was verified",
          "example": "2024-01-01T00:00:00Z",
          "type": "string"
        },
        "verified_by": {
          "description": "ID of the user who verified this contact",
          "example": "USER123456789",
          "type": "string"
        },
        "country_code": {
          "description": "Country code for phone numbers",
          "example": "+1",
          "type": "string"
        },
        "created_at": {
          "description": "Timestamp when the contact was created",
          "example": "2024-01-01T00:00:00Z",
          "type": "string"
        },
        "updated_at": {
          "description": "Timestamp when the contact was last updated",
          "example": "2024-01-01T00:00:00Z",
          "type": "string"
        },
        "deleted_at": {
          "description": "Timestamp when the contact was deleted (if applicable)",
          "example": "2024-01-01T00:00:00Z",
          "type": "string"
        }
      },
      "type": "object"
    },
    "contacts.ContactListResponse": {
      "description": "Paginated list of contacts",
      "properties": {
        "contacts": {
          "description": "Array of contact objects",
          "items": {
            "$ref": "#/definitions/contacts.ContactResponse"
          },
          "type": "array"
        },
        "total": {
          "description": "Total number of contacts",
          "example": 100,
          "type": "integer"
        },
        "limit": {
          "description": "Number of contacts per page",
          "example": 20,
          "type": "integer"
        },
        "offset": {
          "description": "Number of contacts skipped",
          "example": 0,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "groups.CreateGroupRequest": {
      "description": "Request structure for creating a new group",
      "properties": {
        "name": {
          "description": "Name of the group",
          "example": "Administrators",
          "maxLength": 100,
          "minLength": 1,
          "type": "string"
        },
        "description": {
          "description": "Optional description of the group",
          "example": "System administrators group",
          "maxLength": 1000,
          "type": "string"
        },
        "organization_id": {
          "description": "ID of the organization this group belongs to",
          "example": "ORG123456789",
          "type": "string"
        },
        "parent_id": {
          "description": "ID of the parent group (if this is a subgroup)",
          "example": "GROUP123456789",
          "type": "string"
        }
      },
      "required": [
        "name",
        "organization_id"
      ],
      "type": "object"
    },
    "groups.UpdateGroupRequest": {
      "description": "Request structure for updating an existing group",
      "properties": {
        "name": {
          "description": "Name of the group",
          "example": "Administrators",
          "maxLength": 100,
          "type": "string"
        },
        "description": {
          "description": "Optional description of the group",
          "example": "System administrators group",
          "maxLength": 1000,
          "type": "string"
        },
        "parent_id": {
          "description": "ID of the parent group",
          "example": "GROUP123456789",
          "type": "string"
        }
      },
      "type": "object"
    },
    "organizations.CreateOrganizationRequest": {
      "description": "Request structure for creating a new organization",
      "properties": {
        "name": {
          "description": "Name of the organization",
          "example": "Acme Corp",
          "maxLength": 255,
          "minLength": 1,
          "type": "string"
        },
        "description": {
          "description": "Optional description of the organization",
          "example": "A leading technology company",
          "maxLength": 1000,
          "type": "string"
        },
        "parent_id": {
          "description": "ID of the parent organization (if this is a subsidiary)",
          "example": "ORG123456789",
          "type": "string"
        },
        "status": {
          "description": "Status of the organization",
          "example": "active",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "organizations.UpdateOrganizationRequest": {
      "description": "Request structure for updating an existing organization",
      "properties": {
        "name": {
          "description": "Name of the organization",
          "example": "Acme Corp",
          "maxLength": 255,
          "type": "string"
        },
        "description": {
          "description": "Optional description of the organization",
          "example": "A leading technology company",
          "maxLength": 1000,
          "type": "string"
        },
        "parent_id": {
          "description": "ID of the parent organization",
          "example": "ORG123456789",
          "type": "string"
        },
        "status": {
          "description": "Status of the organization",
          "example": "active",
          "type": "string"
        }
      },
      "type": "object"
    },
    "principals.CreatePrincipalRequest": {
      "description": "Request structure for creating a new principal",
      "properties": {
        "name": {
          "description": "Name of the principal",
          "example": "John Doe",
          "maxLength": 255,
          "minLength": 1,
          "type": "string"
        },
        "type": {
          "description": "Type of principal (user, service, etc.)",
          "example": "user",
          "type": "string"
        },
        "description": {
          "description": "Optional description of the principal",
          "example": "System user account",
          "maxLength": 1000,
          "type": "string"
        },
        "metadata": {
          "description": "Additional metadata for the principal",
          "additionalProperties": true,
          "type": "object"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "type": "object"
    },
    "principals.UpdatePrincipalRequest": {
      "description": "Request structure for updating an existing principal",
      "properties": {
        "name": {
          "description": "Name of the principal",
          "example": "John Doe",
          "maxLength": 255,
          "type": "string"
        },
        "description": {
          "description": "Optional description of the principal",
          "example": "System user account",
          "maxLength": 1000,
          "type": "string"
        },
        "metadata": {
          "description": "Additional metadata for the principal",
          "additionalProperties": true,
          "type": "object"
        }
      },
      "type": "object"
    },
    "permissions.CreatePermissionRequest": {
      "properties": {
        "actions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "effect": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        }
      },
      "required": [
        "actions",
        "effect",
        "resource"
      ],
      "type": "object"
    },
    "permissions.UpdatePermissionRequest": {
      "properties": {
        "actions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "effect": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "requests.ModuleActionDefinition": {
      "description": "Action definition structure for module registration",
      "properties": {
        "description": {
          "example": "Create a new user",
          "type": "string"
        },
        "name": {
          "example": "create_user",
          "type": "string"
        },
        "resource": {
          "example": "user",
          "type": "string"
        }
      },
      "required": [
        "name",
        "resource"
      ],
      "type": "object"
    },
    "requests.ModuleRegistrationRequest": {
      "description": "Request structure for registering a new module",
      "properties": {
        "actions": {
          "items": {
            "$ref": "#/definitions/requests.ModuleActionDefinition"
          },
          "type": "array"
        },
        "resources": {
          "items": {
            "$ref": "#/definitions/requests.ModuleResourceDefinition"
          },
          "type": "array"
        },
        "roles": {
          "items": {
            "$ref": "#/definitions/requests.ModuleRoleDefinition"
          },
          "type": "array"
        },
        "service_name": {
          "example": "user-service",
          "type": "string"
        },
        "version": {
          "example": "1.0.0",
          "type": "string"
        }
      },
      "required": [
        "service_name",
        "version"
      ],
      "type": "object"
    },
    "requests.ModuleResourceDefinition": {
      "description": "Resource definition structure for module registration",
      "properties": {
        "actions": {
          "example": [
            "[\"create\"",
            " \"read\"",
            " \"update\"",
            " \"delete\"]"
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description": {
          "example": "User resource",
          "type": "string"
        },
        "name": {
          "example": "user",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "requests.ModuleRoleDefinition": {
      "description": "Role definition structure for module registration",
      "properties": {
        "description": {
          "example": "User administrator role",
          "type": "string"
        },
        "name": {
          "example": "user_admin",
          "type": "string"
        },
        "permissions": {
          "example": [
            "[\"user:create\"",
            " \"user:read\"",
            " \"user:update\"",
            " \"user:delete\"]"
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "requests.RefreshTokenRequest": {
      "properties": {
        "mpin": {
          "type": "string"
        },
        "refresh_token": {
          "type": "string"
        }
      },
      "required": [
        "mpin",
        "refresh_token"
      ],
      "type": "object"
    },
    "requests.SetMPinRequest": {
      "properties": {
        "mpin": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "required": [
        "mpin",
        "password"
      ],
      "type": "object"
    },
    "requests.UpdateUserRequest": {
      "description": "Request structure for updating user information",
      "properties": {
        "country_code": {
          "example": "US",
          "type": "string"
        },
        "phone_number": {
          "example": "+1234567890",
          "type": "string"
        },
        "username": {
          "example": "john_doe",
          "type": "string"
        }
      },
      "type": "object"
    },
    "responses.ErrorResponse": {
      "properties": {
        "code": {
          "type": "integer"
        },
        "details": {
          "additionalProperties": true,
          "type": "object"
        },
        "error": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "request_id": {
          "type": "string"
        },
        "timestamp": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "responses.ErrorResponseSwagger": {
      "description": "Standard error response structure",
      "properties": {
        "code": {
          "example": 400,
          "type": "integer"
        },
        "details": {
          "additionalProperties": true,
          "type": "object"
        },
        "error": {
          "example": "VALIDATION_ERROR",
          "type": "string"
        },
        "message": {
          "example": "Invalid input data",
          "type": "string"
        },
        "request_id": {
          "example": "req-123456789",
          "type": "string"
        },
        "success": {
          "example": false,
          "type": "boolean"
        },
        "timestamp": {
          "example": "2024-01-01T00:00:00Z",
          "type": "string"
        }
      },
      "type": "object"
    },
    "responses.HealthCheckData": {
      "description": "Health check data structure",
      "properties": {
        "service": {
          "example": "aaa-service",
          "type": "string"
        },
        "status": {
          "example": "healthy",
          "type": "string"
        },
        "version": {
          "example": "2.0",
          "type": "string"
        }
      },
      "type": "object"
    },
    "responses.HealthCheckResponse": {
      "description": "Health check response structure",
      "properties": {
        "data": {
          "$ref": "#/definitions/responses.HealthCheckData"
        },
        "message": {
          "example": "Service is healthy",
          "type": "string"
        },
        "request_id": {
          "example": "req-123456789",
          "type": "string"
        },
        "success": {
          "example": true,
          "type": "boolean"
        },
        "timestamp": {
          "example": "2024-01-01T00:00:00Z",
          "type": "string"
        }
      },
      "type": "object"
    },
    "responses.LoginResponseData": {
      "description": "Login response data containing tokens and user info",
      "properties": {
        "access_token": {
          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
          "type": "string"
        },
        "expires_in": {
          "example": 86400,
          "type": "integer"
        },
        "refresh_token": {
          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
          "type": "string"
        },
        "token_type": {
          "example": "Bearer",
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/responses.UserInfo"
        }
      },
      "type": "object"
    },
    "responses.LoginSuccessResponse": {
      "description": "Successful login response with tokens and user info",
      "properties": {
        "data": {
          "$ref": "#/definitions/responses.LoginResponseData"
        },
        "message": {
          "example": "Login successful",
          "type": "string"
        },
        "request_id": {
          "example": "req-123456789",
          "type": "string"
        },
        "success": {
          "example": true,
          "type": "boolean"
        },
        "timestamp": {
          "example": "2024-01-01T00:00:00Z",
          "type": "string"
        }
      },
      "type": "object"
    },
    "responses.LogoutSuccessResponse": {
      "description": "Successful logout response",
      "properties": {
        "message": {
          "example": "Logout successful",
          "type": "string"
        },
        "request_id": {
          "example": "req-123456789",
          "type": "string"
        },
        "success": {
          "example": true,
          "type": "boolean"
        },
        "timestamp": {
          "example": "2024-01-01T00:00:00Z",
          "type": "string"
        }
      },
      "type": "object"
    },
    "responses.ModuleDetailData": {
      "description": "Module detail data structure",
      "properties": {
        "module": {
          "$ref": "#/definitions/responses.ModuleInfo"
        }
      },
      "type": "object"
    },
    "responses.ModuleDetailResponse": {
      "description": "Module detail response structure",
      "properties": {
        "data": {
          "$ref": "#/definitions/responses.ModuleDetailData"
        },
        "message": {
          "example": "Module details retrieved successfully",
          "type": "string"
        },
        "request_id": {
          "example": "req-123456789",
          "type": "string"
        },
        "success": {
          "example": true,
          "type": "boolean"
        },
        "timestamp": {
          "example": "2024-01-01T00:00:00Z",
          "type": "string"
        }
      },
      "type": "object"
    },
    "responses.ModuleInfo": {
      "description": "Module information structure",
      "properties": {
        "health": {
          "example": "healthy",
          "type": "string"
        },
        "last_seen": {
          "example": "2024-01-01T00:00:00Z",
          "type": "string"
        },
        "registered_at": {
          "example": "2024-01-01T00:00:00Z",
          "type": "string"
        },
        "service_name": {
          "example": "user-service",
          "type": "string"
        },
        "status": {
          "example": "active",
          "type": "string"
        },
        "version": {
          "example": "1.0.0",
          "type": "string"
        }
      },
      "type": "object"
    },
    "responses.ModuleListData": {
      "description": "Module list data structure",
      "properties": {
        "modules": {
          "items": {
            "$ref": "#/definitions/responses.ModuleInfo"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "responses.ModuleListResponse": {
      "description": "Module list response structure",
      "properties": {
        "data": {
          "$ref": "#/definitions/responses.ModuleListData"
        },
        "message": {
          "example": "Modules retrieved successfully",
          "type": "string"
        },
        "request_id": {
          "example": "req-123456789",
          "type": "string"
        },
        "success": {
          "example": true,
          "type": "boolean"
        },
        "timestamp": {
          "example": "2024-01-01T00:00:00Z",
          "type": "string"
        }
      },
      "type": "object"
    },
    "responses.PaginationInfo": {
      "description": "Pagination information structure",
      "properties": {
        "page": {
          "example": 1,
          "type": "integer"
        },
        "per_page": {
          "example": 20,
          "type": "integer"
        },
        "total": {
          "example": 100,
          "type": "integer"
        },
        "total_pages": {
          "example": 5,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "responses.RefreshTokenResponseData": {
      "description": "Refresh token response data",
      "properties": {
        "access_token": {
          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
          "type": "string"
        },
        "expires_in": {
          "example": 86400,
          "type": "integer"
        },
        "refresh_token": {
          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
          "type": "string"
        },
        "token_type": {
          "example": "Bearer",
          "type": "string"
        }
      },
      "type": "object"
    },
    "responses.RefreshTokenSuccessResponse": {
      "description": "Successful token refresh response",
      "properties": {
        "data": {
          "$ref": "#/definitions/responses.RefreshTokenResponseData"
        },
        "message": {
          "example": "Token refreshed successfully",
          "type": "string"
        },
        "request_id": {
          "example": "req-123456789",
          "type": "string"
        },
        "success": {
          "example": true,
          "type": "boolean"
        },
        "timestamp": {
          "example": "2024-01-01T00:00:00Z",
          "type": "string"
        }
      },
      "type": "object"
    },
    "responses.RegisterResponseData": {
      "description": "Registration response data containing user info",
      "properties": {
        "user": {
          "$ref": "#/definitions/responses.UserInfoSwagger"
        }
      },
      "type": "object"
    },
    "responses.RegisterSuccessResponse": {
      "description": "Successful registration response with user info",
      "properties": {
        "data": {
          "$ref": "#/definitions/responses.RegisterResponseData"
        },
        "message": {
          "example": "User registered successfully",
          "type": "string"
        },
        "request_id": {
          "example": "req-123456789",
          "type": "string"
        },
        "success": {
          "example": true,
          "type": "boolean"
        },
        "timestamp": {
          "example": "2024-01-01T00:00:00Z",
          "type": "string"
        }
      },
      "type": "object"
    },
    "responses.UserDetailData": {
      "description": "Detailed user data structure",
      "properties": {
        "user": {
          "$ref": "#/definitions/responses.UserInfoSwagger"
        }
      },
      "type": "object"
    },
    "responses.UserDetailResponse": {
      "description": "Detailed user response structure",
      "properties": {
        "data": {
          "$ref": "#/definitions/responses.UserDetailData"
        },
        "message": {
          "example": "User retrieved successfully",
          "type": "string"
        },
        "request_id": {
          "example": "req-123456789",
          "type": "string"
        },
        "success": {
          "example": true,
          "type": "boolean"
        },
        "timestamp": {
          "example": "2024-01-01T00:00:00Z",
          "type": "string"
        }
      },
      "type": "object"
    },
    "responses.UserInfo": {
      "properties": {
        "country_code": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "is_validated": {
          "type": "boolean"
        },
        "phone_number": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "responses.UserInfoSwagger": {
      "description": "User information structure",
      "properties": {
        "country_code": {
          "example": "US",
          "type": "string"
        },
        "id": {
          "example": "USER123456789",
          "type": "string"
        },
        "is_validated": {
          "example": true,
          "type": "boolean"
        },
        "phone_number": {
          "example": "+1234567890",
          "type": "string"
        },
        "username": {
          "example": "john_doe",
          "type": "string"
        }
      },
      "type": "object"
    },
    "responses.UsersListData": {
      "description": "Users list data structure",
      "properties": {
        "users": {
          "items": {
            "$ref": "#/definitions/responses.UserInfoSwagger"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "responses.UsersListResponse": {
      "description": "Users list response with pagination",
      "properties": {
        "data": {
          "$ref": "#/definitions/responses.UsersListData"
        },
        "message": {
          "example": "Users retrieved successfully",
          "type": "string"
        },
        "pagination": {
          "$ref": "#/definitions/responses.PaginationInfo"
        },
        "request_id": {
          "example": "req-123456789",
          "type": "string"
        },
        "success": {
          "example": true,
          "type": "boolean"
        },
        "timestamp": {
          "example": "2024-01-01T00:00:00Z",
          "type": "string"
        }
      },
      "type": "object"
    },
    "roles.CreateRoleRequest": {
      "properties": {
        "body": {},
        "context": {
          "additionalProperties": {},
          "type": "object"
        },
        "description": {
          "maxLength": 500,
          "type": "string"
        },
        "headers": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object"
        },
        "name": {
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "operation": {
          "type": "string"
        },
        "permissions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "protocol": {
          "type": "string"
        },
        "request_id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "roles.UpdateRoleRequest": {
      "properties": {
        "body": {},
        "context": {
          "additionalProperties": {},
          "type": "object"
        },
        "description": {
          "maxLength": 500,
          "type": "string"
        },
        "headers": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object"
        },
        "name": {
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "operation": {
          "type": "string"
        },
        "permissions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "protocol": {
          "type": "string"
        },
        "request_id": {
          "type": "string"
        },
        "role_id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "role_id"
      ],
      "type": "object"
    },
    "services.LoginRequest": {
      "properties": {
        "country_code": {
          "type": "string"
        },
        "mfa_code": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone_number": {
          "type": "string"
        }
      },
      "required": [
        "country_code",
        "password",
        "phone_number"
      ],
      "type": "object"
    },
    "services.RegisterRequest": {
      "properties": {
        "country_code": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "full_name": {
          "maxLength": 100,
          "minLength": 1,
          "type": "string"
        },
        "password": {
          "minLength": 8,
          "type": "string"
        },
        "phone_number": {
          "type": "string"
        },
        "role_ids": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "username": {
          "maxLength": 50,
          "minLength": 3,
          "type": "string"
        }
      },
      "required": [
        "country_code",
        "password",
        "phone_number"
      ],
      "type": "object"
    },
    "users.CreateUserRequest": {
      "properties": {
        "aadhaar_number": {
          "type": "string"
        },
        "care_of": {
          "type": "string"
        },
        "country_code": {
          "type": "string"
        },
        "date_of_birth": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "password": {
          "maxLength": 128,
          "minLength": 8,
          "type": "string"
        },
        "phone_number": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "year_of_birth": {
          "type": "string"
        }
      },
      "required": [
        "country_code",
        "password",
        "phone_number"
      ],
      "type": "object"
    },
    "users.UpdateUserRequest": {
      "properties": {
        "care_of": {
          "type": "string"
        },
        "country_code": {
          "type": "string"
        },
        "date_of_birth": {
          "type": "string"
        },
        "email_hash": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "mobile_number": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "photo": {
          "type": "string"
        },
        "share_code": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "tokens": {
          "type": "integer"
        },
        "year_of_birth": {
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "paths": {
    "/api/v2/addresses": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a new address for a user",
        "parameters": [
          {
            "description": "Address creation data",
            "in": "body",
            "name": "address",
            "required": true,
            "schema": {
              "$ref": "#/definitions/addresses.CreateAddressRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          }
        },
        "summary": "Create a new address",
        "tags": [
          "addresses"
        ]
      }
    },
    "/api/v2/addresses/{id}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete an address by its unique identifier",
        "parameters": [
          {
            "description": "Address ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          }
        },
        "summary": "Delete address",
        "tags": [
          "addresses"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Retrieve an address by its unique identifier",
        "parameters": [
          {
            "description": "Address ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          }
        },
        "summary": "Get address by ID",
        "tags": [
          "addresses"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update an existing address",
        "parameters": [
          {
            "description": "Address ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Address update data",
            "in": "body",
            "name": "address",
            "required": true,
            "schema": {
              "$ref": "#/definitions/addresses.UpdateAddressRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          }
        },
        "summary": "Update address",
        "tags": [
          "addresses"
        ]
      }
    },
    "/api/v2/addresses/search": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Search for addresses based on query parameters",
        "parameters": [
          {
            "description": "Search query",
            "in": "query",
            "name": "q",
            "required": true,
            "type": "string"
          },
          {
            "default": 10,
            "description": "Number of addresses to return",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "description": "Number of addresses to skip",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          }
        },
        "summary": "Search addresses",
        "tags": [
          "addresses"
        ]
      }
    },
    "/api/v2/admin/audit": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Retrieve audit logs with optional filtering",
        "parameters": [
          {
            "description": "Filter by user ID",
            "in": "query",
            "name": "user_id",
            "type": "string"
          },
          {
            "description": "Filter by action type",
            "in": "query",
            "name": "action",
            "type": "string"
          },
          {
            "description": "Filter by resource type",
            "in": "query",
            "name": "resource",
            "type": "string"
          },
          {
            "description": "Filter by start date (RFC3339)",
            "in": "query",
            "name": "start_date",
            "type": "string"
          },
          {
            "description": "Filter by end date (RFC3339)",
            "in": "query",
            "name": "end_date",
            "type": "string"
          },
          {
            "default": 100,
            "description": "Number of logs to return",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "description": "Number of logs to skip",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          }
        },
        "summary": "Audit logs",
        "tags": [
          "admin"
        ]
      }
    },
    "/api/v2/admin/health/detailed": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get detailed health status of all system components",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          }
        },
        "summary": "Detailed health check",
        "tags": [
          "admin"
        ]
      }
    },
    "/api/v2/admin/maintenance": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get current maintenance mode status and configuration",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          }
        },
        "summary": "Get maintenance status",
        "tags": [
          "admin"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Enable or disable system maintenance mode",
        "parameters": [
          {
            "description": "Maintenance mode configuration",
            "in": "body",
            "name": "maintenance",
            "required": true,
            "schema": {
              "properties": {
                "allow_admin": {
                  "type": "boolean"
                },
                "allow_read": {
                  "type": "boolean"
                },
                "enabled": {
                  "type": "boolean"
                },
                "end_time": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "reason": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          }
        },
        "summary": "Toggle maintenance mode",
        "tags": [
          "admin"
        ]
      }
    },
    "/api/v2/admin/maintenance/message": {
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Update the maintenance mode message",
        "parameters": [
          {
            "description": "New maintenance message",
            "in": "body",
            "name": "message",
            "required": true,
            "schema": {
              "properties": {
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          }
        },
        "summary": "Update maintenance message",
        "tags": [
          "admin"
        ]
      }
    },
    "/api/v2/admin/metrics": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get comprehensive system and application metrics",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          }
        },
        "summary": "System metrics",
        "tags": [
          "admin"
        ]
      }
    },
    "/api/v2/admin/system": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get comprehensive system information including service details, runtime info, and configuration",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          }
        },
        "summary": "System information",
        "tags": [
          "admin"
        ]
      }
    },
    "/api/v2/auth/login": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Authenticate user with username and password and MFA",
        "parameters": [
          {
            "description": "Login credentials",
            "in": "body",
            "name": "credentials",
            "required": true,
            "schema": {
              "$ref": "#/definitions/services.LoginRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.LoginSuccessResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          }
        },
        "summary": "User login (V2)",
        "tags": [
          "authentication"
        ]
      }
    },
    "/api/v2/auth/logout": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Logout user and invalidate tokens",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.LogoutSuccessResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "User logout (V2)",
        "tags": [
          "authentication"
        ]
      }
    },
    "/api/v2/auth/refresh": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Refresh access token using refresh token",
        "parameters": [
          {
            "description": "Refresh token",
            "in": "body",
            "name": "token",
            "required": true,
            "schema": {
              "$ref": "#/definitions/requests.RefreshTokenRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.RefreshTokenSuccessResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          }
        },
        "summary": "Refresh access token (V2)",
        "tags": [
          "authentication"
        ]
      }
    },
    "/api/v2/auth/register": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Register a new user account with enhanced validation",
        "parameters": [
          {
            "description": "Registration data",
            "in": "body",
            "name": "user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/services.RegisterRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/responses.RegisterSuccessResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          }
        },
        "summary": "User registration (V2)",
        "tags": [
          "authentication"
        ]
      }
    },
    "/api/v2/auth/set-mpin": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Set or update mPin for secure refresh token validation",
        "parameters": [
          {
            "description": "Set mPin request",
            "in": "body",
            "name": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/requests.SetMPinRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Set or update user's mPin",
        "tags": [
          "auth"
        ]
      }
    },
    "/api/v2/health": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Basic health check for the AAA service",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.HealthCheckResponse"
            }
          }
        },
        "summary": "Health check (V2)",
        "tags": [
          "health"
        ]
      }
    },
    "/api/v2/modules": {
      "get": {
        "description": "Get a list of all registered modules",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.ModuleListResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          }
        },
        "summary": "List all registered modules",
        "tags": [
          "modules"
        ]
      }
    },
    "/api/v2/modules/{service_name}": {
      "get": {
        "description": "Get detailed information about a registered module",
        "parameters": [
          {
            "description": "Service name",
            "in": "path",
            "name": "service_name",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.ModuleDetailResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          }
        },
        "summary": "Get module information",
        "tags": [
          "modules"
        ]
      }
    },
    "/api/v2/modules/{service_name}/health": {
      "get": {
        "description": "Check if a module is healthy and operational",
        "parameters": [
          {
            "description": "Service name",
            "in": "path",
            "name": "service_name",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          }
        },
        "summary": "Check module health",
        "tags": [
          "modules"
        ]
      }
    },
    "/api/v2/modules/register": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Register a complete module with actions, roles, resources, and permissions",
        "parameters": [
          {
            "description": "Module registration request",
            "in": "body",
            "name": "module",
            "required": true,
            "schema": {
              "$ref": "#/definitions/requests.ModuleRegistrationRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/responses.ModuleDetailResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          }
        },
        "summary": "Register a new module",
        "tags": [
          "modules"
        ]
      }
    },
    "/api/v2/permissions": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get a paginated list of permissions",
        "parameters": [
          {
            "default": 10,
            "description": "Number of permissions to return",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "description": "Number of permissions to skip",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          }
        },
        "summary": "List permissions",
        "tags": [
          "permissions"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a new permission with resource, effect, and actions",
        "parameters": [
          {
            "description": "Permission creation data",
            "in": "body",
            "name": "permission",
            "required": true,
            "schema": {
              "$ref": "#/definitions/permissions.CreatePermissionRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          }
        },
        "summary": "Create a new permission",
        "tags": [
          "permissions"
        ]
      }
    },
    "/api/v2/permissions/{id}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete a permission by its unique identifier",
        "parameters": [
          {
            "description": "Permission ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          }
        },
        "summary": "Delete permission",
        "tags": [
          "permissions"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Retrieve a permission by its unique identifier",
        "parameters": [
          {
            "description": "Permission ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          }
        },
        "summary": "Get permission by ID",
        "tags": [
          "permissions"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update an existing permission",
        "parameters": [
          {
            "description": "Permission ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Permission update data",
            "in": "body",
            "name": "permission",
            "required": true,
            "schema": {
              "$ref": "#/definitions/permissions.UpdatePermissionRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          }
        },
        "summary": "Update permission",
        "tags": [
          "permissions"
        ]
      }
    },
    "/api/v2/permissions/evaluate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Check if a user has permission to perform an action on a resource",
        "parameters": [
          {
            "description": "Permission evaluation data",
            "in": "body",
            "name": "evaluation",
            "required": true,
            "schema": {
              "properties": {
                "action": {
                  "type": "string"
                },
                "resource": {
                  "type": "string"
                },
                "user_id": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          }
        },
        "summary": "Evaluate permission",
        "tags": [
          "permissions"
        ]
      }
    },
    "/api/v2/permissions/temporary": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Grant temporary permission to a user for specific actions on a resource",
        "parameters": [
          {
            "description": "Temporary permission data",
            "in": "body",
            "name": "permission",
            "required": true,
            "schema": {
              "properties": {
                "actions": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "expires_at": {
                  "type": "string"
                },
                "resource": {
                  "type": "string"
                },
                "user_id": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          }
        },
        "summary": "Grant temporary permission",
        "tags": [
          "permissions"
        ]
      }
    },
    "/api/v2/roles": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get a paginated list of roles",
        "parameters": [
          {
            "default": 10,
            "description": "Number of roles to return",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "description": "Number of roles to skip",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          }
        },
        "summary": "List roles",
        "tags": [
          "roles"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a new role with the provided information",
        "parameters": [
          {
            "description": "Role creation data",
            "in": "body",
            "name": "role",
            "required": true,
            "schema": {
              "$ref": "#/definitions/roles.CreateRoleRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          }
        },
        "summary": "Create a new role",
        "tags": [
          "roles"
        ]
      }
    },
    "/api/v2/roles/{id}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete a role by its unique identifier",
        "parameters": [
          {
            "description": "Role ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          }
        },
        "summary": "Delete role",
        "tags": [
          "roles"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Retrieve a role by its unique identifier",
        "parameters": [
          {
            "description": "Role ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          }
        },
        "summary": "Get role by ID",
        "tags": [
          "roles"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update an existing role's information",
        "parameters": [
          {
            "description": "Role ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Role update data",
            "in": "body",
            "name": "role",
            "required": true,
            "schema": {
              "$ref": "#/definitions/roles.UpdateRoleRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          }
        },
        "summary": "Update role",
        "tags": [
          "roles"
        ]
      }
    },
    "/api/v2/users": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get a list of all users with pagination",
        "parameters": [
          {
            "default": 1,
            "description": "Page number",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "default": 10,
            "description": "Items per page",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.UsersListResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "List all users (V2)",
        "tags": [
          "users"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a new user with the provided information",
        "parameters": [
          {
            "description": "User creation data",
            "in": "body",
            "name": "user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/users.CreateUserRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/responses.UserDetailResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        },
        "summary": "Create a new user",
        "tags": [
          "users"
        ]
      }
    },
    "/api/v2/users/{id}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete a user by their unique identifier",
        "parameters": [
          {
            "description": "User ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        },
        "summary": "Delete user",
        "tags": [
          "users"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get detailed information about a specific user",
        "parameters": [
          {
            "description": "User ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.UserDetailResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "Get user by ID (V2)",
        "tags": [
          "users"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update user information",
        "parameters": [
          {
            "description": "User ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "User update data",
            "in": "body",
            "name": "user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/requests.UpdateUserRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.UserDetailResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "Update user (V2)",
        "tags": [
          "users"
        ]
      }
    },
    "/api/v2/users/{id}/roles/{roleId}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Remove a role from a specific user",
        "parameters": [
          {
            "description": "User ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Role ID",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        },
        "summary": "Remove role from user",
        "tags": [
          "users"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Assign a role to a specific user",
        "parameters": [
          {
            "description": "User ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Role ID",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          }
        },
        "summary": "Assign role to user",
        "tags": [
          "users"
        ]
      }
    },
    "/api/v2/users/{id}/validate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Validate a user account",
        "parameters": [
          {
            "description": "User ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          }
        },
        "summary": "Validate user",
        "tags": [
          "users"
        ]
      }
    },
    "/api/v2/users/search": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Search for users based on query parameters",
        "parameters": [
          {
            "description": "Search query",
            "in": "query",
            "name": "q",
            "required": true,
            "type": "string"
          },
          {
            "default": 10,
            "description": "Number of users to return",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "description": "Number of users to skip",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          }
        },
        "summary": "Search users",
        "tags": [
          "users"
        ]
      }
    },
    "/api/v2/contacts": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a new contact for a user",
        "parameters": [
          {
            "description": "Contact creation data",
            "in": "body",
            "name": "contact",
            "required": true,
            "schema": {
              "$ref": "#/definitions/contacts.CreateContactRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/contacts.ContactResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "Create a new contact",
        "tags": [
          "contacts"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get a list of all contacts with pagination",
        "parameters": [
          {
            "default": 1,
            "description": "Page number",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "default": 10,
            "description": "Items per page",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/contacts.ContactListResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "List all contacts",
        "tags": [
          "contacts"
        ]
      }
    },
    "/api/v2/contacts/{id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get detailed information about a specific contact",
        "parameters": [
          {
            "description": "Contact ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/contacts.ContactResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "Get contact by ID",
        "tags": [
          "contacts"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update contact information",
        "parameters": [
          {
            "description": "Contact ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Contact update data",
            "in": "body",
            "name": "contact",
            "required": true,
            "schema": {
              "$ref": "#/definitions/contacts.UpdateContactRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/contacts.ContactResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "Update contact",
        "tags": [
          "contacts"
        ]
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete a contact by its unique identifier",
        "parameters": [
          {
            "description": "Contact ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "Delete contact",
        "tags": [
          "contacts"
        ]
      }
    },
    "/api/v2/contacts/user/{userID}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get all contacts for a specific user",
        "parameters": [
          {
            "description": "User ID",
            "in": "path",
            "name": "userID",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/contacts.ContactListResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponseSwagger"
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "Get contacts by user",
        "tags": [
          "contacts"
        ]
      }
    },
    "/health": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get basic service health status",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          }
        },
        "summary": "Basic health check",
        "tags": [
          "health"
        ]
      }
    },
    "/live": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Check if service is alive",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          }
        },
        "summary": "Liveness check",
        "tags": [
          "health"
        ]
      }
    },
    "/ready": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Check if service is ready to accept requests",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          }
        },
        "summary": "Readiness check",
        "tags": [
          "health"
        ]
      }
    }
  },
  "securityDefinitions": {
    "BearerAuth": {
      "description": "Type \"Bearer\" followed by a space and JWT token.",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "swagger": "2.0"
}

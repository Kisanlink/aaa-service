basePath: /
definitions:
  actions.ActionListResponse:
    properties:
      actions:
        items:
          $ref: '#/definitions/actions.ActionResponse'
        type: array
      limit:
        type: integer
      offset:
        type: integer
      total:
        type: integer
    type: object
  actions.ActionResponse:
    properties:
      category:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      is_static:
        type: boolean
      metadata:
        type: string
      name:
        type: string
      service_id:
        type: string
      updated_at:
        type: string
    type: object
  actions.CreateActionRequest:
    properties:
      category:
        maxLength: 50
        minLength: 1
        type: string
      description:
        maxLength: 1000
        type: string
      is_active:
        type: boolean
      is_static:
        type: boolean
      metadata:
        type: string
      name:
        maxLength: 100
        minLength: 1
        type: string
      service_id:
        maxLength: 255
        type: string
    required:
    - category
    - name
    type: object
  actions.UpdateActionRequest:
    properties:
      category:
        maxLength: 50
        minLength: 1
        type: string
      description:
        maxLength: 1000
        type: string
      is_active:
        type: boolean
      is_static:
        type: boolean
      metadata:
        type: string
      name:
        maxLength: 100
        minLength: 1
        type: string
      service_id:
        maxLength: 255
        type: string
    type: object
  addresses.CreateAddressRequest:
    properties:
      body: {}
      context:
        additionalProperties: {}
        type: object
      country:
        maxLength: 255
        type: string
      district:
        maxLength: 255
        type: string
      full_address:
        maxLength: 1000
        type: string
      headers:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      house:
        maxLength: 255
        type: string
      landmark:
        maxLength: 255
        type: string
      operation:
        type: string
      pincode:
        type: string
      post_office:
        maxLength: 255
        type: string
      protocol:
        type: string
      request_id:
        type: string
      state:
        maxLength: 255
        type: string
      street:
        maxLength: 255
        type: string
      subdistrict:
        maxLength: 255
        type: string
      type:
        type: string
      user_id:
        minLength: 1
        type: string
      version:
        type: string
      vtc:
        maxLength: 255
        type: string
    required:
    - user_id
    type: object
  addresses.UpdateAddressRequest:
    properties:
      body: {}
      context:
        additionalProperties: {}
        type: object
      country:
        maxLength: 255
        type: string
      district:
        maxLength: 255
        type: string
      full_address:
        maxLength: 1000
        type: string
      headers:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      house:
        maxLength: 255
        type: string
      id:
        minLength: 1
        type: string
      landmark:
        maxLength: 255
        type: string
      operation:
        type: string
      pincode:
        type: string
      post_office:
        maxLength: 255
        type: string
      protocol:
        type: string
      request_id:
        type: string
      state:
        maxLength: 255
        type: string
      street:
        maxLength: 255
        type: string
      subdistrict:
        maxLength: 255
        type: string
      type:
        type: string
      version:
        type: string
      vtc:
        maxLength: 255
        type: string
    required:
    - id
    type: object
  contacts.ContactListResponse:
    properties:
      contacts:
        items:
          $ref: '#/definitions/contacts.ContactResponse'
        type: array
      limit:
        type: integer
      offset:
        type: integer
      total:
        type: integer
    type: object
  contacts.ContactResponse:
    properties:
      country_code:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      is_primary:
        type: boolean
      is_verified:
        type: boolean
      type:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
      value:
        type: string
      verified_at:
        type: string
      verified_by:
        type: string
    type: object
  contacts.CreateContactRequest:
    properties:
      country_code:
        maxLength: 10
        type: string
      description:
        maxLength: 1000
        type: string
      is_active:
        type: boolean
      is_primary:
        type: boolean
      type:
        maxLength: 50
        minLength: 1
        type: string
      user_id:
        type: string
      value:
        maxLength: 255
        minLength: 1
        type: string
    required:
    - type
    - user_id
    - value
    type: object
  contacts.UpdateContactRequest:
    properties:
      country_code:
        maxLength: 10
        type: string
      description:
        maxLength: 1000
        type: string
      is_active:
        type: boolean
      is_primary:
        type: boolean
      is_verified:
        type: boolean
      type:
        maxLength: 50
        minLength: 1
        type: string
      value:
        maxLength: 255
        minLength: 1
        type: string
      verified_by:
        maxLength: 255
        type: string
    type: object
  github_com_Kisanlink_aaa-service_internal_entities_requests_role_assignments.ResourceActionAssignment:
    properties:
      actions:
        example:
        - read
        - write
        items:
          type: string
        minItems: 1
        type: array
      resource_id:
        example: USR_abc123
        type: string
      resource_type:
        example: aaa/user
        maxLength: 100
        minLength: 1
        type: string
    required:
    - actions
    - resource_id
    - resource_type
    type: object
  groups.GroupResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      organization_id:
        type: string
      parent_id:
        type: string
      updated_at:
        type: string
    type: object
  groups.GroupRoleDetail:
    properties:
      assigned_by:
        type: string
      ends_at:
        type: string
      group_id:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      organization_id:
        type: string
      role:
        $ref: '#/definitions/groups.RoleDetail'
      role_id:
        type: string
      starts_at:
        type: string
    type: object
  groups.RoleDetail:
    properties:
      description:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      name:
        type: string
    type: object
  organizations.AssignRoleToGroupRequest:
    description: Request body for assigning a role to a group in an organization
    properties:
      ends_at:
        description: Optional role assignment end time
        example: "2024-12-31T23:59:59Z"
        type: string
      role_id:
        description: Role ID to assign
        example: ROLE00000001
        type: string
      starts_at:
        description: Optional role assignment start time
        example: "2024-01-01T00:00:00Z"
        type: string
    required:
    - role_id
    type: object
  organizations.AssignUserToGroupRequest:
    description: Request body for adding a user to a group in an organization
    properties:
      ends_at:
        description: Optional membership end time
        example: "2024-12-31T23:59:59Z"
        type: string
      principal_id:
        description: Principal ID (user or service)
        example: USER00000001
        type: string
      principal_type:
        description: 'Principal type: user or service'
        enum:
        - user
        - service
        example: user
        type: string
      starts_at:
        description: Optional membership start time
        example: "2024-01-01T00:00:00Z"
        type: string
    required:
    - principal_id
    - principal_type
    type: object
  organizations.CreateOrganizationGroupRequest:
    description: Request body for creating a group in an organization
    properties:
      description:
        description: Group description
        example: Software engineering team members
        maxLength: 1000
        type: string
      name:
        description: Group name
        example: Engineering Team
        maxLength: 100
        minLength: 1
        type: string
      parent_id:
        description: Optional parent group ID
        example: GRP1234567890123456789
        type: string
    required:
    - name
    type: object
  organizations.CreateOrganizationRequest:
    description: Request body for creating a new organization
    properties:
      description:
        description: Organization description
        example: Leading provider of innovative solutions
        maxLength: 1000
        type: string
      name:
        description: Organization name
        example: Acme Corporation
        maxLength: 100
        minLength: 1
        type: string
      parent_id:
        description: Optional parent organization ID
        example: ORGN00000001
        type: string
    required:
    - name
    type: object
  organizations.EffectiveRoleResponse:
    properties:
      is_active:
        type: boolean
      role:
        $ref: '#/definitions/roles.RoleResponse'
      source:
        description: '"direct", "group_direct", "group_inherited"'
        type: string
      source_group:
        $ref: '#/definitions/organizations.OrganizationGroupResponse'
    type: object
  organizations.GroupHierarchyNode:
    properties:
      children:
        items:
          $ref: '#/definitions/organizations.GroupHierarchyNode'
        type: array
      group:
        $ref: '#/definitions/groups.GroupResponse'
      roles:
        items:
          $ref: '#/definitions/groups.GroupRoleDetail'
        type: array
    type: object
  organizations.OrganizationGroupListResponse:
    properties:
      groups:
        items:
          $ref: '#/definitions/organizations.OrganizationGroupResponse'
        type: array
      organization_id:
        type: string
      page:
        type: integer
      page_size:
        type: integer
      total_count:
        type: integer
    type: object
  organizations.OrganizationGroupMemberResponse:
    properties:
      added_by:
        $ref: '#/definitions/users.UserResponse'
      created_at:
        type: string
      ends_at:
        type: string
      group_id:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      principal_type:
        type: string
      starts_at:
        type: string
      user:
        $ref: '#/definitions/users.UserResponse'
    type: object
  organizations.OrganizationGroupMembersResponse:
    properties:
      group_id:
        type: string
      members:
        items:
          $ref: '#/definitions/organizations.OrganizationGroupMemberResponse'
        type: array
      organization_id:
        type: string
      page:
        type: integer
      page_size:
        type: integer
      total_count:
        type: integer
    type: object
  organizations.OrganizationGroupResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      organization_id:
        type: string
      parent_id:
        type: string
      updated_at:
        type: string
    type: object
  organizations.OrganizationGroupRoleResponse:
    properties:
      assigned_by:
        $ref: '#/definitions/users.UserResponse'
      created_at:
        type: string
      ends_at:
        type: string
      group_id:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      organization_id:
        type: string
      role:
        $ref: '#/definitions/groups.RoleDetail'
      role_id:
        type: string
      starts_at:
        type: string
    type: object
  organizations.OrganizationGroupRolesResponse:
    properties:
      group_id:
        type: string
      organization_id:
        type: string
      page:
        type: integer
      page_size:
        type: integer
      roles:
        items:
          $ref: '#/definitions/organizations.OrganizationGroupRoleResponse'
        type: array
      total_count:
        type: integer
    type: object
  organizations.OrganizationHierarchyResponse:
    properties:
      children:
        items:
          $ref: '#/definitions/organizations.OrganizationResponse'
        type: array
      groups:
        items:
          $ref: '#/definitions/organizations.GroupHierarchyNode'
        type: array
      organization:
        $ref: '#/definitions/organizations.OrganizationResponse'
      parents:
        items:
          $ref: '#/definitions/organizations.OrganizationResponse'
        type: array
    type: object
  organizations.OrganizationResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      parent_id:
        type: string
      updated_at:
        type: string
    type: object
  organizations.OrganizationStatsResponse:
    properties:
      child_count:
        type: integer
      group_count:
        type: integer
      organization_id:
        type: string
      user_count:
        type: integer
    type: object
  organizations.UpdateOrganizationGroupRequest:
    description: Request body for updating a group in an organization (all fields
      optional)
    properties:
      description:
        description: Group description
        example: Updated team description
        maxLength: 1000
        type: string
      is_active:
        description: Whether group is active
        example: true
        type: boolean
      name:
        description: Group name
        example: Updated Team Name
        maxLength: 100
        minLength: 1
        type: string
      parent_id:
        description: Parent group ID
        example: GRP9876543210987654321
        type: string
    type: object
  organizations.UpdateOrganizationRequest:
    description: Request body for updating an organization (all fields optional)
    properties:
      description:
        description: Organization description
        example: Updated description
        maxLength: 1000
        type: string
      is_active:
        description: Whether organization is active
        example: true
        type: boolean
      name:
        description: Organization name
        example: Updated Corp Name
        maxLength: 100
        minLength: 1
        type: string
      parent_id:
        description: Parent organization ID
        example: ORGN00000002
        type: string
    type: object
  organizations.UserEffectiveRolesResponse:
    properties:
      effective_roles:
        items:
          $ref: '#/definitions/organizations.EffectiveRoleResponse'
        type: array
      organization_id:
        type: string
      total_count:
        type: integer
      user_id:
        type: string
    type: object
  organizations.UserGroupMembershipResponse:
    properties:
      group_id:
        type: string
      group_name:
        type: string
      group_path:
        type: string
      is_active:
        type: boolean
      is_direct:
        type: boolean
      principal_type:
        type: string
      source:
        description: '"direct", "inherited_up", "inherited_down"'
        type: string
    type: object
  organizations.UserOrganizationGroupsResponse:
    properties:
      groups:
        items:
          $ref: '#/definitions/organizations.UserGroupMembershipResponse'
        type: array
      organization_id:
        type: string
      total_count:
        type: integer
      user_id:
        type: string
    type: object
  permissions.CreatePermissionRequest:
    description: Request payload for creating a new permission
    properties:
      action_id:
        example: ACT_xyz789
        type: string
      description:
        example: Permission to manage users
        maxLength: 500
        type: string
      name:
        example: manage_users
        maxLength: 100
        minLength: 3
        type: string
      resource_id:
        example: RES_abc123
        type: string
    required:
    - action_id
    - name
    - resource_id
    type: object
  permissions.EvaluatePermissionRequest:
    type: object
  permissions.EvaluationData:
    properties:
      allowed:
        example: true
        type: boolean
      cache_hit:
        example: false
        type: boolean
      effective_roles:
        items:
          $ref: '#/definitions/permissions.RoleInfo'
        type: array
      evaluated_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      evaluation_time_ms:
        example: 5
        type: integer
      reason:
        example: Permission granted through role 'admin'
        type: string
    type: object
  permissions.EvaluationResponse:
    description: Response structure for permission evaluation
    properties:
      data:
        $ref: '#/definitions/permissions.EvaluationData'
      message:
        example: Permission evaluated successfully
        type: string
      request_id:
        example: req_abc123
        type: string
      success:
        example: true
        type: boolean
      timestamp:
        example: "2024-01-01T00:00:00Z"
        type: string
    type: object
  permissions.PaginationInfo:
    properties:
      limit:
        example: 10
        type: integer
      page:
        example: 1
        type: integer
      total:
        example: 100
        type: integer
      total_pages:
        example: 10
        type: integer
    type: object
  permissions.PermissionListData:
    properties:
      permissions:
        items:
          $ref: '#/definitions/permissions.PermissionResponse'
        type: array
    type: object
  permissions.PermissionListResponse:
    description: Response structure for a list of permissions with pagination
    properties:
      data:
        $ref: '#/definitions/permissions.PermissionListData'
      message:
        example: Permissions retrieved successfully
        type: string
      pagination:
        $ref: '#/definitions/permissions.PaginationInfo'
      request_id:
        example: req_abc123
        type: string
      success:
        example: true
        type: boolean
      timestamp:
        example: "2024-01-01T00:00:00Z"
        type: string
    type: object
  permissions.PermissionResponse:
    description: Response structure for a single permission
    properties:
      action_id:
        example: ACT_xyz789
        type: string
      action_name:
        example: manage
        type: string
      created_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      deleted_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      description:
        example: Permission to manage users
        type: string
      id:
        example: PERM_abc123
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: manage_users
        type: string
      resource_id:
        example: RES_abc123
        type: string
      resource_name:
        example: User Management
        type: string
      updated_at:
        example: "2024-01-01T00:00:00Z"
        type: string
    type: object
  permissions.RoleInfo:
    properties:
      description:
        example: Administrator role
        type: string
      id:
        example: ROLE_abc123
        type: string
      name:
        example: admin
        type: string
    type: object
  permissions.UpdatePermissionRequest:
    description: Request payload for updating a permission
    properties:
      action_id:
        example: ACT_xyz789
        type: string
      description:
        example: Updated description
        maxLength: 500
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: updated_permission
        maxLength: 100
        minLength: 3
        type: string
      resource_id:
        example: RES_abc123
        type: string
    type: object
  requests.LoginRequest:
    properties:
      country_code:
        type: string
      include_contacts:
        type: boolean
      include_profile:
        type: boolean
      include_roles:
        type: boolean
      mfa_code:
        type: string
      mpin:
        type: string
      password:
        minLength: 8
        type: string
      phone_number:
        type: string
      refresh_token:
        type: string
    type: object
  requests.ModuleActionDefinition:
    description: Action definition structure for module registration
    properties:
      description:
        example: Create a new user
        type: string
      name:
        example: create_user
        type: string
      resource:
        example: user
        type: string
    required:
    - name
    - resource
    type: object
  requests.ModuleRegistrationRequest:
    description: Request structure for registering a new module
    properties:
      actions:
        items:
          $ref: '#/definitions/requests.ModuleActionDefinition'
        type: array
      resources:
        items:
          $ref: '#/definitions/requests.ModuleResourceDefinition'
        type: array
      roles:
        items:
          $ref: '#/definitions/requests.ModuleRoleDefinition'
        type: array
      service_name:
        example: user-service
        type: string
      version:
        example: 1.0.0
        type: string
    required:
    - service_name
    - version
    type: object
  requests.ModuleResourceDefinition:
    description: Resource definition structure for module registration
    properties:
      actions:
        example:
        - '["create"'
        - ' "read"'
        - ' "update"'
        - ' "delete"]'
        items:
          type: string
        type: array
      description:
        example: User resource
        type: string
      name:
        example: user
        type: string
    required:
    - name
    type: object
  requests.ModuleRoleDefinition:
    description: Role definition structure for module registration
    properties:
      description:
        example: User administrator role
        type: string
      name:
        example: user_admin
        type: string
      permissions:
        example:
        - '["user:create"'
        - ' "user:read"'
        - ' "user:update"'
        - ' "user:delete"]'
        items:
          type: string
        type: array
    required:
    - name
    type: object
  requests.RefreshTokenRequest:
    properties:
      mpin:
        type: string
      refresh_token:
        type: string
    required:
    - mpin
    - refresh_token
    type: object
  requests.RegisterRequest:
    properties:
      aadhaar_number:
        type: string
      country_code:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
      phone_number:
        type: string
      username:
        type: string
    required:
    - country_code
    - password
    - phone_number
    type: object
  requests.SetMPinRequest:
    properties:
      mpin:
        type: string
      password:
        type: string
    required:
    - mpin
    - password
    type: object
  requests.UpdateMPinRequest:
    properties:
      current_mpin:
        type: string
      new_mpin:
        type: string
    required:
    - current_mpin
    - new_mpin
    type: object
  resources.CreateResourceRequest:
    description: Request payload for creating a new resource
    properties:
      description:
        example: Resource for managing users
        maxLength: 500
        type: string
      name:
        example: User Management
        maxLength: 100
        minLength: 3
        type: string
      owner_id:
        example: USR_xyz789
        type: string
      parent_id:
        example: RES_abc123
        type: string
      type:
        example: aaa/user
        maxLength: 100
        minLength: 3
        type: string
    required:
    - name
    - type
    type: object
  resources.PaginationInfo:
    properties:
      limit:
        example: 10
        type: integer
      page:
        example: 1
        type: integer
      total:
        example: 100
        type: integer
      total_pages:
        example: 10
        type: integer
    type: object
  resources.ResourceHierarchyResponse:
    description: Response structure for hierarchical resource tree
    properties:
      children:
        items:
          $ref: '#/definitions/resources.ResourceHierarchyResponse'
        type: array
      created_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      deleted_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      description:
        example: Resource for managing users
        type: string
      id:
        example: RES_abc123
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: User Management
        type: string
      owner_id:
        example: USR_owner123
        type: string
      parent_id:
        example: RES_parent123
        type: string
      type:
        example: aaa/user
        type: string
      updated_at:
        example: "2024-01-01T00:00:00Z"
        type: string
    type: object
  resources.ResourceListData:
    properties:
      resources:
        items:
          $ref: '#/definitions/resources.ResourceResponse'
        type: array
    type: object
  resources.ResourceListResponse:
    description: Response structure for a list of resources with pagination
    properties:
      data:
        $ref: '#/definitions/resources.ResourceListData'
      message:
        example: Resources retrieved successfully
        type: string
      pagination:
        $ref: '#/definitions/resources.PaginationInfo'
      request_id:
        example: req_abc123
        type: string
      success:
        example: true
        type: boolean
      timestamp:
        example: "2024-01-01T00:00:00Z"
        type: string
    type: object
  resources.ResourceResponse:
    description: Response structure for a single resource
    properties:
      created_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      deleted_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      description:
        example: Resource for managing users
        type: string
      id:
        example: RES_abc123
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: User Management
        type: string
      owner_id:
        example: USR_owner123
        type: string
      parent_id:
        example: RES_parent123
        type: string
      type:
        example: aaa/user
        type: string
      updated_at:
        example: "2024-01-01T00:00:00Z"
        type: string
    type: object
  resources.ResourceWithChildrenResponse:
    description: Response structure for a resource with children
    properties:
      children:
        items:
          $ref: '#/definitions/resources.ResourceResponse'
        type: array
      created_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      deleted_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      description:
        example: Resource for managing users
        type: string
      id:
        example: RES_abc123
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: User Management
        type: string
      owner_id:
        example: USR_owner123
        type: string
      parent_id:
        example: RES_parent123
        type: string
      type:
        example: aaa/user
        type: string
      updated_at:
        example: "2024-01-01T00:00:00Z"
        type: string
    type: object
  resources.UpdateResourceRequest:
    description: Request payload for updating a resource
    properties:
      description:
        example: Updated description
        maxLength: 500
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: Updated User Management
        maxLength: 100
        minLength: 3
        type: string
      owner_id:
        example: USR_xyz789
        type: string
      parent_id:
        example: RES_abc123
        type: string
      type:
        example: aaa/user
        maxLength: 100
        minLength: 3
        type: string
    type: object
  responses.AddressInfo:
    properties:
      country:
        type: string
      district:
        type: string
      full_address:
        type: string
      house:
        type: string
      id:
        type: string
      landmark:
        type: string
      pincode:
        type: string
      post_office:
        type: string
      state:
        type: string
      street:
        type: string
      subdistrict:
        type: string
      vtc:
        description: Village/Town/City
        type: string
    type: object
  responses.AssignRoleResponse:
    properties:
      message:
        type: string
      role:
        $ref: '#/definitions/responses.RoleDetail'
      success:
        type: boolean
      user_id:
        type: string
    type: object
  responses.ContactInfo:
    properties:
      description:
        type: string
      id:
        type: string
      is_primary:
        type: boolean
      is_verified:
        type: boolean
      type:
        type: string
      value:
        type: string
    type: object
  responses.ErrorResponse:
    properties:
      code:
        type: string
      details:
        additionalProperties: true
        type: object
      error:
        type: string
      message:
        type: string
      request_id:
        type: string
      success:
        type: boolean
      timestamp:
        type: string
    type: object
  responses.ErrorResponseSwagger:
    description: Standard error response structure
    properties:
      code:
        example: 400
        type: integer
      details:
        additionalProperties: true
        type: object
      error:
        example: VALIDATION_ERROR
        type: string
      message:
        example: Invalid input data
        type: string
      request_id:
        example: req-123456789
        type: string
      success:
        example: false
        type: boolean
      timestamp:
        example: "2024-01-01T00:00:00Z"
        type: string
    type: object
  responses.HealthCheckData:
    description: Health check data structure
    properties:
      service:
        example: aaa-service
        type: string
      status:
        example: healthy
        type: string
      version:
        example: "2.0"
        type: string
    type: object
  responses.HealthCheckResponse:
    description: Health check response structure
    properties:
      data:
        $ref: '#/definitions/responses.HealthCheckData'
      message:
        example: Service is healthy
        type: string
      request_id:
        example: req-123456789
        type: string
      success:
        example: true
        type: boolean
      timestamp:
        example: "2024-01-01T00:00:00Z"
        type: string
    type: object
  responses.LoginResponseData:
    description: Login response data containing tokens and user info
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      expires_in:
        example: 86400
        type: integer
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      token_type:
        example: Bearer
        type: string
      user:
        $ref: '#/definitions/responses.UserInfo'
    type: object
  responses.LoginSuccessResponse:
    description: Successful login response with tokens and user info
    properties:
      data:
        $ref: '#/definitions/responses.LoginResponseData'
      message:
        example: Login successful
        type: string
      request_id:
        example: req-123456789
        type: string
      success:
        example: true
        type: boolean
      timestamp:
        example: "2024-01-01T00:00:00Z"
        type: string
    type: object
  responses.LogoutSuccessResponse:
    description: Successful logout response
    properties:
      message:
        example: Logout successful
        type: string
      request_id:
        example: req-123456789
        type: string
      success:
        example: true
        type: boolean
      timestamp:
        example: "2024-01-01T00:00:00Z"
        type: string
    type: object
  responses.ModuleDetailData:
    description: Module detail data structure
    properties:
      actions:
        example:
        - create
        - read
        - update
        - delete
        items:
          type: string
        type: array
      module:
        $ref: '#/definitions/responses.ModuleInfo'
      resources:
        example:
        - user
        - role
        items:
          type: string
        type: array
      roles:
        example:
        - admin
        - user
        items:
          type: string
        type: array
      service_id:
        example: svc_123456
        type: string
    type: object
  responses.ModuleDetailResponse:
    description: Module detail response structure
    properties:
      data:
        $ref: '#/definitions/responses.ModuleDetailData'
      message:
        example: Module details retrieved successfully
        type: string
      request_id:
        example: req-123456789
        type: string
      success:
        example: true
        type: boolean
      timestamp:
        example: "2024-01-01T00:00:00Z"
        type: string
    type: object
  responses.ModuleInfo:
    description: Module information structure
    properties:
      health:
        example: healthy
        type: string
      last_seen:
        example: "2024-01-01T00:00:00Z"
        type: string
      registered_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      service_name:
        example: user-service
        type: string
      status:
        example: active
        type: string
      version:
        example: 1.0.0
        type: string
    type: object
  responses.ModuleListData:
    description: Module list data structure
    properties:
      modules:
        items:
          $ref: '#/definitions/responses.ModuleInfo'
        type: array
    type: object
  responses.ModuleListResponse:
    description: Module list response structure
    properties:
      data:
        $ref: '#/definitions/responses.ModuleListData'
      message:
        example: Modules retrieved successfully
        type: string
      request_id:
        example: req-123456789
        type: string
      success:
        example: true
        type: boolean
      timestamp:
        example: "2024-01-01T00:00:00Z"
        type: string
    type: object
  responses.RefreshTokenResponseData:
    description: Refresh token response data
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      expires_in:
        example: 86400
        type: integer
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      token_type:
        example: Bearer
        type: string
    type: object
  responses.RefreshTokenSuccessResponse:
    description: Successful token refresh response
    properties:
      data:
        $ref: '#/definitions/responses.RefreshTokenResponseData'
      message:
        example: Token refreshed successfully
        type: string
      request_id:
        example: req-123456789
        type: string
      success:
        example: true
        type: boolean
      timestamp:
        example: "2024-01-01T00:00:00Z"
        type: string
    type: object
  responses.RegisterResponseData:
    description: Registration response data containing user info
    properties:
      user:
        $ref: '#/definitions/responses.UserInfoSwagger'
    type: object
  responses.RegisterSuccessResponse:
    description: Successful registration response with user info
    properties:
      data:
        $ref: '#/definitions/responses.RegisterResponseData'
      message:
        example: User registered successfully
        type: string
      request_id:
        example: req-123456789
        type: string
      success:
        example: true
        type: boolean
      timestamp:
        example: "2024-01-01T00:00:00Z"
        type: string
    type: object
  responses.RemoveRoleResponse:
    properties:
      message:
        type: string
      role_id:
        type: string
      success:
        type: boolean
      user_id:
        type: string
    type: object
  responses.RoleDetail:
    properties:
      description:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      scope:
        type: string
      version:
        type: integer
    type: object
  responses.SuccessResponse:
    description: Standard success response structure
    properties:
      data: {}
      message:
        example: Operation completed successfully
        type: string
      request_id:
        example: req-123456789
        type: string
      success:
        example: true
        type: boolean
      timestamp:
        example: "2024-01-01T00:00:00Z"
        type: string
    type: object
  responses.UserDetailData:
    description: Detailed user data structure
    properties:
      user:
        $ref: '#/definitions/responses.UserInfoSwagger'
    type: object
  responses.UserDetailResponse:
    description: Detailed user response structure
    properties:
      data:
        $ref: '#/definitions/responses.UserDetailData'
      message:
        example: User retrieved successfully
        type: string
      request_id:
        example: req-123456789
        type: string
      success:
        example: true
        type: boolean
      timestamp:
        example: "2024-01-01T00:00:00Z"
        type: string
    type: object
  responses.UserInfo:
    properties:
      contacts:
        items:
          $ref: '#/definitions/responses.ContactInfo'
        type: array
      country_code:
        type: string
      created_at:
        type: string
      has_mpin:
        type: boolean
      id:
        type: string
      is_validated:
        type: boolean
      phone_number:
        type: string
      profile:
        $ref: '#/definitions/responses.UserProfileInfo'
      roles:
        items:
          $ref: '#/definitions/responses.UserRoleDetail'
        type: array
      status:
        type: string
      tokens:
        type: integer
      updated_at:
        type: string
      username:
        type: string
    type: object
  responses.UserInfoSwagger:
    description: Enhanced user information structure with roles and profile
    properties:
      contacts:
        items:
          $ref: '#/definitions/responses.ContactInfo'
        type: array
      country_code:
        example: US
        type: string
      created_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      has_mpin:
        example: true
        type: boolean
      id:
        example: USER123456789
        type: string
      is_validated:
        example: true
        type: boolean
      phone_number:
        example: "+1234567890"
        type: string
      profile:
        $ref: '#/definitions/responses.UserProfileInfo'
      roles:
        items:
          $ref: '#/definitions/responses.UserRoleDetailInfo'
        type: array
      status:
        example: active
        type: string
      tokens:
        example: 100
        type: integer
      updated_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      username:
        example: john_doe
        type: string
    type: object
  responses.UserProfileInfo:
    properties:
      aadhaar_number:
        type: string
      address:
        $ref: '#/definitions/responses.AddressInfo'
      care_of:
        type: string
      date_of_birth:
        type: string
      email_hash:
        type: string
      id:
        type: string
      name:
        type: string
      share_code:
        type: string
      year_of_birth:
        type: string
    type: object
  responses.UserRoleDetail:
    properties:
      id:
        type: string
      is_active:
        type: boolean
      role:
        $ref: '#/definitions/responses.RoleDetail'
      role_id:
        type: string
      user_id:
        type: string
    type: object
  responses.UserRoleDetailInfo:
    description: User role detail information structure
    properties:
      id:
        example: USERROLE123456789
        type: string
      is_active:
        example: true
        type: boolean
      role:
        $ref: '#/definitions/responses.RoleDetail'
      role_id:
        example: ROLE123456789
        type: string
      user_id:
        example: USER123456789
        type: string
    type: object
  role_assignments.AssignPermissionsToRoleRequest:
    description: Request payload for assigning permissions to a role
    properties:
      permission_ids:
        example:
        - PERM_abc123
        - PERM_xyz789
        items:
          type: string
        minItems: 1
        type: array
    required:
    - permission_ids
    type: object
  role_assignments.AssignResourcesToRoleRequest:
    description: Request payload for assigning resource-action combinations to a role
    properties:
      assignments:
        items:
          $ref: '#/definitions/github_com_Kisanlink_aaa-service_internal_entities_requests_role_assignments.ResourceActionAssignment'
        minItems: 1
        type: array
    required:
    - assignments
    type: object
  roles.AssignRoleRequest:
    properties:
      body: {}
      context:
        additionalProperties: {}
        type: object
      headers:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      operation:
        type: string
      protocol:
        type: string
      request_id:
        type: string
      role_id:
        type: string
      type:
        type: string
      version:
        type: string
    required:
    - role_id
    type: object
  roles.CreateRoleRequest:
    properties:
      body: {}
      context:
        additionalProperties: {}
        type: object
      description:
        maxLength: 500
        type: string
      headers:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      name:
        maxLength: 100
        minLength: 2
        type: string
      operation:
        type: string
      permissions:
        items:
          type: string
        type: array
      protocol:
        type: string
      request_id:
        type: string
      type:
        type: string
      version:
        type: string
    required:
    - name
    type: object
  roles.RoleResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      permissions:
        items:
          type: string
        type: array
      responses.Response: {}
      updated_at:
        type: string
    type: object
  roles.UpdateRoleRequest:
    properties:
      body: {}
      context:
        additionalProperties: {}
        type: object
      description:
        maxLength: 500
        type: string
      headers:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      name:
        maxLength: 100
        minLength: 2
        type: string
      operation:
        type: string
      permissions:
        items:
          type: string
        type: array
      protocol:
        type: string
      request_id:
        type: string
      role_id:
        type: string
      type:
        type: string
      version:
        type: string
    required:
    - role_id
    type: object
  services.LoginRequest:
    properties:
      country_code:
        type: string
      mfa_code:
        type: string
      password:
        type: string
      phone_number:
        type: string
    required:
    - country_code
    - password
    - phone_number
    type: object
  services.RegisterRequest:
    properties:
      country_code:
        type: string
      email:
        type: string
      full_name:
        maxLength: 100
        minLength: 1
        type: string
      password:
        minLength: 8
        type: string
      phone_number:
        type: string
      role_ids:
        items:
          type: string
        type: array
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - country_code
    - password
    - phone_number
    type: object
  users.AddressResponse:
    properties:
      country:
        type: string
      created_at:
        type: string
      district:
        type: string
      full_address:
        type: string
      house:
        type: string
      id:
        type: string
      landmark:
        type: string
      pincode:
        type: string
      post_office:
        type: string
      state:
        type: string
      street:
        type: string
      subdistrict:
        type: string
      updated_at:
        type: string
      vtc:
        type: string
    type: object
  users.CreateUserRequest:
    properties:
      aadhaar_number:
        type: string
      care_of:
        type: string
      country_code:
        type: string
      date_of_birth:
        type: string
      name:
        type: string
      password:
        maxLength: 128
        minLength: 8
        type: string
      phone_number:
        type: string
      username:
        type: string
      year_of_birth:
        type: string
    required:
    - country_code
    - password
    - phone_number
    type: object
  users.RoleDetail:
    properties:
      assigned_at:
        type: string
      description:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      name:
        type: string
    type: object
  users.UpdateUserRequest:
    properties:
      care_of:
        type: string
      country_code:
        type: string
      date_of_birth:
        type: string
      email_hash:
        type: string
      message:
        type: string
      mobile_number:
        type: integer
      name:
        type: string
      photo:
        type: string
      share_code:
        type: string
      status:
        type: string
      tokens:
        type: integer
      user_id:
        type: string
      year_of_birth:
        type: string
    required:
    - user_id
    type: object
  users.UserResponse:
    properties:
      aadhaar_number:
        type: string
      address:
        $ref: '#/definitions/users.AddressResponse'
      care_of:
        type: string
      country_code:
        type: string
      created_at:
        type: string
      date_of_birth:
        type: string
      email_hash:
        type: string
      has_mpin:
        type: boolean
      id:
        type: string
      is_validated:
        type: boolean
      message:
        type: string
      name:
        type: string
      phone_number:
        type: string
      photo:
        type: string
      roles:
        items:
          $ref: '#/definitions/users.UserRoleDetail'
        type: array
      share_code:
        type: string
      status:
        type: string
      tokens:
        type: integer
      updated_at:
        type: string
      username:
        type: string
      year_of_birth:
        type: string
    type: object
  users.UserRoleDetail:
    properties:
      id:
        type: string
      is_active:
        type: boolean
      role:
        $ref: '#/definitions/users.RoleDetail'
      role_id:
        type: string
      user_id:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: Authentication, Authorization, and Accounting Service with PostgreSQL-based
    RBAC
  title: AAA Service API
  version: "2.0"
paths:
  /api/v1/organizations/{orgId}/groups:
    get:
      description: Retrieve all groups within an organization with pagination
      parameters:
      - description: Organization ID
        in: path
        name: orgId
        required: true
        type: string
      - description: 'Number of groups to return (default: 10, max: 100)'
        in: query
        name: limit
        type: integer
      - description: 'Number of groups to skip (default: 0)'
        in: query
        name: offset
        type: integer
      - description: 'Include inactive groups (default: false)'
        in: query
        name: include_inactive
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/organizations.OrganizationGroupListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get organization groups
      tags:
      - organizations
    post:
      consumes:
      - application/json
      description: Create a new group within a specific organization
      parameters:
      - description: Organization ID
        in: path
        name: orgId
        required: true
        type: string
      - description: Group creation data
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/organizations.CreateOrganizationGroupRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/organizations.OrganizationGroupResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Create group in organization
      tags:
      - organizations
  /api/v1/organizations/{orgId}/groups/{groupId}:
    delete:
      description: Delete a specific group within an organization (super_admin only)
      parameters:
      - description: Organization ID
        in: path
        name: orgId
        required: true
        type: string
      - description: Group ID
        in: path
        name: groupId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete group in organization
      tags:
      - organizations
    get:
      description: Retrieve a specific group within an organization
      parameters:
      - description: Organization ID
        in: path
        name: orgId
        required: true
        type: string
      - description: Group ID
        in: path
        name: groupId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/organizations.OrganizationGroupResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get group in organization
      tags:
      - organizations
    put:
      consumes:
      - application/json
      description: Update a specific group within an organization (super_admin only)
      parameters:
      - description: Organization ID
        in: path
        name: orgId
        required: true
        type: string
      - description: Group ID
        in: path
        name: groupId
        required: true
        type: string
      - description: Group update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/organizations.UpdateOrganizationGroupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/organizations.OrganizationGroupResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update group in organization
      tags:
      - organizations
  /api/v1/organizations/{orgId}/groups/{groupId}/roles:
    get:
      description: Retrieve all roles assigned to a specific group within an organization
      parameters:
      - description: Organization ID
        in: path
        name: orgId
        required: true
        type: string
      - description: Group ID
        in: path
        name: groupId
        required: true
        type: string
      - description: 'Number of roles to return (default: 10, max: 100)'
        in: query
        name: limit
        type: integer
      - description: 'Number of roles to skip (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/organizations.OrganizationGroupRolesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get group roles in organization
      tags:
      - organizations
    post:
      consumes:
      - application/json
      description: Assign a role to a specific group within an organization
      parameters:
      - description: Organization ID
        in: path
        name: orgId
        required: true
        type: string
      - description: Group ID
        in: path
        name: groupId
        required: true
        type: string
      - description: Role assignment data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/organizations.AssignRoleToGroupRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/organizations.OrganizationGroupRoleResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Assign role to group in organization
      tags:
      - organizations
  /api/v1/organizations/{orgId}/groups/{groupId}/roles/{roleId}:
    delete:
      description: Remove a role from a specific group within an organization
      parameters:
      - description: Organization ID
        in: path
        name: orgId
        required: true
        type: string
      - description: Group ID
        in: path
        name: groupId
        required: true
        type: string
      - description: Role ID
        in: path
        name: roleId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Remove role from group in organization
      tags:
      - organizations
  /api/v1/organizations/{orgId}/groups/{groupId}/users:
    get:
      description: Retrieve all users in a specific group within an organization
      parameters:
      - description: Organization ID
        in: path
        name: orgId
        required: true
        type: string
      - description: Group ID
        in: path
        name: groupId
        required: true
        type: string
      - description: 'Number of users to return (default: 10, max: 100)'
        in: query
        name: limit
        type: integer
      - description: 'Number of users to skip (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/organizations.OrganizationGroupMembersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get group users in organization
      tags:
      - organizations
    post:
      consumes:
      - application/json
      description: Add a user to a specific group within an organization
      parameters:
      - description: Organization ID
        in: path
        name: orgId
        required: true
        type: string
      - description: Group ID
        in: path
        name: groupId
        required: true
        type: string
      - description: User assignment data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/organizations.AssignUserToGroupRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/organizations.OrganizationGroupMemberResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Add user to group in organization
      tags:
      - organizations
  /api/v1/organizations/{orgId}/groups/{groupId}/users/{userId}:
    delete:
      description: Remove a user from a specific group within an organization
      parameters:
      - description: Organization ID
        in: path
        name: orgId
        required: true
        type: string
      - description: Group ID
        in: path
        name: groupId
        required: true
        type: string
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Remove user from group in organization
      tags:
      - organizations
  /api/v1/organizations/{orgId}/users/{userId}/effective-roles:
    get:
      description: Retrieve all effective roles for a user within an organization,
        including inherited roles from group hierarchy
      parameters:
      - description: Organization ID
        in: path
        name: orgId
        required: true
        type: string
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/organizations.UserEffectiveRolesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get user's effective roles in organization
      tags:
      - organizations
  /api/v1/organizations/{orgId}/users/{userId}/groups:
    get:
      description: Retrieve all groups a user belongs to within an organization
      parameters:
      - description: Organization ID
        in: path
        name: orgId
        required: true
        type: string
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      - description: 'Number of groups to return (default: 10, max: 100)'
        in: query
        name: limit
        type: integer
      - description: 'Number of groups to skip (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/organizations.UserOrganizationGroupsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get user groups in organization
      tags:
      - organizations
  /api/v2/actions:
    get:
      description: Retrieve a paginated list of actions
      parameters:
      - description: 'Number of actions to return (default: 10, max: 100)'
        in: query
        name: limit
        type: integer
      - description: 'Number of actions to skip (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/actions.ActionListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: List actions
      tags:
      - actions
    post:
      consumes:
      - application/json
      description: Create a new action with the provided information
      parameters:
      - description: Action creation data
        in: body
        name: action
        required: true
        schema:
          $ref: '#/definitions/actions.CreateActionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/actions.ActionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Create a new action
      tags:
      - actions
  /api/v2/actions/{id}:
    delete:
      description: Soft delete an action by ID
      parameters:
      - description: Action ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Action deleted successfully
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Delete an action
      tags:
      - actions
    get:
      description: Retrieve an action by its ID
      parameters:
      - description: Action ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/actions.ActionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get an action by ID
      tags:
      - actions
    put:
      consumes:
      - application/json
      description: Update an existing action with the provided information
      parameters:
      - description: Action ID
        in: path
        name: id
        required: true
        type: string
      - description: Action update data
        in: body
        name: action
        required: true
        schema:
          $ref: '#/definitions/actions.UpdateActionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/actions.ActionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Update an action
      tags:
      - actions
  /api/v2/actions/service/{serviceName}:
    get:
      description: Retrieve actions for a specific service
      parameters:
      - description: Service name
        in: path
        name: serviceName
        required: true
        type: string
      - description: 'Number of actions to return (default: 10, max: 100)'
        in: query
        name: limit
        type: integer
      - description: 'Number of actions to skip (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/actions.ActionListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get actions by service
      tags:
      - actions
  /api/v2/addresses:
    post:
      consumes:
      - application/json
      description: Create a new address for a user
      parameters:
      - description: Address creation data
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/addresses.CreateAddressRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new address
      tags:
      - addresses
  /api/v2/addresses/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an address by its unique identifier
      parameters:
      - description: Address ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete address
      tags:
      - addresses
    get:
      consumes:
      - application/json
      description: Retrieve an address by its unique identifier
      parameters:
      - description: Address ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get address by ID
      tags:
      - addresses
    put:
      consumes:
      - application/json
      description: Update an existing address
      parameters:
      - description: Address ID
        in: path
        name: id
        required: true
        type: string
      - description: Address update data
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/addresses.UpdateAddressRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update address
      tags:
      - addresses
  /api/v2/addresses/search:
    get:
      consumes:
      - application/json
      description: Search for addresses based on query parameters
      parameters:
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      - default: 10
        description: Number of addresses to return
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of addresses to skip
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Search addresses
      tags:
      - addresses
  /api/v2/admin/audit:
    get:
      consumes:
      - application/json
      description: Retrieve audit logs with optional filtering
      parameters:
      - description: Filter by user ID
        in: query
        name: user_id
        type: string
      - description: Filter by action type
        in: query
        name: action
        type: string
      - description: Filter by resource type
        in: query
        name: resource
        type: string
      - description: Filter by start date (RFC3339)
        in: query
        name: start_date
        type: string
      - description: Filter by end date (RFC3339)
        in: query
        name: end_date
        type: string
      - default: 100
        description: Number of logs to return
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of logs to skip
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Audit logs
      tags:
      - admin
  /api/v2/admin/health/detailed:
    get:
      consumes:
      - application/json
      description: Get detailed health status of all system components
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Detailed health check
      tags:
      - admin
  /api/v2/admin/maintenance:
    get:
      consumes:
      - application/json
      description: Get current maintenance mode status and configuration
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get maintenance status
      tags:
      - admin
    post:
      consumes:
      - application/json
      description: Enable or disable system maintenance mode
      parameters:
      - description: Maintenance mode configuration
        in: body
        name: maintenance
        required: true
        schema:
          properties:
            allow_admin:
              type: boolean
            allow_read:
              type: boolean
            enabled:
              type: boolean
            end_time:
              type: string
            message:
              type: string
            reason:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Toggle maintenance mode
      tags:
      - admin
  /api/v2/admin/maintenance/message:
    patch:
      consumes:
      - application/json
      description: Update the maintenance mode message
      parameters:
      - description: New maintenance message
        in: body
        name: message
        required: true
        schema:
          properties:
            message:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update maintenance message
      tags:
      - admin
  /api/v2/admin/metrics:
    get:
      consumes:
      - application/json
      description: Get comprehensive system and application metrics
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: System metrics
      tags:
      - admin
  /api/v2/admin/system:
    get:
      consumes:
      - application/json
      description: Get comprehensive system information including service details,
        runtime info, and configuration
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: System information
      tags:
      - admin
  /api/v2/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with username and password and MFA
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/services.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.LoginSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponseSwagger'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponseSwagger'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponseSwagger'
      summary: User login (V2)
      tags:
      - authentication
  /api/v2/auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user and invalidate tokens
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.LogoutSuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponseSwagger'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: User logout (V2)
      tags:
      - authentication
  /api/v2/auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh access token using refresh token
      parameters:
      - description: Refresh token
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/requests.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.RefreshTokenSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponseSwagger'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponseSwagger'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponseSwagger'
      summary: Refresh access token (V2)
      tags:
      - authentication
  /api/v2/auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account with enhanced validation
      parameters:
      - description: Registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/services.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.RegisterSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponseSwagger'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/responses.ErrorResponseSwagger'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponseSwagger'
      summary: User registration (V2)
      tags:
      - authentication
  /api/v2/auth/set-mpin:
    post:
      consumes:
      - application/json
      description: Set or update mPin for secure refresh token validation
      parameters:
      - description: Set mPin request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.SetMPinRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - Bearer: []
      summary: Set or update user's mPin
      tags:
      - auth
  /api/v2/auth/update-mpin:
    post:
      consumes:
      - application/json
      description: Update existing mPin with current mPin verification
      parameters:
      - description: Update mPin request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateMPinRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - Bearer: []
      summary: Update user's existing mPin
      tags:
      - auth
  /api/v2/contacts:
    get:
      description: Retrieve a paginated list of contacts
      parameters:
      - description: 'Number of contacts to return (default: 10, max: 100)'
        in: query
        name: limit
        type: integer
      - description: 'Number of contacts to skip (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contacts.ContactListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: List contacts
      tags:
      - contacts
    post:
      consumes:
      - application/json
      description: Create a new contact with the provided information
      parameters:
      - description: Contact creation data
        in: body
        name: contact
        required: true
        schema:
          $ref: '#/definitions/contacts.CreateContactRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/contacts.ContactResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Create a new contact
      tags:
      - contacts
  /api/v2/contacts/{id}:
    delete:
      description: Soft delete a contact by ID
      parameters:
      - description: Contact ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Contact deleted successfully
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Delete a contact
      tags:
      - contacts
    get:
      description: Retrieve a contact by its ID
      parameters:
      - description: Contact ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contacts.ContactResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get a contact by ID
      tags:
      - contacts
    put:
      consumes:
      - application/json
      description: Update an existing contact with the provided information
      parameters:
      - description: Contact ID
        in: path
        name: id
        required: true
        type: string
      - description: Contact update data
        in: body
        name: contact
        required: true
        schema:
          $ref: '#/definitions/contacts.UpdateContactRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contacts.ContactResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Update a contact
      tags:
      - contacts
  /api/v2/contacts/user/{userID}:
    get:
      description: Retrieve contacts for a specific user
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      - description: 'Number of contacts to return (default: 10, max: 100)'
        in: query
        name: limit
        type: integer
      - description: 'Number of contacts to skip (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contacts.ContactListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get contacts by user
      tags:
      - contacts
  /api/v2/health:
    get:
      consumes:
      - application/json
      description: Basic health check for the AAA service
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.HealthCheckResponse'
      summary: Health check (V2)
      tags:
      - health
  /api/v2/modules:
    get:
      description: Get a list of all registered modules
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.ModuleListResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: List all registered modules
      tags:
      - modules
  /api/v2/modules/{service_name}:
    get:
      description: Get detailed information about a registered module
      parameters:
      - description: Service name
        in: path
        name: service_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.ModuleDetailResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Get module information
      tags:
      - modules
  /api/v2/modules/{service_name}/health:
    get:
      description: Check if a module is healthy and operational
      parameters:
      - description: Service name
        in: path
        name: service_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Check module health
      tags:
      - modules
  /api/v2/modules/register:
    post:
      consumes:
      - application/json
      description: Register a complete module with actions, roles, resources, and
        permissions. Requires API key authentication.
      parameters:
      - description: Module registration request
        in: body
        name: module
        required: true
        schema:
          $ref: '#/definitions/requests.ModuleRegistrationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.ModuleDetailResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: Register a new module
      tags:
      - modules
  /api/v2/organizations:
    get:
      description: Retrieve a list of organizations with pagination
      parameters:
      - description: 'Number of organizations to return (default: 10, max: 100)'
        in: query
        name: limit
        type: integer
      - description: 'Number of organizations to skip (default: 0)'
        in: query
        name: offset
        type: integer
      - description: 'Include inactive organizations (default: false)'
        in: query
        name: include_inactive
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/organizations.OrganizationResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: List organizations
      tags:
      - organizations
    post:
      consumes:
      - application/json
      description: Create a new organization with the provided information
      parameters:
      - description: Organization creation data
        in: body
        name: organization
        required: true
        schema:
          $ref: '#/definitions/organizations.CreateOrganizationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/organizations.OrganizationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Create a new organization
      tags:
      - organizations
  /api/v2/organizations/{id}:
    delete:
      description: Delete an organization by its ID
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Delete organization
      tags:
      - organizations
    get:
      description: Retrieve an organization by its ID
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/organizations.OrganizationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get organization by ID
      tags:
      - organizations
    put:
      consumes:
      - application/json
      description: Update an existing organization with the provided information
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      - description: Organization update data
        in: body
        name: organization
        required: true
        schema:
          $ref: '#/definitions/organizations.UpdateOrganizationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/organizations.OrganizationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Update organization
      tags:
      - organizations
  /api/v2/organizations/{id}/activate:
    post:
      description: Activate an inactive organization
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Activate organization
      tags:
      - organizations
  /api/v2/organizations/{id}/deactivate:
    post:
      description: Deactivate an active organization
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Deactivate organization
      tags:
      - organizations
  /api/v2/organizations/{id}/hierarchy:
    get:
      description: Retrieve the hierarchical structure of an organization
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/organizations.OrganizationHierarchyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get organization hierarchy
      tags:
      - organizations
  /api/v2/organizations/{id}/stats:
    get:
      description: Retrieve statistics and metrics for an organization
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/organizations.OrganizationStatsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get organization statistics
      tags:
      - organizations
  /api/v2/permissions:
    get:
      consumes:
      - application/json
      description: Get a paginated list of permissions with optional filters
      parameters:
      - description: Role ID filter
        in: query
        name: role_id
        type: string
      - description: Resource ID filter
        in: query
        name: resource_id
        type: string
      - description: Action ID filter
        in: query
        name: action_id
        type: string
      - description: Active status filter
        in: query
        name: is_active
        type: boolean
      - description: Search term
        in: query
        name: search
        type: string
      - default: 10
        description: Number of permissions to return
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of permissions to skip
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/permissions.PermissionListResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: List permissions
      tags:
      - permissions
    post:
      consumes:
      - application/json
      description: Create a new permission with name, resource, and action
      parameters:
      - description: Permission creation data
        in: body
        name: permission
        required: true
        schema:
          $ref: '#/definitions/permissions.CreatePermissionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/permissions.PermissionResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Permission with the same name already exists
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new permission
      tags:
      - permissions
  /api/v2/permissions/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a permission by its unique identifier
      parameters:
      - description: Permission ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete permission
      tags:
      - permissions
    get:
      consumes:
      - application/json
      description: Retrieve a permission by its unique identifier
      parameters:
      - description: Permission ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/permissions.PermissionResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get permission by ID
      tags:
      - permissions
    put:
      consumes:
      - application/json
      description: Update an existing permission
      parameters:
      - description: Permission ID
        in: path
        name: id
        required: true
        type: string
      - description: Permission update data
        in: body
        name: permission
        required: true
        schema:
          $ref: '#/definitions/permissions.UpdatePermissionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/permissions.PermissionResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update permission
      tags:
      - permissions
  /api/v2/permissions/evaluate:
    post:
      consumes:
      - application/json
      description: Check if a user has permission to perform an action on a resource
      parameters:
      - description: Evaluation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/permissions.EvaluatePermissionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/permissions.EvaluationResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Evaluate user permission
      tags:
      - permissions
  /api/v2/resources:
    get:
      consumes:
      - application/json
      description: Get a paginated list of resources with optional filters
      parameters:
      - description: Resource type filter
        in: query
        name: type
        type: string
      - description: Parent ID filter
        in: query
        name: parent_id
        type: string
      - description: Owner ID filter
        in: query
        name: owner_id
        type: string
      - description: Active status filter
        in: query
        name: is_active
        type: boolean
      - description: Search term
        in: query
        name: search
        type: string
      - default: 10
        description: Number of resources to return
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of resources to skip
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/resources.ResourceListResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: List resources
      tags:
      - resources
    post:
      consumes:
      - application/json
      description: Create a new resource with name, type, and description
      parameters:
      - description: Resource creation data
        in: body
        name: resource
        required: true
        schema:
          $ref: '#/definitions/resources.CreateResourceRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/resources.ResourceResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new resource
      tags:
      - resources
  /api/v2/resources/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a resource by its unique identifier
      parameters:
      - description: Resource ID
        in: path
        name: id
        required: true
        type: string
      - default: false
        description: Delete children recursively
        in: query
        name: cascade
        type: boolean
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete resource
      tags:
      - resources
    get:
      consumes:
      - application/json
      description: Retrieve a resource by its unique identifier
      parameters:
      - description: Resource ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/resources.ResourceResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get resource by ID
      tags:
      - resources
    put:
      consumes:
      - application/json
      description: Update an existing resource
      parameters:
      - description: Resource ID
        in: path
        name: id
        required: true
        type: string
      - description: Resource update data
        in: body
        name: resource
        required: true
        schema:
          $ref: '#/definitions/resources.UpdateResourceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/resources.ResourceResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update resource
      tags:
      - resources
  /api/v2/resources/{id}/children:
    get:
      consumes:
      - application/json
      description: Get all direct children of a resource
      parameters:
      - description: Resource ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/resources.ResourceWithChildrenResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get child resources
      tags:
      - resources
  /api/v2/resources/{id}/hierarchy:
    get:
      consumes:
      - application/json
      description: Get the full hierarchical tree starting from a resource
      parameters:
      - description: Resource ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/resources.ResourceHierarchyResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get resource hierarchy
      tags:
      - resources
  /api/v2/roles:
    get:
      consumes:
      - application/json
      description: Get a paginated list of roles
      parameters:
      - default: 10
        description: Number of roles to return
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of roles to skip
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: List roles
      tags:
      - roles
    post:
      consumes:
      - application/json
      description: Create a new role with the provided information
      parameters:
      - description: Role creation data
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/roles.CreateRoleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponseSwagger'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/responses.ErrorResponseSwagger'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponseSwagger'
      summary: Create a new role
      tags:
      - roles
  /api/v2/roles/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a role by its unique identifier
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponseSwagger'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponseSwagger'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/responses.ErrorResponseSwagger'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponseSwagger'
      summary: Delete role
      tags:
      - roles
    get:
      consumes:
      - application/json
      description: Retrieve a role by its unique identifier
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponseSwagger'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponseSwagger'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponseSwagger'
      summary: Get role by ID
      tags:
      - roles
    put:
      consumes:
      - application/json
      description: Update an existing role's information
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      - description: Role update data
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/roles.UpdateRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponseSwagger'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponseSwagger'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/responses.ErrorResponseSwagger'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponseSwagger'
      summary: Update role
      tags:
      - roles
  /api/v2/roles/{id}/permissions:
    get:
      consumes:
      - application/json
      description: Get all permissions assigned to a specific role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/permissions.PermissionListResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get role permissions
      tags:
      - permissions
    post:
      consumes:
      - application/json
      description: Assign one or more permissions to a role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      - description: Assignment request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/role_assignments.AssignPermissionsToRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Assign permissions to role
      tags:
      - permissions
  /api/v2/roles/{id}/permissions/{permId}:
    delete:
      consumes:
      - application/json
      description: Revoke a specific permission from a role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      - description: Permission ID
        in: path
        name: permId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Revoke permission from role
      tags:
      - permissions
  /api/v2/roles/{id}/resources:
    get:
      consumes:
      - application/json
      description: Get all resource-action combinations assigned to a role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get role resources
      tags:
      - permissions
    post:
      consumes:
      - application/json
      description: Assign resource-action combinations to a role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      - description: Assignment request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/role_assignments.AssignResourcesToRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Assign resources to role
      tags:
      - permissions
  /api/v2/roles/{id}/resources/{resId}:
    delete:
      consumes:
      - application/json
      description: Revoke a specific resource from a role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      - description: Resource ID
        in: path
        name: resId
        required: true
        type: string
      - description: Specific action to revoke
        in: query
        name: action
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Revoke resource from role
      tags:
      - permissions
  /api/v2/users:
    get:
      consumes:
      - application/json
      description: Get a paginated list of users
      parameters:
      - default: 10
        description: Number of users to return
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of users to skip
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: List users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with the provided information
      parameters:
      - description: User creation data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/users.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.UserDetailResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Create a new user
      tags:
      - users
  /api/v2/users/{id}:
    delete:
      consumes:
      - application/json
      description: Soft delete a user by their unique identifier with proper cascade
        handling
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Retrieve a user by their unique identifier
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.UserDetailResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update an existing user's information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User update data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/users.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Update user
      tags:
      - users
  /api/v2/users/{id}/evaluate:
    post:
      consumes:
      - application/json
      description: Check if a specific user has permission to perform an action on
        a resource
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Evaluation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/permissions.EvaluatePermissionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/permissions.EvaluationResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Evaluate user-specific permission
      tags:
      - permissions
  /api/v2/users/{id}/roles:
    get:
      consumes:
      - application/json
      description: Get all roles assigned to a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get user roles
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Assign a role to a specific user using request body
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Role assignment data
        in: body
        name: role
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Assign role to user
      tags:
      - users
  /api/v2/users/{id}/roles/{role_id}:
    delete:
      consumes:
      - application/json
      description: Remove a role assignment from a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.RemoveRoleResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponseSwagger'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponseSwagger'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponseSwagger'
      summary: Remove role from user
      tags:
      - roles
  /api/v2/users/{id}/roles/{roleId}:
    delete:
      consumes:
      - application/json
      description: Remove a role from a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Role ID
        in: path
        name: roleId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Remove role from user
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Assign a role to a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Role ID
        in: path
        name: roleId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Assign role to user
      tags:
      - users
  /api/v2/users/{id}/roles/{roleId}/legacy:
    delete:
      consumes:
      - application/json
      description: Remove a role from a specific user using legacy endpoint
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Role ID
        in: path
        name: roleId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Remove role from user (legacy)
      tags:
      - users
  /api/v2/users/{id}/validate:
    post:
      consumes:
      - application/json
      description: Validate a user account
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Validate user
      tags:
      - users
  /api/v2/users/search:
    get:
      consumes:
      - application/json
      description: Search for users based on query parameters
      parameters:
      - description: Search query
        in: query
        name: q
        type: string
      - description: Search query (alternative parameter)
        in: query
        name: query
        type: string
      - default: 10
        description: Number of users to return
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of users to skip
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Search users
      tags:
      - users
  /health:
    get:
      consumes:
      - application/json
      description: Get basic service health status
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Basic health check
      tags:
      - health
  /live:
    get:
      consumes:
      - application/json
      description: Check if service is alive
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Liveness check
      tags:
      - health
  /ready:
    get:
      consumes:
      - application/json
      description: Check if service is ready to accept requests
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "503":
          description: Service Unavailable
          schema:
            additionalProperties: true
            type: object
      summary: Readiness check
      tags:
      - health
securityDefinitions:
  ApiKeyAuth:
    description: API key for service-to-service authentication
    in: header
    name: X-API-Key
    type: apiKey
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"

definitions:
  helper.Response:
    description: Standard API response structure
    properties:
      data:
        description: |-
          The actual data payload (can be any type)
          @example {"id": 1, "name": "John Doe"}
      error:
        description: |-
          List of error messages (if any)
          @example ["Invalid email format", "Password too short"]
        items:
          type: string
        type: array
      message:
        description: |-
          Human-readable message about the response
          @example "Request processed successfully"
        type: string
      status_code:
        description: |-
          HTTP status code
          @example 200
        type: integer
      success:
        description: |-
          Indicates if the request was successfully processed
          @example true
        type: boolean
      timestamp:
        description: |-
          Timestamp of when the response was generated
          @example "2023-05-15T10:00:00Z"
        type: string
    type: object
  model.AadhaarOTPResponse:
    properties:
      entity:
        example: aadhaar
        type: string
      otp_message:
        example: OTP sent successfully
        type: string
      reference_id:
        example: REF987654321
        type: string
      status_code:
        example: 200
        type: integer
      timestamp:
        example: 1672531200
        type: integer
      transaction_id:
        example: TXN123456789
        type: string
    type: object
  model.Action:
    properties:
      created_at:
        type: string
      id:
        description: Use string for ID
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  model.Address:
    properties:
      country:
        type: string
      created_at:
        type: string
      district:
        type: string
      full_address:
        type: string
      house:
        type: string
      id:
        description: Use string for ID
        type: string
      landmark:
        type: string
      pincode:
        type: string
      post_office:
        type: string
      state:
        type: string
      street:
        type: string
      subdistrict:
        type: string
      updated_at:
        type: string
      vtc:
        type: string
    type: object
  model.AddressRes:
    properties:
      country:
        example: USA
        type: string
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      district:
        example: Central District
        type: string
      full_address:
        example: 123 Main Street, Near Central Park, Metro City, California, USA -
          123456
        type: string
      house:
        example: "123"
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      landmark:
        example: Near Central Park
        type: string
      pincode:
        example: "123456"
        type: string
      post_office:
        example: Main Post Office
        type: string
      state:
        example: California
        type: string
      street:
        example: Main Street
        type: string
      subdistrict:
        example: Downtown
        type: string
      updated_at:
        example: "2023-01-02T10:30:00Z"
        type: string
      vtc:
        example: Metro City
        type: string
    type: object
  model.AssignRolePermission:
    properties:
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      is_validated:
        example: true
        type: boolean
      roles:
        items:
          $ref: '#/definitions/model.RoleDetail'
        type: array
      updated_at:
        example: "2023-01-02T10:30:00Z"
        type: string
      username:
        example: johndoe
        type: string
    type: object
  model.AssignRoleRequest:
    properties:
      role:
        example: admin
        type: string
      user_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
    required:
    - role
    - user_id
    type: object
  model.CreateActionRequest:
    properties:
      name:
        example: read
        type: string
    required:
    - name
    type: object
  model.CreatePermissionInput:
    properties:
      actions:
        example:
        - read
        - write
        - delete
        items:
          type: string
        type: array
      resource:
        example: document
        type: string
    required:
    - actions
    - resource
    type: object
  model.CreateResourceRequest:
    properties:
      name:
        example: document
        type: string
    required:
    - name
    type: object
  model.CreateRoleRequest:
    properties:
      description:
        example: Administrator role with full access
        type: string
      name:
        example: admin
        type: string
      permissions:
        items:
          $ref: '#/definitions/model.CreatePermissionInput'
        type: array
      source:
        example: system
        type: string
    required:
    - name
    type: object
  model.CreateUserRequest:
    properties:
      aadhaar_number:
        example: "123456789012"
        type: string
      country_code:
        example: "+91"
        type: string
      mobile_number:
        example: 9876543210
        type: integer
      password:
        example: securePassword123
        type: string
      username:
        example: johndoe
        type: string
    required:
    - mobile_number
    type: object
  model.CreditUsageRequest:
    properties:
      tokens:
        example: 100
        type: integer
      transaction_type:
        example: debit
        type: string
      user_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
    required:
    - user_id
    type: object
  model.LoginRequest:
    properties:
      password:
        example: securePassword123
        type: string
      username:
        example: johndoe
        type: string
    required:
    - password
    - username
    type: object
  model.MinimalUser:
    properties:
      country_code:
        example: "+91"
        type: string
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      is_validated:
        example: true
        type: boolean
      mobile_number:
        example: 9876543210
        type: integer
      otp_response:
        $ref: '#/definitions/model.AadhaarOTPResponse'
      updated_at:
        example: "2023-01-02T10:30:00Z"
        type: string
      username:
        example: johndoe
        type: string
    type: object
  model.PasswordResetFlowRequest:
    properties:
      new_password:
        example: newSecurePassword123
        type: string
      otp:
        example: "123456"
        type: string
      username:
        example: johndoe
        type: string
    required:
    - username
    type: object
  model.Permission:
    properties:
      actions:
        description: Actions  pq.StringArray `json:"actions" gorm:"type:text[]"`
        items:
          type: string
        type: array
      created_at:
        type: string
      id:
        description: Use string for ID
        type: string
      resource:
        type: string
      roleId:
        type: string
      updated_at:
        type: string
    type: object
  model.Resource:
    properties:
      created_at:
        type: string
      id:
        description: Use string for ID
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  model.Role:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        description: Use string for ID
        type: string
      name:
        type: string
      permissions:
        items:
          $ref: '#/definitions/model.Permission'
        type: array
      roles:
        items:
          $ref: '#/definitions/model.UserRole'
        type: array
      source:
        type: string
      updated_at:
        type: string
    type: object
  model.RoleDetail:
    properties:
      permissions:
        items:
          $ref: '#/definitions/model.RolePermission'
        type: array
      role_name:
        example: admin
        type: string
    type: object
  model.RolePermission:
    properties:
      actions:
        example:
        - read
        - write
        - delete
        items:
          type: string
        type: array
      resource:
        example: document
        type: string
    type: object
  model.UpdateUserRequest:
    properties:
      care_of:
        example: Father
        type: string
      date_of_birth:
        example: "1990-01-01"
        type: string
      email_hash:
        example: a1b2c3d4e5f6
        type: string
      message:
        example: Profile updated
        type: string
      mobile_number:
        example: 9876543210
        type: integer
      name:
        example: John Doe
        type: string
      photo:
        example: base64encodedimage
        type: string
      status:
        example: active
        type: string
      username:
        example: johndoe
        type: string
      year_of_birth:
        example: "1990"
        type: string
    type: object
  model.User:
    properties:
      aadhaar_number:
        type: string
      address:
        allOf:
        - $ref: '#/definitions/model.Address'
        description: Address       Address    `gorm:"foreignKey:ID;references:AddressID"`
      address_id:
        type: string
      care_of:
        type: string
      country_code:
        type: string
      created_at:
        type: string
      date_of_birth:
        type: string
      email_hash:
        type: string
      id:
        description: Use string for ID
        type: string
      isValidate:
        type: boolean
      message:
        type: string
      mobile_number:
        type: integer
      name:
        type: string
      password:
        maxLength: 128
        minLength: 8
        type: string
      photo:
        type: string
      roles:
        items:
          $ref: '#/definitions/model.UserRole'
        type: array
      share_code:
        type: string
      status:
        type: string
      tokens:
        description: for credits
        type: integer
      updated_at:
        type: string
      username:
        type: string
      year_of_birth:
        type: string
    required:
    - password
    - username
    type: object
  model.UserRes:
    properties:
      aadhaar_number:
        example: "123456789012"
        type: string
      address:
        $ref: '#/definitions/model.AddressRes'
      care_of:
        example: Father
        type: string
      country_code:
        example: "+91"
        type: string
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      date_of_birth:
        example: "1990-01-01"
        type: string
      email_hash:
        example: a1b2c3d4e5f6
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      is_validated:
        example: true
        type: boolean
      message:
        example: Welcome
        type: string
      mobile_number:
        example: 9876543210
        type: integer
      name:
        example: John Doe
        type: string
      password:
        example: hashedpassword
        type: string
      photo:
        example: base64encodedimage
        type: string
      roles:
        items:
          $ref: '#/definitions/model.RoleDetail'
        type: array
      share_code:
        example: SHARE123
        type: string
      status:
        example: active
        type: string
      updated_at:
        example: "2023-01-02T10:30:00Z"
        type: string
      username:
        example: johndoe
        type: string
      year_of_birth:
        example: "1990"
        type: string
    type: object
  model.UserResponse:
    properties:
      aadhaar_number:
        example: "123456789012"
        type: string
      address:
        $ref: '#/definitions/model.AddressRes'
      care_of:
        example: Father
        type: string
      country_code:
        example: "+91"
        type: string
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      date_of_birth:
        example: "1990-01-01"
        type: string
      email_hash:
        example: a1b2c3d4e5f6
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      is_validated:
        example: true
        type: boolean
      message:
        example: Welcome
        type: string
      mobile_number:
        example: 9876543210
        type: integer
      name:
        example: John Doe
        type: string
      photo:
        example: base64encodedimage
        type: string
      roles:
        items:
          $ref: '#/definitions/model.RoleDetail'
        type: array
      share_code:
        example: SHARE123
        type: string
      status:
        example: active
        type: string
      updated_at:
        example: "2023-01-02T10:30:00Z"
        type: string
      username:
        example: johndoe
        type: string
      year_of_birth:
        example: "1990"
        type: string
    type: object
  model.UserRole:
    properties:
      created_at:
        type: string
      id:
        description: Use string for ID
        type: string
      is_active:
        type: boolean
      role:
        $ref: '#/definitions/model.Role'
      roleID:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/model.User'
      userID:
        type: string
    type: object
info:
  contact: {}
  description: Authentication, Authorization, and Accounting (AAA) service providing
    RBAC-based access control. Supports both gRPC and REST API interfaces for seamless
    integration with client applications. Offers comprehensive user management, role-based
    permission control, and session accounting capabilities for secure system access.
  title: AAA-Service API
  version: "1.0"
paths:
  /actions:
    get:
      consumes:
      - application/json
      description: Retrieves actions with optional filtering by ID or name and pagination
        support
      parameters:
      - description: Filter by action ID
        in: query
        name: id
        type: string
      - description: Filter by action name
        in: query
        name: name
        type: string
      - description: Page number (starts from 1)
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of actions retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Action'
                  type: array
              type: object
        "500":
          description: Failed to retrieve actions
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Get actions with pagination
      tags:
      - Actions
    post:
      consumes:
      - application/json
      description: Creates a new action with the provided details
      parameters:
      - description: Action creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.CreateActionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Action created successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Action'
              type: object
        "400":
          description: Invalid request or missing required fields
          schema:
            $ref: '#/definitions/helper.Response'
        "409":
          description: Action already exists
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Failed to create action
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Create a new action
      tags:
      - Actions
  /actions/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an existing action by ID
      parameters:
      - description: Action ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Action deleted successfully
          schema:
            $ref: '#/definitions/helper.Response'
        "400":
          description: Invalid action ID
          schema:
            $ref: '#/definitions/helper.Response'
        "404":
          description: Action not found
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Failed to delete action
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Delete an action
      tags:
      - Actions
    put:
      consumes:
      - application/json
      description: Updates an existing action with the provided details
      parameters:
      - description: Action ID
        in: path
        name: id
        required: true
        type: string
      - description: Action update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.CreateActionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Action updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Action'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/helper.Response'
        "404":
          description: Action not found
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Failed to update action
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Update an action
      tags:
      - Actions
  /assign-role:
    post:
      consumes:
      - application/json
      description: Assigns a specified role to a user and returns the updated user
        details with roles and permissions
      parameters:
      - description: Assign Role Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.AssignRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Role assigned successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.AssignRolePermission'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/helper.Response'
        "404":
          description: User or Role not found
          schema:
            $ref: '#/definitions/helper.Response'
        "409":
          description: Role already assigned to user
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Assign a role to a user
      tags:
      - Users
  /forgot-password:
    post:
      consumes:
      - application/json
      description: 'Handles the complete password reset flow in three steps: 1) Request
        OTP, 2) Verify OTP, 3) Reset password. Each step requires different request
        parameters.'
      parameters:
      - description: Password reset request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.PasswordResetFlowRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'Success responses vary by step: 1) ''OTP sent successfully'',
            2) ''OTP verified. Proceed to reset password.'', 3) ''Password reset successfully'''
          schema:
            type: object
        "400":
          description: Invalid request body or parameters
          schema:
            $ref: '#/definitions/helper.Response'
        "401":
          description: Invalid or expired OTP
          schema:
            $ref: '#/definitions/helper.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Password reset flow
      tags:
      - Authentication
  /login:
    post:
      consumes:
      - application/json
      description: 'Authenticates a user with username and password, returns JWT tokens
        in response headers and optional user details in body. If ''source: admin/panel''
        header is provided, only users with ADMIN, SUPER_ADMIN, or CUSTOMER_SUPPORT
        roles can login.'
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.LoginRequest'
      - default: false
        description: Include full user details
        in: query
        name: user_details
        type: boolean
      - description: Access source (e.g., 'admin/panel' for admin panel access)
        in: header
        name: source
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          headers:
            Authorization:
              description: Bearer access token
              type: string
            Refresh-Token:
              description: Refresh token
              type: string
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.UserResponse'
              type: object
        "400":
          description: Invalid request body or missing credentials
          schema:
            $ref: '#/definitions/helper.Response'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/helper.Response'
        "403":
          description: 'Access Denied: Insufficient permission (when source=admin/panel
            but user lacks required role)'
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      summary: User login
      tags:
      - Authentication
  /register:
    post:
      consumes:
      - application/json
      description: Creates a new user account with the provided details. Optionally
        sends OTP for Aadhaar verification if Aadhaar number is provided.
      parameters:
      - description: User creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.MinimalUser'
              type: object
        "400":
          description: Invalid request body or validation failed
          schema:
            $ref: '#/definitions/helper.Response'
        "409":
          description: Username, mobile number or Aadhaar already exists
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Create a new user
      tags:
      - Users
  /remove/{role}/by/{userID}:
    delete:
      consumes:
      - application/json
      description: Removes a specified role from a user and returns the updated user
        details with remaining roles and permissions
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      - description: Role Name
        in: path
        name: role
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Role removed successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.AssignRolePermission'
              type: object
        "400":
          description: Invalid user ID or role
          schema:
            $ref: '#/definitions/helper.Response'
        "404":
          description: User or Role not found
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Remove a role from a user
      tags:
      - Users
  /resources:
    get:
      description: Get resources with optional filtering by ID or name and pagination
      parameters:
      - description: Filter by resource ID
        in: query
        name: id
        type: string
      - description: Filter by resource name
        in: query
        name: name
        type: string
      - description: Page number (starts from 1)
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Resource'
                  type: array
              type: object
      summary: Get resources
      tags:
      - Resources
    post:
      consumes:
      - application/json
      description: Creates a new resource with the provided details
      parameters:
      - description: Resource creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.CreateResourceRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Resource created successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Resource'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/helper.Response'
        "409":
          description: Resource already exists
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Failed to create resource
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Create a new resource
      tags:
      - Resources
  /resources/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an existing resource by ID
      parameters:
      - description: Resource ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Resource deleted successfully
          schema:
            $ref: '#/definitions/helper.Response'
        "400":
          description: Invalid resource ID
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Failed to delete resource
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Delete a resource
      tags:
      - Resources
    put:
      consumes:
      - application/json
      description: Updates an existing resource with the provided details
      parameters:
      - description: Resource ID
        in: path
        name: id
        required: true
        type: string
      - description: Resource update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.CreateResourceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Resource updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Resource'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/helper.Response'
        "404":
          description: Resource not found
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Failed to update resource
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Update a resource
      tags:
      - Resources
  /roles:
    get:
      consumes:
      - application/json
      description: Retrieves roles with optional filtering by ID or name and pagination
        support
      parameters:
      - description: Filter by role ID
        in: query
        name: id
        type: string
      - description: Filter by role name
        in: query
        name: name
        type: string
      - description: Page number (starts from 1)
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Roles retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Role'
                  type: array
              type: object
        "500":
          description: Failed to retrieve roles
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Get roles with pagination
      tags:
      - Roles
    post:
      consumes:
      - application/json
      description: Creates a new role with associated permissions
      parameters:
      - description: Role and permissions data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.CreateRoleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Role created successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Role'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/helper.Response'
        "409":
          description: Role already exists
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Failed to create role
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Create a new role with permissions
      tags:
      - Roles
  /roles/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a role and all its associated permissions
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Role deleted successfully
          schema:
            $ref: '#/definitions/helper.Response'
        "400":
          description: Invalid role ID
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Failed to delete role
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Delete a role
      tags:
      - Roles
    put:
      consumes:
      - application/json
      description: Updates an existing role and its permissions
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      - description: Role and permissions data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.CreateRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Role updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Role'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/helper.Response'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Failed to update role
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Update a role with permissions
      tags:
      - Roles
  /token-transaction:
    post:
      consumes:
      - application/json
      description: Handles token transactions (credit/debit) or fetches token balance
        when no transaction type is specified
      parameters:
      - description: Token transaction request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.CreditUsageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'Returns remaining tokens in all cases" example({"remaining_tokens":
            100})'
          schema:
            type: object
        "400":
          description: Invalid request, insufficient tokens, or invalid transaction
            type
          schema:
            $ref: '#/definitions/helper.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Manage user tokens
      tags:
      - Users
  /update/schema:
    get:
      consumes:
      - application/json
      description: update schema by Retrieves all roles
      produces:
      - application/json
      responses:
        "200":
          description: Roles retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Role'
                  type: array
              type: object
        "500":
          description: Failed to retrieve roles
          schema:
            $ref: '#/definitions/helper.Response'
      summary: update spice db schema
      tags:
      - SpiceDB
  /users:
    get:
      consumes:
      - application/json
      description: Retrieves a list of users including their roles, permissions, and
        address information with optional pagination
      parameters:
      - description: Page number (starts from 1)
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Users fetched successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.UserRes'
                  type: array
              type: object
        "500":
          description: Internal server error when fetching users or their details
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Get users with pagination
      tags:
      - Users
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves a single user's details including roles, permissions,
        and address information by their unique ID
      parameters:
      - description: User ID
        example: '"123e4567-e89b-12d3-a456-426614174000"'
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User fetched successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.UserRes'
              type: object
        "400":
          description: ID is required
          schema:
            $ref: '#/definitions/helper.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error when fetching user or related data
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Get user by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Updates user information by ID. Only provided fields will be updated
        (partial update supported).
      parameters:
      - description: User ID
        example: '"123e4567-e89b-12d3-a456-426614174000"'
        in: path
        name: id
        required: true
        type: string
      - description: User update data (partial updates allowed)
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.UserRes'
              type: object
        "400":
          description: Invalid ID or request body
          schema:
            $ref: '#/definitions/helper.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Failed to update user or fetch related data
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Update user
      tags:
      - Users
swagger: "2.0"

definitions:
  helper.Response:
    description: Standard API response structure
    properties:
      data:
        description: |-
          The actual data payload (can be any type)
          @example {"id": 1, "name": "John Doe"}
      error:
        description: |-
          List of error messages (if any)
          @example ["Invalid email format", "Password too short"]
        items:
          type: string
        type: array
      message:
        description: |-
          Human-readable message about the response
          @example "Request processed successfully"
        type: string
      status_code:
        description: |-
          HTTP status code
          @example 200
        type: integer
      success:
        description: |-
          Indicates if the request was successfully processed
          @example true
        type: boolean
      timestamp:
        description: |-
          Timestamp of when the response was generated
          @example "2023-05-15T10:00:00Z"
        type: string
    type: object
  model.AadhaarOTPResponse:
    properties:
      entity:
        type: string
      otp_message:
        type: string
      reference_id:
        type: string
      status_code:
        type: integer
      timestamp:
        type: integer
      transaction_id:
        type: string
    type: object
  model.Address:
    properties:
      country:
        type: string
      created_at:
        type: string
      district:
        type: string
      full_address:
        type: string
      house:
        type: string
      id:
        description: Use string for ID
        type: string
      landmark:
        type: string
      pincode:
        type: string
      post_office:
        type: string
      state:
        type: string
      street:
        type: string
      subdistrict:
        type: string
      updated_at:
        type: string
      vtc:
        type: string
    type: object
  model.AddressRes:
    properties:
      country:
        type: string
      created_at:
        type: string
      district:
        type: string
      full_address:
        type: string
      house:
        type: string
      id:
        type: string
      landmark:
        type: string
      pincode:
        type: string
      post_office:
        type: string
      state:
        type: string
      street:
        type: string
      subdistrict:
        type: string
      updated_at:
        type: string
      vtc:
        type: string
    type: object
  model.AssignPermissionRequest:
    properties:
      permissions:
        items:
          type: string
        type: array
      role:
        type: string
    required:
    - permissions
    - role
    type: object
  model.AssignRolePermission:
    properties:
      created_at:
        type: string
      id:
        type: string
      is_validated:
        type: boolean
      role_permissions:
        items:
          $ref: '#/definitions/model.RoleResp'
        type: array
      updated_at:
        type: string
      username:
        type: string
    type: object
  model.AssignRoleRequest:
    properties:
      role:
        type: string
      user_id:
        type: string
    required:
    - role
    - user_id
    type: object
  model.ConnRolePermissionResponse:
    properties:
      created_at:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      permissions:
        items:
          $ref: '#/definitions/model.Permission'
        type: array
      role:
        $ref: '#/definitions/model.Role'
      updated_at:
        type: string
    type: object
  model.CreatePermissionRequest:
    properties:
      action:
        type: string
      description:
        type: string
      name:
        type: string
      resource:
        type: string
      source:
        type: string
    required:
    - name
    type: object
  model.CreateRoleRequest:
    properties:
      description:
        type: string
      name:
        type: string
      source:
        type: string
    required:
    - name
    type: object
  model.CreateUserRequest:
    properties:
      aadhaar_number:
        type: string
      country_code:
        type: string
      mobile_number:
        type: integer
      password:
        type: string
      username:
        type: string
    required:
    - mobile_number
    type: object
  model.CreditUsageRequest:
    properties:
      tokens:
        description: Required for transactions
        type: integer
      transaction_type:
        description: '"debit", "credit", or nil'
        type: string
      user_id:
        description: Using Base.ID
        type: string
    required:
    - user_id
    type: object
  model.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  model.MinimalUser:
    properties:
      country_code:
        type: string
      created_at:
        type: string
      id:
        type: string
      is_validated:
        type: boolean
      mobile_number:
        type: integer
      otp_response:
        $ref: '#/definitions/model.AadhaarOTPResponse'
      updated_at:
        type: string
      username:
        type: string
    type: object
  model.PasswordResetFlowRequest:
    properties:
      new_password:
        type: string
      otp:
        type: string
      username:
        type: string
    required:
    - username
    type: object
  model.Permission:
    properties:
      action:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        description: Use string for ID
        type: string
      name:
        type: string
      resource:
        type: string
      rolePermissions:
        items:
          $ref: '#/definitions/model.RolePermission'
        type: array
      source:
        type: string
      updated_at:
        type: string
      valid_end_time:
        type: string
      valid_start_time:
        type: string
    type: object
  model.Role:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        description: Use string for ID
        type: string
      name:
        type: string
      rolePermissions:
        items:
          $ref: '#/definitions/model.RolePermission'
        type: array
      roles:
        items:
          $ref: '#/definitions/model.UserRole'
        type: array
      source:
        type: string
      updated_at:
        type: string
    type: object
  model.RolePermission:
    properties:
      created_at:
        type: string
      id:
        description: Use string for ID
        type: string
      is_active:
        type: boolean
      permission:
        $ref: '#/definitions/model.Permission'
      permissionID:
        type: string
      role:
        $ref: '#/definitions/model.Role'
      roleID:
        type: string
      updated_at:
        type: string
    type: object
  model.RolePermissionResponse:
    properties:
      created_at:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      permission:
        items:
          $ref: '#/definitions/model.Permission'
        type: array
      role:
        $ref: '#/definitions/model.Role'
      updated_at:
        type: string
    type: object
  model.RolePermissionWrapper:
    properties:
      data:
        $ref: '#/definitions/model.RolePermissionResponse'
      timestamp:
        type: string
    type: object
  model.RoleRes:
    properties:
      permissions:
        items:
          $ref: '#/definitions/model.Permission'
        type: array
      role_name:
        type: string
    type: object
  model.RoleResp:
    properties:
      permissions:
        items:
          $ref: '#/definitions/model.Permission'
        type: array
      role_name:
        type: string
    type: object
  model.UpdateUserRequest:
    properties:
      care_of:
        type: string
      date_of_birth:
        type: string
      email_hash:
        type: string
      message:
        type: string
      mobile_number:
        type: integer
      name:
        type: string
      photo:
        type: string
      status:
        type: string
      username:
        type: string
      year_of_birth:
        type: string
    type: object
  model.User:
    properties:
      aadhaar_number:
        type: string
      address:
        allOf:
        - $ref: '#/definitions/model.Address'
        description: Address       Address    `gorm:"foreignKey:ID;references:AddressID"`
      address_id:
        type: string
      care_of:
        type: string
      country_code:
        type: string
      created_at:
        type: string
      date_of_birth:
        type: string
      email_hash:
        type: string
      id:
        description: Use string for ID
        type: string
      isValidate:
        type: boolean
      message:
        type: string
      mobile_number:
        type: integer
      name:
        type: string
      password:
        maxLength: 128
        minLength: 8
        type: string
      photo:
        type: string
      roles:
        items:
          $ref: '#/definitions/model.UserRole'
        type: array
      share_code:
        type: string
      status:
        type: string
      tokens:
        description: for credits
        type: integer
      updated_at:
        type: string
      username:
        type: string
      year_of_birth:
        type: string
    required:
    - password
    - username
    type: object
  model.UserRes:
    properties:
      aadhaar_number:
        type: string
      address:
        $ref: '#/definitions/model.AddressRes'
      care_of:
        type: string
      country_code:
        type: string
      created_at:
        type: string
      date_of_birth:
        type: string
      email_hash:
        type: string
      id:
        type: string
      is_validated:
        type: boolean
      message:
        type: string
      mobile_number:
        type: integer
      name:
        type: string
      password:
        type: string
      photo:
        type: string
      role_permissions:
        items:
          $ref: '#/definitions/model.RoleResp'
        type: array
      share_code:
        type: string
      status:
        type: string
      updated_at:
        type: string
      username:
        type: string
      year_of_birth:
        type: string
    type: object
  model.UserResponse:
    properties:
      aadhaar_number:
        type: string
      address:
        $ref: '#/definitions/model.AddressRes'
      care_of:
        type: string
      country_code:
        type: string
      created_at:
        type: string
      date_of_birth:
        type: string
      email_hash:
        type: string
      id:
        type: string
      is_validated:
        type: boolean
      message:
        type: string
      mobile_number:
        type: integer
      name:
        type: string
      photo:
        type: string
      role_permissions:
        items:
          $ref: '#/definitions/model.RoleRes'
        type: array
      share_code:
        type: string
      status:
        type: string
      updated_at:
        type: string
      username:
        type: string
      year_of_birth:
        type: string
    type: object
  model.UserRole:
    properties:
      created_at:
        type: string
      id:
        description: Use string for ID
        type: string
      is_active:
        type: boolean
      role:
        $ref: '#/definitions/model.Role'
      roleID:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/model.User'
      userID:
        type: string
    type: object
info:
  contact: {}
  description: Authentication, Authorization, and Accounting (AAA) service providing
    RBAC-based access control. Supports both gRPC and REST API interfaces for seamless
    integration with client applications. Offers comprehensive user management, role-based
    permission control, and session accounting capabilities for secure system access.
  title: AAA-Service API
  version: "1.0"
paths:
  /assign-permissions:
    get:
      consumes:
      - application/json
      description: Retrieves all role-permission relationships in the system with
        full details
      produces:
      - application/json
      responses:
        "200":
          description: Role-permission assignments fetched successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.RolePermissionResponse'
              type: object
        "500":
          description: Failed to fetch role-permission connections
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Get all role-permission assignments
      tags:
      - Role Permissions
    post:
      consumes:
      - application/json
      description: Assigns one or more permissions to a role and updates all affected
        user relationships
      parameters:
      - description: Permission assignment request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.AssignPermissionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Permissions assigned successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.ConnRolePermissionResponse'
              type: object
        "400":
          description: Invalid request or missing required fields
          schema:
            $ref: '#/definitions/helper.Response'
        "404":
          description: Role or permission not found
          schema:
            $ref: '#/definitions/helper.Response'
        "409":
          description: Permission already assigned to role
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Failed to assign permissions or update relationships
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Assign permissions to role
      tags:
      - Role Permissions
  /assign-permissions/by:
    get:
      consumes:
      - application/json
      description: Retrieves all permissions assigned to a specific role identified
        by name
      parameters:
      - description: Role name
        example: '"admin"'
        in: query
        name: role
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Role permissions fetched successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.RolePermissionWrapper'
              type: object
        "400":
          description: Role name parameter is required
          schema:
            $ref: '#/definitions/helper.Response'
        "404":
          description: Role not found or no permissions assigned
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Failed to fetch role-permission connections
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Get permissions by role name
      tags:
      - Role Permissions
  /assign-role:
    post:
      consumes:
      - application/json
      description: Assigns a specified role to a user and returns the updated user
        details with roles and permissions
      parameters:
      - description: Assign Role Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.AssignRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Role assigned successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.AssignRolePermission'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/helper.Response'
        "404":
          description: User or Role not found
          schema:
            $ref: '#/definitions/helper.Response'
        "409":
          description: Role already assigned to user
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Assign a role to a user
      tags:
      - Users
  /forgot-password:
    post:
      consumes:
      - application/json
      description: 'Handles the complete password reset flow in three steps: 1) Request
        OTP, 2) Verify OTP, 3) Reset password. Each step requires different request
        parameters.'
      parameters:
      - description: Password reset request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.PasswordResetFlowRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'Success responses vary by step: 1) ''OTP sent successfully'',
            2) ''OTP verified. Proceed to reset password.'', 3) ''Password reset successfully'''
          schema:
            type: object
        "400":
          description: Invalid request body or parameters
          schema:
            $ref: '#/definitions/helper.Response'
        "401":
          description: Invalid or expired OTP
          schema:
            $ref: '#/definitions/helper.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Password reset flow
      tags:
      - Authentication
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates a user with username and password, returns JWT tokens
        in response headers and optional user details in body
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.LoginRequest'
      - default: false
        description: Include full user details
        in: query
        name: user_details
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          headers:
            Authorization:
              description: Bearer access token
              type: string
            Refresh-Token:
              description: Refresh token
              type: string
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.UserResponse'
              type: object
        "400":
          description: Invalid request body or missing credentials
          schema:
            $ref: '#/definitions/helper.Response'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      summary: User login
      tags:
      - Authentication
  /permissions:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all permissions in the system with their details
      produces:
      - application/json
      responses:
        "200":
          description: Permissions retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Permission'
                  type: array
              type: object
        "500":
          description: Failed to retrieve permissions
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Get all permissions
      tags:
      - Permissions
    post:
      consumes:
      - application/json
      description: Creates a new permission and updates the authorization schema with
        the new permission
      parameters:
      - description: Permission creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.CreatePermissionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Permission created successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Permission'
              type: object
        "400":
          description: Invalid request or missing required fields
          schema:
            $ref: '#/definitions/helper.Response'
        "409":
          description: Permission already exists
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Failed to create permission or update schema
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Create a new permission
      tags:
      - Permissions
  /permissions/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves a single permission's details by its unique identifier
      parameters:
      - description: Permission ID
        example: '"123e4567-e89b-12d3-a456-426614174000"'
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Permission retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Permission'
              type: object
        "400":
          description: ID is required
          schema:
            $ref: '#/definitions/helper.Response'
        "404":
          description: Permission not found
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Get permission by ID
      tags:
      - Permissions
  /register:
    post:
      consumes:
      - application/json
      description: Creates a new user account with the provided details. Optionally
        sends OTP for Aadhaar verification if Aadhaar number is provided.
      parameters:
      - description: User creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.MinimalUser'
              type: object
        "400":
          description: Invalid request body or validation failed
          schema:
            $ref: '#/definitions/helper.Response'
        "409":
          description: Username, mobile number or Aadhaar already exists
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Create a new user
      tags:
      - Users
  /roles:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all roles in the system
      produces:
      - application/json
      responses:
        "200":
          description: Roles retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Role'
                  type: array
              type: object
        "500":
          description: Failed to retrieve roles
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Get all roles
      tags:
      - Roles
    post:
      consumes:
      - application/json
      description: Creates a new role with the provided details and updates the authorization
        schema
      parameters:
      - description: Role creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.CreateRoleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Role created successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Role'
              type: object
        "400":
          description: Invalid request or missing required fields
          schema:
            $ref: '#/definitions/helper.Response'
        "409":
          description: Role already exists
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Failed to create role or update schema
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Create a new role
      tags:
      - Roles
  /roles/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves a single role's details by its unique identifier
      parameters:
      - description: Role ID
        example: '"123e4567-e89b-12d3-a456-426614174000"'
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Role retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Role'
              type: object
        "400":
          description: ID is required
          schema:
            $ref: '#/definitions/helper.Response'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Get role by ID
      tags:
      - Roles
  /token-transaction:
    post:
      consumes:
      - application/json
      description: Handles token transactions (credit/debit) or fetches token balance
        when no transaction type is specified
      parameters:
      - description: Token transaction request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.CreditUsageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'Returns remaining tokens in all cases" example({"remaining_tokens":
            100})'
          schema:
            type: object
        "400":
          description: Invalid request, insufficient tokens, or invalid transaction
            type
          schema:
            $ref: '#/definitions/helper.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Manage user tokens
      tags:
      - Users
  /users:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all users including their roles, permissions,
        and address information
      produces:
      - application/json
      responses:
        "200":
          description: Users fetched successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.UserRes'
                  type: array
              type: object
        "500":
          description: Internal server error when fetching users or their details
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Get all users
      tags:
      - Users
  /users/{id}:
    put:
      consumes:
      - application/json
      description: Updates user information by ID. Only provided fields will be updated
        (partial update supported).
      parameters:
      - description: User ID
        example: '"123e4567-e89b-12d3-a456-426614174000"'
        in: path
        name: id
        required: true
        type: string
      - description: User update data (partial updates allowed)
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.UserRes'
              type: object
        "400":
          description: Invalid ID or request body
          schema:
            $ref: '#/definitions/helper.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Failed to update user or fetch related data
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Update user
      tags:
      - Users
swagger: "2.0"
